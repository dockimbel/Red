Red/System Quick Test - A testing framework 

  Author: Peter W A Wood
  Date: 22/05/2011
  Revision: 2
	Home: <a href="http://www.red-lang.org">red-lang.org</a>

===Introduction
Quick-Test is a small testing framework for Red/System. It is called quick-test as it was put together quickly to support the development of the "boot-strapped" version of Red/System. Hopefully, it also runs tests quite quickly and, perhaps more importantly, is a quick way to write meaningful tests.

As a result, quick-test is very fussy about where files are and it is not particularly fault tolerant. These were traded-off for an earlier implementation.

There are actually two aspects to Quick-Test. The first is quick-test.reds, a handful of Red/System functions which can be included in a Red/System program to write unit tests. This can easily be used on its own to test Red/System code and is not at all fussy about where files reside.

The second aspect is that Quick-Test is a full-test suite for Red/System itself and includes the files used to test Red/System.

There are many improvements that could be made to quick-test. It is expected that quick-test will be replaced at the time when Red/System is re-written so they probably won't get made.

===Types of Tests
Quick-Test supports three types of tests - tests of Red/System code, tests of Red/System programs and tests of the Red/System compiler behaviour.

The first type of tests are written in Red/System, the other two in REBOL.

===Quick-Test Components
Quick-Test consists of the following:
  quick-test.r - a REBOL script that supports testing compiler and executable output.
  quick-test.reds - a set of Red/System functions that supports writing tests in Red/System.
  quick-test-all.reds a set of Red/System functions for totalling no of tests, passes and failures.
  prin-int.reds - a temporary Red/System function whichs prints an integer.
  
(The above are stored in the red-system/tests/quick-test/ directory.)
  
  rs-test-suite.r - a consolidated script of all the individual tests written using quick-test.r
  rs-test-suite.reds - a consolidated script of all the individual tests written using quick-test.reds
  
(Both the above are stored in the red-system/tests/source/ directory.)
  
  run-all.r - a script which runs the complete set of Red/System tests.
  run-test.r - a script which will run an individual test.
  
(Both the above are stored in the red-system/tests/ directory.)
  
===Directory Structure
Quick-Test uses the following directory structure:

  red-system/
    tests/                          ;; the main test directory
    quick-test/                     ;; quick-test components
    source/                         ;; all test sources
      builtin/                      ;; tests for builtin functions (eg print)
      compiler/                     ;; tests of the compiler
      run-time/                     ;; tests of the run time library
      units/                        ;; base language tests (eg datatype tests)
    runnable/                       ;; the test executables
                                    ;; automatically created by Quick-Test
                                    ;; listed in .gitignore

===Running Tests
The Red/System tests are designed to be run from a REBOL/VIEW console session. The tests must be run from the red-system/tests/ directory.

To run all tests:
  do %run-all.r
  
To run an individual test file:
  do/args %run-test.r "%<file>"
  
  where <file> is the path to the file to be tested (from the red-system/tests/ directory).
  
  e.g.
    The command to run the logic-test.reds test file which is in the units directory:
    do/args %run-test.r "%source/units/logic-test.reds"
    
(Note: %run-test.r can run both .r and .reds tests).

===Writing Tests
In terms of writing tests, Quick-Test is quite minimal by design. It provides only a simple assert function and a minimal set of test organisation functions.


Example 1: A Test of inc.reds - an imaginary function which adds 1 to an integer

  Red/System [
    Title:   "Tests of inc.reds"
	  File: 	 %source/run-time/inc-test.reds
  ]
  
  #include %../../quick-test/quick-test.reds 
  #include %relativepathto/inc.reds
  
  ~~~start-file~~~ "inc"                          ;; start test file  
                                                  ;;  initialises totals
                                                  
  ===start-group=== "increment an variable"       ;;  a marker to group tests
                                                  ;;  group name [string!]
  
    --test-- "inc-test-1"                         ;; start of code for a test
                                                  ;;   test name [string!]
      i: 1
    --assert 2 = inc i                            ;; an assertion
                                                  ;;   expression [logic!]
                                                   
  ===end-group===                                 ;; end of group marker                                                  
                                                   
  ~~~end-file~~~                                  ;; finish test - print totals
  
  
Example 2: A test to check the compiler correctly identifies aan unidentified variable:

  change-dir %../                   ;; revert to tests/ dir (from runnable)
                                    ;; .r test scripts are copied to runnable 
                                    ;; before execution
                                    
                                    ;; There is no need to include quick-test.r
                                    ;; as it will have been included by either 
                                    ;; %run-all.r or %run-test.r
  
  ~~~start-file~~~ "comp-err"       ;; start test
                                  
    --test-- "compile-error-1"
      write %runnable/comp-err.reds {
        Red/System []
        i := 1;
      }

    --compile %runnable/comp-err.reds   ;; compiles programs
                                        ;; compiler output is collected in
                                        ;;  qt/comp-output
                                        
      if exists? %runnable/comp-err.reds [delete %runnable/comp-err.reds]      
    
    --assert none <> find qt/comp-output "*** undefined symbol"
    --assert none <> find qt/comp-output "at:  ["
    --assert none <> find qt/comp-output "i := 1"
    --assert none <> find qt/comp-output "]"


  ~~~end-file~~~                          ;; ends test and print totals

Example 3: Test the output of a Red/System programs
  
  change-dir %../                   ;; revert to tests/ directory from runnable/
  
  ~~~start-file~~~ "output"  
  
    --test-- "hello"
                                    ;; --compile compiles a Red/System
                                    ;; it returns the relative path to the
                                    ;; executable file or none in the case of
                                    ;; a compilation error

      either exe: --compile src: %source/compiler/hello.reds [

      --run exe                     ;; runs the program
                                    ;; the output is collected in qt/output 
  
    --assert none <> find qt/output "hello"    
    --assert none <> find qt/output "world"
      ][
        qt/compile-error src                        ;; generates a test failure
                                                    ;;  so that the problem is
                                                    ;;  highlighted
]

~~~end-file~~~   

###

REBOL []

do/args %makedoc2.r 'load-only
doc: scan-doc read file: system/options/script
set [title out] gen-html/options doc [(options)]

file: last split-path file
replace file ".txt" ".html"
file2: copy file
insert find file2 "." "-light"
replace out "$DARK$"  file
replace out "$LIGHT$" file2

write file out
replace out "dark.css" "light.css"
write file2 out



  
  
  
  
      