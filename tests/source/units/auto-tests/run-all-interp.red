
Red [
	Title:   "Red auto-generated test"
	Author:  "Peter W A Wood"
	License: "BSD-3 - https://github.com/dockimbel/Red/blob/origin/BSD-3-License.txt"
]

comment {
	This file is generated by make-run-all-red.r
	Do not edit this file directly.
}

#include %../../../../quick-test/quick-test.red

~~~start-file~~~ "run-all-interp"
do [

===start-group=== "Basic Directives"

	--test-- "#if"
		#do [cond?: yes anti?: no level: 2]
		--assert #if config/type = 'exe [true]
		--assert #if cond? [true]
		--assert #if not anti? [true]
		--assert #if find [a b c] 'b [true]

	--test-- "#either"
		--assert #either cond? [true][false]
		--assert #either anti? [false][true]

	--test-- "#switch"
		--assert #switch 1 [1 [true] 2 [false] #default [false]]
		--assert #switch 'b [a [false] b [true] #default [false]]
		--assert #switch 'c [a [false] b [false] #default [true]]
		--assert #switch level [1 [false] 2 [true] #default [false]]

	--test-- "#case"
		--assert #case [level = 1 [false] level >= 2 [true] 'else [false]]

	--test-- "#process"
		#process off
		--assert ["*test12*" #if #either #switch #case #do] 
			= load {["*test12*" #if #either #switch #case #do]}
		#process on

===end-group===

===start-group=== "Macros"

	--test-- "macro-1"
		#do [
			unless value? 'maximum-of [
				maximum-of: function [list [block! paren!]][
					m: list forall list [if list/1 > m/1 [m: list]]
					m
				]
			]
			a: 12
		]

		#macro add2: func [n][n + 2]
		#macro foo: func [a b][add2 a + b]
		#macro bar: func [a b][a - b]
		#macro ['max some [integer!]] func [s e][
			first maximum-of copy/part next s e
		]

	--test-- "macro-2"
		--assert 60 = #do keep [5 * a]

	--test-- "macro-3"
		--assert 12 = foo 1 foo 3 4

		#local [
			#macro integer! func [s e][s/1 + 1]
			--test-- "macro-4"
				--assert (load "17") = foo 1 foo 3 4
			--test-- "macro-5"
				--assert 6 + 2 = (load "10")
		]
		--test-- "macro-6"
			--assert 12 = foo 1 foo 3 4
		--test-- "macro-7"
			--assert 54546 = max 50 20 54546 40 85 30
		--test-- "macro-8"
			#reset
			--assert [foo 5 9] = load {foo 5 9}

===end-group===


===start-group=== "literal logic! value tests"

  --test-- "llv-1"
  --assert true
  
  --test-- "llv-2"
  --assert not false
===end-group===
  
===start-group=== "logic variable tests"
  --test-- "lv-1"
    a: true
  --assert a
  
  --test-- "lv-2"
    a: false
  --assert not a
===end-group===

===start-group=== "conditional expression assignment tests"
  --test-- "lce-1"
    a: 3 < 5
  --assert a
  
  --test-- "lce-2"
    a: 1 = 2
  --assert not a
===end-group===
  
===start-group=== "logic value as last conditional expression in UNTIL tests"
  --test-- "lu-1"
    a: true
    i: 0
    until [
      i: i + 1
      a
    ]
  --assert i = 1
  
  --test-- "lu-2"
    i: 0
    c: 3
    stop?: false
    until [
      i: i + 1
      c: c - 1
      if 0 = c [stop?: true]
      stop?
    ]
  --assert c = 0
  --assert i = 3
===end-group===

===start-group=== "logic value as conditional expression in WHILE tests"
  --test-- "lw-1"
    a: false
    i: 0 
    while [a][i: i + 1]
  --assert i = 0

  --test-- "lw-2"
    i: 0
    c: 3
    run?: true
    while [run?][
      i: i + 1
      c: c - 1
      if 0 = c [run?: false]
    ]
  --assert c = 0
  --assert i = 3
===end-group===

===start-group=== "passing logic! as function's argument tests"
    log-foo: func [a [logic!] return: [logic!]][a]

  --test-- "logic-arg-1"    
  --assert log-foo true

  --test-- "logic-arg-2" 
  --assert not log-foo false

  --test-- "logic-arg-3" 
  --assert log-foo 1 < 2
  
  --test-- "logic-arg-4"
  --assert log-foo 3 <> 4
  
  --test-- "logic-arg-5"
  --assert log-foo (1 + 1 < 3)
  
  --test-- "logic-arg-6"
    a: false
    if false = log-foo (2 + 2 = 5) [a: true]
  --assert a
  
  --test-- "logic-arg-7"
  --assert not log-foo 3 = 4

===end-group===

===start-group=== "all with logic!"

  --test-- "logic-all-1"
    result:  all [
      true
      true
    ]
  --assert result

  --test-- "logic-all-2"
    result: all [
      false
      true
    ]
  --assert not result

  --test-- "logic-all-3"
    result all [
      true
      false
    ]
  --assert not result

  --test-- "logic-all-4"
    result: all [
      false
      false
    ]
  --assert not result
  
  --test-- "logic-all-5"
    a: all [true]
  --assert a

  --test-- "logic-all-6"
    a: all [false]
  --assert not a

  --test-- "logic-all-7"
    a: all [1 < 2 false]
  --assert not a

  --test-- "logic-all-8"
    a: all [false 1 < 2]
  --assert not a

  --test-- "logic-all-9"
    a: all [true 1 = 2]
  --assert not a

  --test-- "logic-all-10"
    a: all [1 = 2 true]
  --assert not a
  
  --test-- "logic-all-11"
    a: all [1 < 2]
  --assert a
  
  --test-- "logic-all-12"
    a: all [1 = 2]
  --assert not a
  
  --test-- "logic-all-13"
    a: all [1 < 2 3 <> 4]
  --assert a

  --test-- "logic-all-14"
    a: all [1 = 2 3 <> 4]
  --assert not a
  
  --test-- "logic-all-15"
  --assert not log-foo make logic! all [1 = 2]
   
  --test-- "logic-all-16"
  --assert log-foo all [1 < 2 3 <> 4]
  
  --test-- "logic-all-17"
  --assert not log-foo make logic! all [1 = 2 3 <> 4]

  --test-- "logic-all-18"
    a: log-foo all [1 < 2]
  --assert a 
 
  --test-- "logic-all-19"
    a: log-foo make logic! all [1 = 2]
  --assert not a
  
  --test-- "logic-all-20"
    a: log-foo all [1 < 2 3 <> 4]
  --assert a

  --test-- "logic-all-21"
      a: all [log-foo true]
  --assert a
  
===end-group===

===start-group=== "any with logic!"

  --test-- "logic-any-1"
    result: any [
      true
      true
    ]
  --assert result
  
  --test-- "logic-any-2"
    result: any [
      false
      true
    ]
  --assert result

  --test-- "logic-any-3"
    result: any [
      true
      false
    ]
  --assert result
  
  --test-- "logic-any-4"
    result: any [
      false
      false
    ]
  --assert not result
  
  --test-- "logic-any-5"
    a: any [true]
  --assert a

  --test-- "logic-any-6"
    a: any [false]
  --assert not a

  --test-- "logic-any-7"
    a: any [1 < 2 false]
  --assert a

  --test-- "logic-any-8"
    a: any [false 1 < 2]
  --assert a
 
  --test-- "logic-any-9"
    a: any [true 1 = 2]
  --assert a

  --test-- "logic-any-10"
    a: any [1 = 2 true]
  --assert a

  --test-- "logic-any-11"
  a: any [1 < 2]
  --assert a

  --test-- "logic-any-12"
    a: any [1 = 2]
  --assert not a
  
  --test-- "logic-any-13"
    a: any [1 < 2 3 <> 4]
  --assert a
 
  --test-- "logic-any-14"
    a: any [1 = 2 3 <> 4]
  --assert a
  
  --test-- "logic-any-15"
  --assert none = any [1 = 2]
  
  --test-- "logic-any-16"
  --assert log-foo any [1 < 2 3 <> 4]
  
  --test-- "logic-any-17"
  --assert log-foo any [1 = 2 3 <> 4]
  
  --test-- "logic-any-18"
    a: log-foo any [1 < 2]
  --assert a 

  --test-- "logic-any-19"
    a: log-foo (none <> any [1 = 2])
  --assert not a 

  --test-- "logic-any-20"
    a: log-foo any [1 < 2 3 <> 4]
  --assert a
  
  --test-- "logic-any-21"
    a: any [log-foo true]
  --assert a

===end-group===

===start-group=== "function returning a logic value"
    lgc-test?: func [
      return: [logic!]
    ][
      either 1 < 2 [true] [false]
    ]

  --test-- "logic-return-1" 
  --assert lgc-test?

  --test-- "logic-return-2"
    a: lgc-test?
  --assert a

    lgc-test2?: func [
      return: [logic!]
    ][
      either 1 = 2 [true] [false]
    ]

  --test-- "logic-return-3"
  --assert not lgc-test2?

  --test-- "logic-return-4"
    a: lgc-test2?
  --assert not a
  
	lgc-test3?: func [return: [logic!]][
		either true [
			1 = 3
		][
			false
		]
	]
	
 --test-- "logic-return-5"
 --assert not lgc-test3?
 
	lgc-test4?: func [return: [logic!]][
		either false [
			1 = 3
		][
			false
		]
	]
	
 --test-- "logic-return-6"
 --assert not lgc-test4?
 
	lgc-test5?: func [return: [logic!]][
		either 1 < 2 [true] [false]
	]

 --test-- "logic-return-7"
 --assert lgc-test5?

===end-group===

===start-group=== "equality lgc-tests"

  --test-- "logic-=-1"
    a: false
  --assert a = false

  --test-- "logic-=-2"
    a: true
  --assert not a = false

  --test-- "logic-=-3"
    a: false
  --assert not a <> false

  --test-- "logic-=-4"
    a: true
  --assert a <> false

  --test-- "logic-=-5"
    a: false
    b: a = false
  --assert b
  
  --test-- "logic-=-6"
    a: true
    b: a = false
  --assert not b

  --test-- "logic-=-7"
    a: false
    b: false <> a
  --assert not b

  --test-- "logic-=-8"
    a: true
    b: false <> a
  --assert b
  
  --test-- "logic-=-9"
    a: false
  --assert log-foo a = false
  
  --test-- "logic-=-10"
    a: false
  --assert log-foo a = false
  
  --test-- "logic-=-11"
    a: true
  --assert not log-foo a = false
  
===end-group===

===start-group=== "logic value returned by function"

	fooT: func [return: [logic!]][1 < 2]
	fooF: func [return: [logic!]][1 = 2]

	--test-- "logic-ret-1" --assert fooT
	--test-- "logic-ret-2" --assert not fooF

===end-group===

===start-group=== "complemented"

	--test-- "comp-1" --assert true  = complement false
	--test-- "comp-2" --assert false = complement true

===end-group===

===start-group=== "and"
	--test-- "and1" --assert true  and true  =  true
	--test-- "and2" --assert true  and false =  false
	--test-- "and3" --assert false and true  =  false
	--test-- "and4" --assert false and false =  false
===end-group===

===start-group=== "or"
	--test-- "or1" --assert  true  or false  =  true
	--test-- "or2" --assert  false or true   =  true
	--test-- "or3" --assert  false or false  =  false
	--test-- "or4" --assert  true  or true   =  true
===end-group===

===start-group=== "xor"
	--test-- "xor1" --assert true  xor false =  true
	--test-- "xor2" --assert false xor true  =  true
	--test-- "xor3" --assert true  xor true  =  false
	--test-- "xor4" --assert false xor false =  false
===end-group===


===start-group=== "converted Red/System tests"

	--test-- "nested ifs inside a function with many return points"
		niff: func [
			i       [integer!]
			return: [integer!]
		][
			if i > 127 [
				if 192 = i [return i]
				if 193 = i [return i]
				if 244 < i [return i]
				if i < 224 [
					if i = 208 [return i]
				]
			]
			return -1
		]
		--assert 208 = niff 208
		--assert -1 = niff 1
		--assert -1 = niff 224
  
	--test-- "simple if"
		i: 0
		if true [i: 1]
		--assert i = 1
  
	--test-- "nested if"
		i: 0
		if true [
			if true [
				i: 1
			]
		]
		--assert i = 1
	
	--test-- "double nested if"
		i: 0
		if true [
			if true [
				if true [
					i: 1
				]
			]
		]
		--assert i = 1
	
	--test-- "triple nested if"
		i: 0
		if true [
			if true [
				if true [
					if true [i: 1]
				]
			]
		]
		--assert i = 1
	  
	--test-- "either basic 1"
		--assert 1 = either true [1] [2]
	
	--test-- "either basic 2"
		--assert 2 = either false [1] [2]
	
	--test-- "either basic 3"
		--assert 1 = either 42 [1] [2]

===end-group===

===start-group=== "basic if tests"

	--test-- "bif-1"
		--assert none = if false [1]     ;; # Issue 321
  	
===end-group===

===start-group=== "condition evaluation"
	
	--test-- "ce-1"
  		--assert 1 + 4 = 5

===end-group===

===start-group=== "any"

	--test-- "any-1"
  		--assert any [true false]
  		
  	--test-- "any-2"
  		--assert any [false true]
  		
  	--test-- "any-3"
  		--assert not any [false false]
  		
  	--test-- "any-4"
  		--assert any [true none]
  		
  	--test-- "any-5"
  		--assert any [none true]
  		
  	--test-- "any-6"
  		--assert not any [none none]
  		
  	--test-- "any-7"
  		--assert not any [false false]
  		
  	--test-- "any-8"
  		--assert any [not none not none]
  		
  	--test-- "any-9"
  		--assert 3 = any [1 = 2 3]

===end-group===

===start-group=== "all"

	--test-- "all-1"
  		--assert not all [true false]
  		
  	--test-- "all-2"
  		--assert not all [false true]
  		
  	--test-- "all-3"
  		--assert all [true true]
  		
  	--test-- "all-4"
  		--assert not all [true none]
  		
  	--test-- "all-5"
  		--assert not all [none true]
  		
  	--test-- "all-6"
  		--assert not all [none none]
  		
  	--test-- "all-7"
  		--assert not all [false false]
  		
  	--test-- "all-8"
  		--assert all [not none not none]
  		
  	--test-- "all-9"
  		--assert not all [1 = 2 3]

===end-group===

    


===start-group=== "first, second, third, fourth, fifth"

	--test-- "series-fstff-1"
	  sf1-ser:  [1 2 3 4 5]
		--assert 1 = first sf1-ser
		--assert 2 = second sf1-ser
		--assert 3 = third sf1-ser
		--assert 4 = fourth sf1-ser
		--assert 5 = fifth sf1-ser
		--assert 5 = last sf1-ser

	--test-- "series-fstff-2"
	  sf2-ser:  [1 2 3 4 5]
	  --assert 2 = first next sf2-ser
	
	--test-- "series-fstff-3"
	  sf3-ser:  "12345"
	  --assert 49 = first sf3-ser
	  --assert 53 = last sf3-ser
	
	--test-- "series-fstff-4"
	  sf4-ser:  [1 2 3 4 5]
	  --assert none = fifth next sf4-ser
	
	--test-- "series-fstff-5"
	  sf5-ser:  "12345"
	  --assert 53 = fifth sf5-ser
	
	--test-- "series-fstff-6"
	  stf6-ser: #{000102}
		--assert 0 = first stf6-ser
		--assert 1 = second stf6-ser
		--assert 2 = last stf6-ser
	
	--test-- "series-fstff-7"
		--assert 'a = first [a b c d]
	
	--test-- "series-fstff-8"
		--assert 'a = first first first first first first first first first [[[[[[[[[a]]]]]]]]]
	
	--test-- "series-fstff-9"
		--assert #"^(00)" = first "^(00)"
	
	--test-- "series-fstff-10"
		--assert #"^(00)" = first "^(00)a" 
	  
	--test-- "series-fstff-11"
		--assert #"^(00)" = second "a^(00)"
	
	--test-- "series-fstff-12"
		--assert #"^(00)" = second "a^(00)b"

	--test-- "series-fstff-13"
		sf6-ser: make hash! [a b]
		--assert 'a = first sf6-ser
		--assert 'b = last sf6-ser

	--test-- "series-fstff-14"
		sf7-ser: make hash! [1 2 3]
		--assert 2 = first next sf7-ser
		--assert none = fifth next sf7-ser
	
===end-group===

===start-group=== "next"
  --test-- "series-next-1"
  	--assert 2 = first next [1 2 3 4 5]
  --test-- "series-next-2"
  	--assert 3 = first next next [1 2 3 4 5]
  --test-- "series-next-3"
  	--assert 4 = first next next next [1 2 3 4 5]
  --test-- "series-next-4"
  	--assert 5 = first next next next next [1 2 3 4 5]
  --test-- "series-next-5"
  	--assert none = first next next next next next [1 2 3 4 5]
  --test-- "series-next-6"
 	 --assert 50 = first next "12345"
  --test-- "series-next-7"
 	 --assert 51 = first next next "12345"
  --test-- "series-next-8"
	  --assert 52 = first next next next "12345"
  --test-- "series-next-9"
	  --assert 53 = first next next next next "12345"
  --test-- "series-next-10"
 	 --assert none = first next next next next next "12345"
  --test-- "series-next-11"
  	--assert #"^(00)" = first next "a^(00)"
  --test-- "series-next-12"
 	 --assert #"^(00)" = first next "a^(00)b" 
  --test-- "series-next-13"
 	 --assert 1 = first next #{000102} 
===end-group===

===start-group=== "back"
  --test-- "series-back-1"
  	--assert 1 = first back next [1 2 3 4 5]
  --test-- "series-back-2"
  	--assert 1 = first back back next next [1 2 3 4 5]
  --test-- "series-back-3"
 	 --assert 1 = first back back back next next next [1 2 3 4 5]
  --test-- "series-back-4"
 	 --assert 1 = first back back back back next next next next [1 2 3 4 5]
  --test-- "series-back-5"
 	 --assert 1 = first back back back back back next next next next next [1 2 3 4 5]
  --test-- "series-back-6"
 	 --assert 49 = first back next "12345"
  --test-- "series-back-7"
 	 --assert 50 = first back next next "12345"
  --test-- "series-back-8"
 	 --assert 51 = first back next next next "12345"
  --test-- "series-back-9"
 	 --assert 52 = first back next next next next "12345"
  --test-- "series-back-10"
  	--assert 53 = first back next next next next next "12345"
  --test-- "series-back-11"
  	--assert 49 = first back "12345"
  --test-- "series-back-12"
  	--assert 1 = first back next make hash! [1 2 3 4 5]
  --test-- "series-back-13"
 	 --assert 1 = first back next next #{00010203}
===end-group===

===start-group=== "tail"
  --test-- "series-tail-1"
  	--assert 5 = first back tail [1 2 3 4 5]
  --test-- "seried-tail-2" 
  	--assert none = pick tail [1 2 3 4 5] 1
  --test-- "series-tail-3"
  	hs-ser-1: make hash! [1 2 3 4 5]
  	--assert 5 = first back tail hs-ser-1
  --test-- "seried-tail-4"
  	hs-ser-2: make hash! [1 2 3 4 5]
  	--assert none = pick tail hs-ser-2 1
  --test-- "series-tail-5"
  	--assert #{02} = back tail #{0102}
===end-group===

===start-group=== "pick"

  --test-- "series-pick-1"
  	--assert none = pick "" 1
  
  --test-- "series-pick-2"
  	--assert none = pick "" 0
  
  --test-- "series-pick-3"
 	 --assert none = pick "" 2
  
  --test-- "series-pick-4"
 	 --assert 49 = pick "12345" 1
  
  --test-- "series-pick-5"
 	 --assert 53 = pick "12345" 5
  
  --test-- "series-pick-6"
	  --assert 1 = pick [1 2 3 4 5] 1
  
  --test-- "series-pick-7"
	  --assert 2 = pick [1 2 3 4 5] 2
  
  --test-- "series-pick-8"
 	 --assert 4 = pick [1 2 3 4 5] 4
  
  --test-- "series-pick-9"
 	 --assert 5 = pick [1 2 3 4 5] 5
  
  --test-- "series-pick-10"
	  --assert 2 = pick next next next [1 2 3 4 5] -2
  
  --test-- "series-pick-11"
 	 --assert 3 = pick next next next [1 2 3 4 5] -1
  
  --test-- "series-pick-12"
 	 --assert none = pick next next next [1 2 3 4 5] 0
  
  --test-- "series-pick-13"
 	 --assert none = pick "12345" -1
  
  --test-- "series-pick-14"
    sp14-i: 1
    --assert 1 = pick [1 2 3 4 5] sp14-i
  
  --test-- "series-pick-15"
    sp15-i: 4
    --assert 4 = pick [1 2 3 4 5] sp15-i
  
  --test-- "series-pick-16"
    sp16-i: -2
    --assert 2 = pick next next next [1 2 3 4 5] sp16-i
  
  --test-- "series-pick-17"
    sp17-i: 0
    --assert none = pick next next next [1 2 3 4 5] sp17-i
  
  --test-- "series-pick-18"
    sp18-i: -1
    --assert none = pick "12345" sp18-i
  
  --test-- "series-pick-19"
  	--assert 5 = pick make hash! [1 2 3 4 5] 5
  
  --test-- "series-pick-20"
  	--assert 2 = pick next next next make hash! [1 2 3 4 5] -2
  
  --test-- "series-pick-21"
  	--assert  2 = pick #{0102} 2

  --test-- "series-pick-22"
  	--assert  1 = pick tail #{0102} -2
  
  --test-- "series-pick-23"
  	sp23-b: [4 7 9 [11] test /ref 'red]
  	--assert 7 = pick sp23-b 2
  	
  --test-- "series-pick-24"
  	sp24-b: [4 7 9 [11] test /ref 'red]
  	--assert 11 = pick pick sp24-b 4 1
 
  --test-- "series-pick-25"
  	sp25-b: [4 7 9 [11] test /ref 'red]
  	--assert /ref = pick sp25-b 6
  	
  --test-- "series-pick-26"
  	sp26-b: [4 7 9 [11] test /ref 'red]
  	--assert 'red = pick sp26-b 7
  	
===end-group===

===start-group=== "select"
	--test-- "series-select-1"
		--assert 2 = select [1 2 3 4 5] 1
	--test-- "series-select-2"
		--assert 5 = select [1 2 3 4 5] 4
	--test-- "series-select-3"
		--assert none = select [1 2 3 4 5] 0
	--test-- "series-select-4"
		--assert none = select [1 2 3 4 5] 5
  
	--test-- "series-select-5"
		a: [2 3 5 test #"A" a/b 5 "tesT"]
		--assert #"A" = select a 'test
		
	--test-- "series-select-6"
		list: [a 1 b 2 c 3]
		--assert 2 = list/b
		
	--test-- "series-select-6"
		--assert 'test = select/skip a 5 2

	--test-- "series-select-7"
		s: "Hello, Red World!"
		--assert #"e" = select s #"r"

	--test-- "series-select-8"
		--assert #"l" = select/last s #"r"

	--test-- "series-select-9"
		--assert #"d" = select/skip s "e" 2

	--test-- "series-select-10"
		--assert none? select s #"!"

  --test-- "series-select-11"
  --assert none = select #{0102} 2

  --test-- "series-select-12"
  --assert 2 = select #{0102} 1

  --test-- "series-select-13"
  --assert 2 = select #{0102} #{01}

  --test-- "series-select-14"
  --assert 3 = select #{010203} #{0102}

  --test-- "series-select-15"
  --assert 4 = select/skip #{01030304} #{03} 2

	--test-- "series-select-16"
		--assert 5 = select make hash! [1 2 3 4 5] 4

	--test-- "series-select-17"
		hs-sel-1: make hash! [2 3 5 test #"A" a/b 5 "tesT"]
		--assert #"A" = select hs-sel-1 'test
		
	--test-- "series-select-18"
		list: make hash! [a 1 b 2 c 3]
		--assert 2 = list/b

	--test-- "series-select-19"
		--assert 'test = select/skip hs-sel-1 5 2

	--test-- "series-select-20"
		hs-select-1: make hash! [aBc 1 abc 2 ABc 3]
		--assert 1 = select hs-select-1 'abc
		--assert 2 = select/case hs-select-1 'abc
	
	--test-- "series-select-21"
		ss21-h: make hash! [1x2 0 3x4 1]
		--assert 0 = select ss21-h 1x2
		
	--test-- "series-select-22"
		ss21-b: [1x2 0 3x4 1]
		--assert 0 = select ss21-b 1x2
		
===end-group===

===start-group=== "append"
  --test-- "series-append-1"
  --assert 6 = last append [1 2 3 4 5] 6
  --test-- "series-append-2"
  --assert 6 = last append [1 2 3 4] [5 6]
  --assert 4 = fourth append [1 2 3 4] [5 6]
  --assert 5 = fifth append [1 2 3 4] [5 6]
  --test-- "series-append-3"
  --assert 55 = last append "12345" "67"
  --test-- "series-append-4"
  --assert 233 = last append "abcde" "é" ;; utf-8 C3 A9
  --test-- "series-append-5"
  --assert 49 = last append "abcdeé" "1" ;; utf-8 C3 A9
  --test-- "series-append-6"
  --assert 10000 = last append "abcde" "✐"
  --test-- "series-append-7"
  --assert 48 = last append "abcde^(2710)" "0"
  --test-- "series-append-8"
  --assert 10000 = last append "abcdeé" "^(2710)"
  --test-- "series-append-9"
  --assert 233 = last append "abcde^(2710)" "é"
  --test-- "series-append-10"
  --assert 65536 = last append "abcde" "^(010000)"   
  --test-- "series-append-11"
  --assert 48 = last append "abcde^(010000)" "0"
  --test-- "series-append-12"
  --assert 65536 = last append "abcde^(2710)é" "^(010000)" 
  
  --test-- "series-append-13"
	blk: make block! 1
	append blk 'x/y
	append/only blk  'r/s
	--assert "[x y r/s]" = mold blk

  --test-- "series-append-14"
	blk: [1 2]
	append/dup/part blk [4 5 6] 3 2
	--assert "[1 2 4 5 4 5 4 5]" = mold blk
	
  --test-- "series-append-15"
	blk: [1 2]
	append/dup/part blk [4 5 6] 2 3
	--assert "[1 2 4 5 6 4 5 6]" = mold blk	

  --test-- "series-append-16"
	str: "12"
	append/dup/part str "456" 3 2 
	--assert str = "12454545"

  --test-- "series-append-17"
	str: "12"
	append/part/dup str "456" 3 2 
	--assert str = "12456456"

  --test-- "series-append-18"
  --assert 4 = last append #{010203} #{04}
  --test-- "series-append-19"
  --assert #{01020304} = append #{01} [#{02} #{0304}]
  --test-- "series-append-20"
  --assert #{0161} = append #{01} "a"
  --test-- "series-append-21"
  --assert #{C3A9} = append #{} #"é"
  --test-- "series-append-22"
  --assert #{C3A9} = append #{} "é"
  --test-- "series-append-23"
  --assert #{01020102} = append/part/dup #{} #{010203} 2 2
  --test-- "series-append-24"
  hs-append-1: make hash! [a 1 b 2]
  --assert 6 = last append hs-append-1 [c 6]
  --assert 6 = select hs-append-1 'c

  --test-- "series-append-25"
  --assert "a#{6263}" = append "a" #{6263}
  --assert #{6162} = append #{} "ab"

  --test-- "series-append-26"
  --assert #{6162} = append/part #{} #{616263} 2
  --assert #{6162} = append/part #{} "abc" 2
  --assert #{C3A9} = append/part #{} "ébc" 2
  --assert #{C3A96263} = append #{} "ébc"

===end-group===

===start-group=== "series-equal"

  --test-- "series-equal-1"
  --assert [] = []
  
  --test-- "series-equal-2"
    se2-b: []
  --assert [] = se2-b
  
  --test-- "series-equal-3"
    se3-b: []
  --assert se3-b = []
  
  --test-- "series-equal-4"
    se4-b: [1]
  --assert se4-b = [1]
  
  --test-- "series-equal-5"
    se5-b: ["abcde"]
  --assert se5-b = ["abcde"]

  --test-- "series-equal-6"
  --assert #{} = #{}

  --test-- "series-equal-7"
  --assert #{01} = next #{0001}
  
===end-group===

===start-group=== "series-find"

  --test-- "series-find-1"
  --assert 3 = first find [1 2 3 4 5] 3 
  
  --test-- "series-find-2"
  --assert 'a = first find [a b c d e] 'a
  
  --test-- "series-find-3"
  --assert 'e = first find [a b c d e] 'e
  
  --test-- "series-find-4"
  --assert none = find [] 'a
  
  --test-- "series-find-5"
  --assert none = find [1 2 3 4] 'a
  
  --test-- "series-find-6"
  --assert none = find next [a b c d e] 'a
  
  --test-- "series-find-7"
  --assert 51 = first find "12345" "3"
  
  --test-- "series-find-8"
  --assert 51 = first find "12345" "^(33)"
  
  --test-- "series-find-9"
  --assert 51 = first find "12345" first "^(33)"
  
  --test-- "series-find-10"
  --assert 51 = first find "12345" #"3"
  
  --test-- "series-find-11"
  --assert 51 = first find "12345" #"^(33)"
  
  --test-- "series-find-12"
  --assert #"3" = first find "12345" #"3"
  
  --test-- "series-find-13"
  --assert #"a" = first find "abcdefghijklmno" #"a"
  
  --test-- "series-find-14"
  --assert "ghijklmno" = find "abcdefghijklmno" "ghij"
  
  --test-- "series-find-15"
  --assert #"o" = first find "abcdefghijklmno" #"o"
  
  --test-- "series-find-16"
  --assert "o" = find "abcdefghijklmno" #"o"
  
  --test-- "series-find-17"
  --assert #"o" = first find "abcdefghijklmno" "o"
  
  --test-- "series-find-18"
  --assert "o" = find "abcdefghijklmno" "o"
  
  --test-- "series-find-19"
  --assert none = find "" #"a"
  
  --test-- "series-find-20"
  --assert none = find "" #"^(00)"
  
  --test-- "series-find-21"
  --assert none = find "" ""
  
  --test-- "series-find-22"
  --assert "^(00)" = find "^(00)" "^(00)"
  
  --test-- "series-find-23"
  --assert "a^(00)" = find "a^(00)" "a^(00)"
  
  --test-- "series-find-24"
  --assert "^(00)a" = find "^(00)a" "^(00)a"
  
  --test-- "series-find-25"
  --assert "^(00)" = find "^(00)" #"^(00)"
  
  --test-- "series-find-26"
  --assert #"^(00)" = first find "^(00)" #"^(00)"
  
  --test-- "series-find-27"
  --assert #"é" = first find "abcdeé" #"é" 
  
  --test-- "series-find-28"
  --assert "é" = find "abcdeé" "é" 
  
  --test-- "series-find-29"
  --assert "é" = find append "abcde" "é" "é" 
  
  --test-- "series-find-30"
  --assert 10000 = first find "abcde✐" "✐"
  
  --test-- "series-find-30a"
  --assert 10000 = first find "abcde✐" #"✐"
  
  --test-- "series-find-31"
  --assert none = find "012345" 48
  
  --test-- "series-find-32"
  --assert "^(010000)" = find "abcde^(2710)é^(010000)" "^(010000)" 
  
  --test-- "series-find-33"
  --assert "^(010000)cde^(2710)é" = find "ab^(010000)cde^(2710)é" #"^(010000)"
  
  --test-- "series-find-34"
  --assert "^(010000)cde^(2710)é" = find "ab^(010000)cde^(2710)é" "^(010000)"

	--test-- "series-find-35"  
		a: [2 3 5 test #"A" a/b 5 "tesT"]
		append a datatype!
		--assert 3 = index? find a 5
	
	--test-- "series-find-36"
		--assert 8 = index? find a "test"

	--test-- "series-find-37"
		--assert none? find a 99

	--test-- "series-find-38"
		--assert none? find/skip a 'test 2
		
	--test-- "series-find-39"
		--assert 4 = index? find/skip a 'test 3

	--test-- "series-find-40"
		--assert 7 = index? find/last a 5
		
	--test-- "series-find-41"
		--assert 2 = index? find/reverse skip a 4 3

	--test-- "series-find-42"
		--assert 8 = index? find skip a 3 "test"
		
	--test-- "series-find-43"
		--assert none? find/last/part a 3 1

	--test-- "series-find-44"
		--assert 2 = index? find/last/part a 3 2

	--test-- "series-find-45"
		--assert none? find/part a 'test 3

	--test-- "series-find-46"
		--assert 4 = index? find/part a 'test 4

	--test-- "series-find-47"
		--assert 2 = index? find a [3 5]
		
	--test-- "series-find-48"
		--assert 3 = index? find a [5 'test]
	
	--test-- "series-find-49"
		--assert none? find a 'a/b
	
	--test-- "series-find-50"
		--assert 6 = index? find/only a 'a/b

	--test-- "series-find-51"
		--assert 2 = index? find/match a 2

	--test-- "series-find-52"
		--assert none? find/match a 3

	--test-- "series-find-53"
		--assert 4 = index? find/match a [2 3 5]

	--test-- "series-find-54"
		--assert none? find/match next a [2 3 5]
		
	--test-- "series-find-55"
		--assert 4 = index? find/tail a 5

	--test-- "series-find-56"
		--assert 3 = index? find 'a/b/3/d 3
		
	--test-- "series-find-57"
		--assert 2 = index? find 'a/b/3/d 'b
		
	--test-- "series-find-58"
		s: "Hello, Red World!"
		--assert 6 = index? find s ","

	--test-- "series-find-59"
		--assert 8 = index? find s "Red"

	--test-- "series-find-60"
		--assert 8 = index? find s "red"

	--test-- "series-find-61"
		--assert 6 = index? find s #","

	--test-- "series-find-62"
		--assert 1 = index? find "^(00)" "^(00)"

	--test-- "series-find-63"
		--assert 5 = index? find/skip s #"o" 2
		
	--test-- "series-find-64"
		--assert 13 = index? find/skip s #"o" 3

	--test-- "series-find-65"
		--assert 15 = index? find/last s #"l"

	--test-- "series-find-66"
		--assert 13 = index? find/last s "o"

	--test-- "series-find-67"
		--assert none? find/part s #"o" 4

	--test-- "series-find-68"
		--assert 5 = index? find/part s #"o" 5

	--test-- "series-find-69"
		--assert 2 = index? find/match s #"h"

	--test-- "series-find-70"
		--assert 5 = index? find/match s "hell"

	--test-- "series-find-71"
		--assert 5 = index? find/match s "Hell"

	--test-- "series-find-72"
		--assert none? find/match/case s "hell"

	--test-- "series-find-73"
		--assert 5 = index? find/match/case s "Hell"

	--test-- "series-find-74"
		--assert none? find/match next s "hell"

	--test-- "series-find-75"
		--assert 8 = index? find/case s "Red"

	--test-- "series-find-76"  
		hs-fd-1: make hash! [2 3 5 test #"A" a/b 5 "tesT"]
		append hs-fd-1 datatype!
		--assert 3 = index? find hs-fd-1 5
	
	--test-- "series-find-77"
		--assert 8 = index? find hs-fd-1 "test"

	--test-- "series-find-78"
		--assert none? find hs-fd-1 99

	--test-- "series-find-79"
		--assert none? find/skip hs-fd-1 'test 2
		
	--test-- "series-find-80"
		--assert 4 = index? find/skip hs-fd-1 'test 3

	--test-- "series-find-81"
		--assert 7 = index? find/last hs-fd-1 5
		
	--test-- "series-find-82"
		--assert 2 = index? find/reverse skip hs-fd-1 4 3

	--test-- "series-find-83"
		--assert 8 = index? find skip hs-fd-1 3 "test"
		
	--test-- "series-find-84"
		--assert none? find/last/part hs-fd-1 3 1

	--test-- "series-find-85"
		--assert 2 = index? find/last/part hs-fd-1 3 2

	--test-- "series-find-86"
		--assert none? find/part hs-fd-1 'test 3

	--test-- "series-find-87"
		--assert 4 = index? find/part hs-fd-1 'test 4

	--test-- "series-find-88"
		--assert 2 = index? find hs-fd-1 [3 5]
		
	--test-- "series-find-89"
		--assert 3 = index? find hs-fd-1 [5 'test]
	
	--test-- "series-find-90"
		--assert none? find hs-fd-1 'a/b
	
	--test-- "series-find-91"
		--assert 6 = index? find/only hs-fd-1 'a/b

	--test-- "series-find-92"
		--assert 2 = index? find/match hs-fd-1 2

	--test-- "series-find-93"
		--assert none? find/match hs-fd-1 3

	--test-- "series-find-94"
		--assert 4 = index? find/match hs-fd-1 [2 3 5]

	--test-- "series-find-95"
		--assert none? find/match next hs-fd-1 [2 3 5]
		
	--test-- "series-find-96"
		--assert 4 = index? find/tail hs-fd-1 5

	--test-- "series-find-97"
		--assert 2 = index? find #{010203} #{02}
	--test-- "series-find-98"
		--assert 2 = index? find #{61626342} #"b"
	--test-- "series-find-99"
		--assert 4 = index? find/case #{61626342} #"B"
	--test-- "series-find-100"
		--assert 3 = index? find/tail #{61626342} #"b"
	--test-- "series-find-101"
		--assert 4 = index? find/reverse tail #{42626342} #{42}
		
	--test-- "series-find-102"
		--assert [3x4 1] = find [1x2 0 3x4 1] 3x4
	
	--test-- "series-find-103"
		--assert equal? make hash! [3x4 1] find make hash! [1x2 0 3x4 1] 3x4

		
===end-group===

===start-group=== "remove"

	--test-- "remove-blk-1"
		a: [1 2 3]
		--assert [2 3] = remove a
		--assert [2 3] = a

	--test-- "remove-blk-2"
		a: [1 2 3]
		--assert [3] = remove next a
		--assert [1 3] = a

	--test-- "remove-blk-3"
		--assert tail? head remove []

	--test-- "remove-blk-4"
		a: [1 2 3]
		--assert [3] = remove/part a 2
		--assert [3] = a

	--test-- "remove-blk-5"
		a: [1 2 3]
		--assert [1 2 3] = remove/part a a

	--test-- "remove-blk-6"
		a: [1 2 3]
		--assert [2 3] = remove/part a next a
		--assert [2 3] = a
	
	--test-- "remove-blk-7"
		a: [1 2 3]
		--assert [1 2 3] =  remove/part a 0

	--test-- "remove-hash-1"
		hs-remove-1: make hash! [a 2 3]
		--assert (make hash! [2 3]) = remove hs-remove-1
		--assert none? hs-remove-1/a

	--test-- "remove-hash-2"
		hs-remove-1: make hash! [a 2 3]
		remove next hs-remove-1
		--assert 3 = hs-remove-1/a

	--test-- "remove-hash-3"
		--assert tail? head remove make hash! []

	--test-- "remove-hash-4"
		hs-remove-1: make hash! [a b c 2]
		remove/part hs-remove-1 2
		--assert 2 = hs-remove-1/c

	--test-- "remove-hash-5"
		hs-remove-1: make hash! [a b c 2]
		remove/part next hs-remove-1 2
		--assert 2 = hs-remove-1/a
		--assert none? hs-remove-1/b
		--assert none? hs-remove-1/c

	--test-- "remove-str-1"
		a: "123"
		--assert "23" = remove a
		--assert "23" = a

	--test-- "remove-str-2"
		a: "123"
		--assert "3" = remove next a
		--assert "13" = a

	--test-- "remove-str-3"
		--assert tail? head remove ""

	--test-- "remove-str-4"
		a: "123"
		--assert "3" = remove/part a 2
		--assert "3" = a

	--test-- "remove-str-5"
		a: "123"
		--assert "123" = remove/part a a

	--test-- "remove-str-6"
		a: "123"
		--assert "23"= remove/part a next a
		--assert "23" = a
	
	--test-- "remove-str-7"
		a: "123"
		--assert "123" = remove/part a 0
	
	--test-- "remove-str-8"
		a: "str123"
		--assert "" = remove back tail a
		--assert "str12" = head a

	--test-- "remove-bin-1"
		b: #{00010203}
		--assert #{010203} = remove b
	--test-- "remove-bin-2"
		--assert #{0203} = remove next #{00010203}
	--test-- "remove-bin-3"
		--assert #{000203} = head remove next #{00010203}
	--test-- "remove-bin-4"
		--assert #{0003} = head remove/part next #{00010203} 2

===end-group===

===start-group=== "clear"
	
	--test-- "clear-1"
		c1-b: [1 2 3 4 5]
	--assert [] = clear c1-b
	
	--test-- "clear-2"
		c2-s: "a"
	--assert "" = clear c2-s
	
	--test-- "clear-3"
		c3-s: "é"
	--assert "" = clear c2-s
	
	--test-- "clear-4"
		c4-s: "✐"
	--assert "" = clear c4-s
	
	--test-- "clear-5"
		c5-s: "^(2710)"
	--assert "" = clear c5-s
	
	--test-- "clear-6"
		c6-b: [a [b] c]
		clear second c6-b
	--assert [a [] c] = c6-b
	
	--test-- "clear-7"
		c7-b: [a b c d e f]
		c7-b: next next next c7-b
	--assert [a b c] = head clear c7-b
	
	--test-- "clear-8"
		c8-b: "123^(2710)"
		c8-b: next next next c8-b
	--assert "123" = head clear c8-b
	
	--test-- "clear-9"
		c9-b: "^(2710)123"
		c9-b:  next c9-b
		--assert "^(2710)" = head clear c9-b

	--test-- "clear-10"
		c1-h: make hash! [a 1 b 2 c 3 d 4 5]
		clear skip c1-h 4
		--assert 2 = c1-h/b
		--assert none? c1-h/c

	--test-- "clear-11"
		--assert empty? clear #{0102}
	--test-- "clear-12"
		--assert #{01} = head clear next #{010203}
===end-group===

===start-group=== "at"
	
	--test-- "at-1 #issue 501"
		--assert "c" = at tail "abc" -1
		--assert "" = at tail "abc" 0
	
	--test-- "at-2"
		--assert "bcde" = at "abcde" 2
		--assert "abcde" = at "abcde" 1
		--assert "abcde" = at "abcde" 0
		--assert "abcde" = at "abcde" -1
		--assert "abcde" = at "abcde" -256
		--assert "e" = at "abcde" 5
		--assert "" = at "abcde" 6
		--assert "" = at "abcde" 1028
	
	--test-- "at-3"
		--assert [b c d e] = at [a b c d e] 2
		--assert [a b c d e] = at [a b c d e] 1
		--assert [a b c d e] = at [a b c d e] 0
		--assert [a b c d e] = at [a b c d e] -1
		--assert [a b c d e] = at [a b c d e] -256
		--assert [e] = at [a b c d e] 5
		--assert [] = at [a b c d e] 6
		--assert [] = at [a b c d e] 1028

	--test-- "at-4"
		hs-at-1: make hash! [a b c d e]
		--assert (next hs-at-1) = at hs-at-1 2
		--assert hs-at-1 = at hs-at-1 1
		--assert hs-at-1 = at hs-at-1 0
		--assert hs-at-1 = at hs-at-1 -1
		--assert (make hash! [e]) = at hs-at-1 5
		
	--test-- "at-5"
		--assert #{0203} = at #{010203} 2
		--assert #{} = at #{010203} 4
		--assert #{} = at #{010203} 1028
		--assert #{010203} = at #{010203} -3
		--assert #{03} = at tail #{010203} -1
	
===end-group===

===start-group=== "replace"
	
	--test-- "replace-block-1-issue-#667"
		code: [print "Hello"]
		--assert 'print = first replace code "Hello" "Cheers"
		--assert "Cheers" = second code
	--test-- "replace-str"
		--assert "Xbab" = replace "abab" #"a" #"X"
		--assert "XbXb" = replace/all "abab" #"a" #"X"
		--assert "Xab" = replace "abab" "ab" "X"
		--assert "abab" = replace/all "abab" #"a" #"a"

	--test-- "replace-bin"
		--assert #{FF0201} = replace #{010201} #{01} #{FF}
		--assert #{FF02FF} = replace/all #{010201} #{01} #{FF}
		--assert #{FF03}   = replace #{010203} #{0102} #{FF}
		--assert #{FFFFFF03} = replace #{010203} #{0102} #{FFFFFF}

===end-group===

===start-group=== "max/min"			;-- have some overlap with lesser tests

	--test-- "max1"
		--assert "abe"  = max "abc" "abe"
		--assert "abcd" = max "abc" "abcd"

	--test-- "min1"
		--assert ""		= min "" 	"abcdef"
		--assert "abc"	= min "abc" "abcd"

	--test-- "max2"					;@@ need to add tests for word!, path!
		blk1: [1 1.0 #"a" "ab" %ab/cd [] [2] (1 2)]
		blk2: [1 1.0 #"a" "ab" %ab/cd [] [2] (1 3)]
		--assert blk2 = max blk1 blk2
		blk1: next blk1
		--assert blk2 = max blk1 blk2

	--test-- "max-bin"
		--assert #{0203} = max #{0102} #{0203}
		--assert #{01020304} = max #{01020304} #{010203}

	--test-- "min-bin"
		--assert #{0102} = min #{0102} #{0203}
		--assert #{010203} = min #{01020304} #{010203}

===end-group===

===start-group=== "reverse"

	--test-- "reverse-str-1"			;-- 4 bytes code point
		--assert "dc𠃌21ba" = reverse "ab12𠃌cd"	;--  = #"^(E818)"
                                                    	;-- 𠃌 = #"^(200CC)"
	--test-- "reverse-str-2"			;-- 2 bytes code point
		--assert "dc21ba" = reverse "ab12cd"

	--test-- "reverse-str-3"			;-- 1 bytes code point
		--assert "dc21ba" = reverse "ab12cd"

	--test-- "reverse-str-4"
		--assert "1ba2𠃌cd" = reverse/part "ab12𠃌cd" 4

	--test-- "reverse-str-5"
		s: "abcdef"
		p: next next next s
		--assert "cbadef" = reverse/part s p

	--test-- "reverse-file-1"			;-- inherit from string!
		--assert %321cba = reverse/part %abc123 6

	--test-- "reverse-blk-1"
		--assert [a b c d] = reverse [d c b a]

	--test-- "reverse-blk-2"
		--assert [c b [a] d] = reverse/part [[a] b c d] 3

	--test-- "reverse-blk-3"
		blk: [1 [2] a b c ]
		p: next next next blk
		--assert [a [2] 1 b c] = reverse/part blk p

	--test-- "reverse-path-1"			;-- inherit from block!
		p1: first [ab/cd/ef]
		p2: first [ef/cd/ab]
		--assert p2 = reverse p1

	--test-- "reverse-hash-1"
		hash: make hash! [d c b a]
		--assert (make hash! [a b c d]) = reverse hash
		--assert 'c = hash/b

	--test-- "reverse-hash-2"
		hash: make hash! [[a] b c d]
		reverse/part hash 3
		--assert [a] = hash/b
		
	--test-- "reverse-bin"
		--assert #{0201} = reverse #{0102}
		--assert #{020103} = reverse/part #{010203} 2
		--assert #{010302} = head reverse next #{010203}

===end-group===

===start-group=== "take"

	--test-- "take-blk-1"
		a: [1 2 3]
		--assert 1 = take a
		--assert [2 3] = a

	--test-- "take-blk-2"
		a: [1 2 3]
		--assert 3 = take/last a
		--assert [1 2] = a

	--test-- "take-blk-3"
		a: [1 2 3]
		--assert 2 = take next a
		--assert [1 3] = a

	--test-- "take-blk-4"
		--assert none = take []

	--test-- "take-blk-5"
		a: [1 2 3]
		--assert [1 2] = take/part a 2
		--assert [3] = a

	--test-- "take-blk-6"
		a: [1 2 3]
		--assert [1] = take/part a next a
		--assert [2 3] = a

	--test-- "take-blk-7"
		a: [1 2 3]
		--assert [2 3] = take/part/last a next a
		--assert [1] = a

	--test-- "take-blk-8"
		a: [1 2 3]
		--assert [] = take/part a 0
		--assert [1 2 3] = a

	--test-- "take-blk-9"
		b: "abc"
		a: reduce [b 2 3]
		--assert b = c: take/deep a
		--assert b <> remove c

	--test-- "take-blk-5"
		a: [1 2 3]
		--assert [1 2 3] = take/part a 22
		--assert [] = a

	--test-- "take-str-1"
		a: "123"
		--assert #"1" = take a
		--assert "23" = a

	--test-- "take-str-2"
		a: "123"
		--assert #"3" = take/last a
		--assert "12" = a

	--test-- "take-str-3"
		a: "123"
		--assert #"2" = take next a
		--assert "13" = a

	--test-- "take-str-4"
		--assert none = take ""

	--test-- "take-str-5"
		a: "123"
		--assert "12" = take/part a 2
		--assert "3" = a

	--test-- "take-str-6"
		a: "123"
		--assert "23" = take/part/last a 2
		--assert "1" = a

	--test-- "take-str-7"
		a: "123"
		--assert "" = take/part a a
		--assert "123" = a

	--test-- "take-str-8"
		a: "123"
		--assert "1"= take/part a next a
		--assert "23" = a

	--test-- "take-str-9"
		a: "123"
		--assert "23" = take/part/last a next a
		--assert "1"  = a

	--test-- "take-str-10"
		a: "123"
		--assert "123" = take/part a 22
		--assert "" = a

	--test-- "take-hash-1"
		h: make hash! [1 2 3]
		--assert 1 = take h
		--assert none? select h 1
		--assert 3 = select h 2

	--test-- "take-hash-2"
		h: make hash! [1 2 3]
		--assert 3 = take/last h
		--assert none? select h 2

	--test-- "take-hash-3"
		h: make hash! [1 2 3]
		--assert 2 = take next h
		--assert 3 = select h 1

	--test-- "take-bin-1"
		b: #{0102}
		--assert 1 = take b
		--assert #{02} = b

	--test-- "take-bin-2"
		b: #{010203}
		--assert 3 = take/last b
		--assert #{0102} = b

	--test-- "take-bin-3"
		b: #{010203}
		--assert 2 = take next b
		--assert #{0103} = b

	--test-- "take-bin-4"
		--assert none = take #{}

	--test-- "take-bin-5"
		b: #{010203}
		--assert #{0102} = take/part b 2
		--assert #{03} = b

	--test-- "take-bin-6"
		b: #{010203}
		--assert #{0203} = take/part/last b 2
		--assert #{01} = b

	--test-- "take-bin-7"
		b: #{010203}
		--assert #{} = take/part b b
		--assert #{010203} = b

	--test-- "take-bin-8"
		b: #{010203}
		--assert #{01} = take/part b next b
		--assert #{0203} = b

	--test-- "take-bin-9"
		b: #{010203}
		--assert #{0203} = take/part/last b next b
		--assert #{01} = b

===end-group===

===start-group=== "swap"

	--test-- "swap-str-1"			;-- 4 bytes code point
		a: "1234"
		b: "𠃌"						;-- 𠃌 = #"^(200CC)"
		--assert "𠃌234" = swap a b
		--assert "𠃌234" = a
		--assert "1"	 = b

	--test-- "swap-str-2"			;-- 2 bytes code point
		a: "1234"
		b: "ab"					;--  = #"^(E818)"
		--assert "234" = swap a next b
		--assert "234" = a
		--assert "a1b"	 = b

	--test-- "swap-str-3"			;-- 1 bytes code point
		--assert "a234" = swap "1234" "abc"

	--test-- "swap-str-4"
		--assert "123" = swap "123" ""

	--test-- "swap-blk-1"
		a: [1 2]
		b: [a b]
		--assert [a 2] = swap a b
		--assert [a 2] = a
		--assert [1 b] = b

	--test-- "swap-blk-2"
		a: [1 2]
		b: [a b]
		--assert [a]   = swap next a b
		--assert [1 a] = a
		--assert [2 b] = b

	--test-- "swap-blk-3"
		--assert [1 a] = swap [1 a] []

	--test-- "swap-hash-1"
		a: make hash! [1 2]
		b: make hash! [a b]
		swap a b
		--assert 2 = a/a
		--assert 'b = select b 1

	--test-- "swap-bin"
		a: #{0102}
		b: #{0304}					;-- 𠃌 = #"^(200CC)"
		--assert #{0302} = swap a b
		--assert #{0302} = a
		--assert #{0104} = b
		--assert #{0104} = swap b #{}

===end-group===

===start-group=== "trim"

	str: " ^(A0) ^-a b  ^- c  ^(2000) "
	mstr: {   a ^-1^/    ab2^-  ^/  ac3  ^/  ^/^/}

	--test-- "trim-str-1"
		--assert "a b  ^- c" = trim copy str

	--test-- "trim-str-2"
		--assert "a ^-1^/ab2^/ac3^/" = trim copy mstr

	--test-- "trim-str-3"
		--assert "a ^-1^/    ab2^-  ^/  ac3  ^/  ^/^/" = trim/head copy mstr

	--test-- "trim-str-4"
		--assert "   a ^-1^/    ab2^-  ^/  ac3" = trim/tail copy mstr

	--test-- "trim-str-5"
		--assert "a ^-1^/    ab2^-  ^/  ac3" = trim/head/tail copy mstr

	--test-- "trim-str-6"
		--assert "a 1 ab2 ac3" = trim/lines copy mstr

	--test-- "trim-str-7"
		--assert "a1ab2ac3" = trim/all copy mstr

	--test-- "trim-str-8"
		--assert "    ^-1^/    2^-  ^/  c3  ^/  ^/^/" = trim/with copy mstr "ab"

	--test-- "trim-str-9"
		--assert "    ^-1^/    b2^-  ^/  c3  ^/  ^/^/" = trim/with copy mstr #"a"

	--test-- "trim-str-10"
		--assert "    ^-1^/    b2^-  ^/  c3  ^/  ^/^/" = trim/with copy mstr 97

	--test-- "trim-block-1"
		--assert [1 2] = trim [#[none] 1 #[none] 2 #[none]]

===end-group===

===start-group=== "sort"

	--test-- "sort-str-1"			;-- 4 bytes code point
		a: "g4C28c𠃌9A15Hf3iEG076eBIdbFaDh"
		--assert "0123456789AaBbCcdDEefFGghHIi𠃌" = sort a

	--test-- "sort-str-2"			;-- 2 bytes code point
		a: "g4C28c大9A15Hf3iEG076eBIdbFaDh"
		--assert "0123456789AaBbCcdDEefFGghHIi大" = sort a

	--test-- "sort-str-3"			;-- 1 bytes code point
		a: "g4C28c9A15Hf3iEG076eBIdbFaDh"
		--assert "0123456789AaBbCcdDEefFGghHIi" = sort a
		--assert "0123456789ABCDEFGHIabcdefghi" = sort/case a
		--assert "ihgfedcbaIHGFEDCBA9876543210" = sort/case/reverse a

	--test-- "sort-str-4"
		a: "4gh2ab1cd3ef"
		--assert "1cd2ab3ef4gh" = sort/skip a 3
		--assert "12abcd3ef4gh" = sort/part a 6
		--assert "34efgh" = sort/part skip a 6 tail a

	--test-- "sort-blk-1"
		a: [bc 799 ab2 42 bb1 321.3 "Mo" "Curly" "Larry" -24 0 321.8] 
		--assert ["Curly" "Larry" "Mo" -24 0 42 321.3 321.8 799 ab2 bb1 bc] = sort a
		--assert [bc bb1 ab2 799 321.8 321.3 42 0 -24 "Mo" "Larry" "Curly"] = sort/reverse a

	--test-- "sort-blk-2"
		a: ["Larry" 45 "Curly" 50 "Mo" 42]
		--assert ["Curly" 50 "Larry" 45 "Mo" 42] = sort/skip a 2
		--assert ["Curly" "Larry" 45 50 "Mo" 42] = sort/part a 4
		--assert ["Mo" 42 45 50] = sort/part skip a 2 tail a

	--test-- "sort-blk-3"
		a: ["Larry" 45 "Curly" 50 "Mo" 42]
		--assert ["Mo" 42 "Larry" 45 "Curly" 50] = sort/skip/compare a 2 2
		--assert ["Mo" 42 "Larry" 45 "Curly" 50] = sort/skip/compare a 2 func [a b][a > b]
		--assert ["Curly" 50 "Larry" 45 "Mo" 42] = sort/skip/compare/all a 2 func [a b][a/2 > b/2]

	--test-- "sort-blk-4"
		o1: context [a: 2 i: "a"]
		o2: context [a: 1 i: "b"]
		o3: context [a: 1 i: "c"]
		o4: context [a: 1 i: "d"]
		o5: context [a: 1 i: "e"]
		o6: context [a: 1 i: "f"]
		o7: context [a: 3 i: "g"]
		o8: context [a: 3 i: "h"]
		a: reduce [o1 o2 o3 o8 o4 o5 o6 o7]
		res: reduce [o2 o3 o4 o5 o6 o1 o8 o7]
		--assert res = sort/compare/stable a func [a b][a/a - b/a]
===end-group===

===start-group=== "path access"	

	--test-- "path-blk-1 : issue #939"
		pb1-b: [#"x" #"y"]
		--assert #"y" = pb1-b/(#"x")
		
	--test-- "path-blk-2"
		pb2-b: [#"x" #"y"]
		pb2-c: #"x"
		--assert #"y" = pb2-b/:pb2-c
		
	--test-- "path-str-1"
		pb1-s: "xy"
		--assert #"y" = pb1-s/(#"x")
		
	--test-- "path-str-2"
		ps2-s: "xy"
		ps2-c: #"x"
		--assert #"y" = ps2-s/:ps2-c
	
	--test-- "path-str-3"
		ps3-s: "xy"
		ps3-ss: "x"
		--assert #"y" = ps3-s/:ps3-ss
		
===end-group===

===start-group=== "set operations"	

	--test-- "set-op-blk"
		a: [1 3 2 4]
		b: [3 4 5 4 6]
		--assert [3 4 5 6]		= unique b
		--assert [1 3 2 4 5 6]	= union a b
		--assert [3 4]			= intersect a b
		--assert [1 2 5 6]		= difference a b
		--assert [1 2]			= exclude a b
		--assert [5 6]			= exclude b a

	--test-- "set-op-str"
		a: "CBAD"
		b: "EDCCF"
		--assert "EDCF"		= unique b
		--assert "CBADEF"	= union a b
		--assert "CD"		= intersect a b
		--assert "BAEF"		= difference a b
		--assert "BA"		= exclude a b
		--assert "EF"		= exclude b a

	--test-- "set-op-bitset"
		a: make bitset! [1 2 3 4]
		b: make bitset! [4 5 23]
		--assert "make bitset! #{7C0001}" = mold union a b
		--assert "make bitset! #{080000}" = mold intersect a b
		--assert "make bitset! #{740001}" = mold difference a b
		--assert "make bitset! #{700000}" = mold exclude a b
		--assert "make bitset! #{040001}" = mold exclude b a

	--test-- "series-union-1"
		su1-a: ["a" "A" "b" "B"]
		su1-b: ["b" "B" "e" "E"]
		--assert ["a" "b" "e"] = sort union su1-a su1-b
		
	--test-- "series-union-2"
		su2-a: ["a" "A" "b" "B"]
		su2-b: ["b" "B" "e" "E"]
		--assert ["a""A" "b" "B" "e" "E"] = sort union/case su2-a su2-b

	--test-- "series-union-3"
		su3-a: ["a" "A" "b" "B"]
		su3-b: ["b" "B" "e" "E"]
		su3-c: union/skip su3-a su3-b 2
		--assert ["a" "A" "b" "B" "e" "E"] = sort/skip su3-c 2
  
===end-group===

===start-group=== "change"
	--test-- "change-blk-1"
		blk: [1 2 3]
		blk1: change blk 6
		--assert [2 3] = blk1
		--assert 6 = first blk
	--test-- "change-blk-2"
		blk2: change blk1 [a b]
		--assert empty? blk2
		--assert 'a = first blk1
	--test-- "change-blk-3"
		blk3: change blk1 [9 8 7 6 5 4 3]
		--assert empty? blk3
		--assert 8 = length? blk

	--test-- "change-str-1"
		str: "abcde"
		str1: change str 30
		--assert "cde" = str1
		--assert #"3" = first str
	--test-- "change-str-2"
		str2: change str1 "123"
		--assert empty? str2
		--assert #"1" = first str1
	--test-- "change-str-3"
		str3: change str1 "abcdef"
		--assert empty? str3
		--assert 8 = length? str
	--test-- "change-str-4"
		str4: change str "^(2710)"
		--assert "0abcdef" = str4
		--assert #"^(2710)" = first str
		--assert 8 = length? str
	--test-- "change-str-5"
		str4: change str #"变"
		--assert "0abcdef" = str4
		--assert #"变" = first str
		--assert 8 = length? str
	--test-- "change-str-6"
		str: change "1234" [a b]
		--assert "34" = str
		--assert "ab34" = head str
	--test-- "change-str-7"
		str: "我ab/cd"
		--assert "-cd" = back change/part skip str 3 "-" skip str 4

	--test-- "change-bin-1"
		bin: #{12345678}
		bin1: change bin 30
		--assert #{345678} = bin1
		--assert 30 = first bin
	--test-- "change-bin-2"
		bin2: change bin1 "123"
		--assert empty? bin2
		--assert 49 = first bin1
	--test-- "change-bin-3"
		bin2: change bin1 #{ABCD}
		--assert #{33} = bin2
		--assert #{ABCD33} = bin1
	--test-- "change-bin-4"
		bin4: change bin #"^(2710)"
		--assert #{33} = bin4
		--assert #{E29C9033} = bin
	--test-- "change-bin-5"
		bin: change bin [a b]
		--assert #{9033} = bin
		--assert #{61629033} = head bin

	--test-- "change-vec-1"
		vec: make vector! [1 2 3 4]
		vec2: change vec 30
		--assert vec2 = make vector! [2 3 4]
		--assert 30 = first vec
	--test-- "change-vec-2"
		vec3: change vec2 [31 32 33]
		--assert empty? vec3
		--assert vec = make vector! [30 31 32 33]
	--test-- "change-vec-3"
		vec4: change vec3 [34 35 36 37]
		--assert empty? vec4
		--assert 8 = length? vec

	--test-- "change-hash-1"
		hs: make hash! [a b c 1 2 3]
		hs2: change hs [x y z]
		--assert 'y = select hs 'x
		--assert 3  = select hs 2
	--test-- "change-hash-2"
		change hs2 [a b c d e f]
		--assert 'y = select hs 'x
		--assert 'f  = select hs 'e
===end-group===

===start-group=== "change/only"

	--test-- "change/only-blk-1"
		blk: [1 2 3 4]
		blk1: change/only blk [a b]
		--assert [2 3 4] = blk1
		--assert [[a b] 2 3 4] = blk
	
	--test-- "change/only-str-1"
		str: "1234"
		str1: change/only str [a b]
		--assert "34" = str1
		--assert "ab34" = str

	--test-- "change/only-bin-1"
		bin: #{1234}
		bin1: change/only bin [a b]
		--assert empty? bin1
		--assert #{6162} = bin

	--test-- "change/only-vec-1"
		vec: make vector! [1.0 2.0 3.0 4.0]
		vec1: change/only vec [11.0 12.0]
		--assert vec1 = make vector! [3.0 4.0]
		--assert 11.0 = first vec
===end-group===

===start-group=== "change/dup"

	--test-- "change/dup-blk-1"
		blk: [1 2 3 4]
		blk1: change/dup blk #"o" 3
		--assert [4] = blk1
		--assert [#"o" #"o" #"o" 4] = blk
	
	--test-- "change/dup-blk-2"
		blk2: change/dup blk1 'a 0
		--assert blk2 = blk1
		blk3: change/dup blk1 'b -1
		--assert blk3 = blk1
	
	--test-- "change/dup-blk-3"
		blk3: change/dup blk [a b] 4
		--assert 8 = length? blk
		--assert 'b = last blk
		--assert empty? blk3
	
	--test-- "change/dup-str-1"
		str: "1234"
		str1: change/dup str #"x" 3
		--assert "4" = str1
		--assert "xxx4" = str

	--test-- "change/dup-str-2"
		str2: change/dup str "ab" 4
		--assert 8 = length? str
		--assert #"b" = last str
		--assert empty? str2

	--test-- "change/dup-bin-1"
		bin: #{12345678}
		bin1: change/dup bin #"x" 3
		--assert #{78} = bin1
		--assert #{78787878} = bin

	--test-- "change/dup-bin-2"
		bin2: change/dup bin #{ABCD} 4
		--assert 8 = length? bin
		--assert 205 = last bin
		--assert empty? bin2

	--test-- "change/dup-vec-1"
		vec: make vector! [1 2 3 4]
		vec1: change/dup vec 5 3
		--assert vec1 = make vector! [4]
		--assert vec = make vector! [5 5 5 4]

	--test-- "change/dup-hash-1"
		hs: make hash! [a b c 1 2 3]
		change/dup hs [x y] 2
		--assert 'y = select hs 'x
		--assert 3  = select hs 2
===end-group===

===start-group=== "change/part"

	--test-- "change/part-blk-1"
		blk: [1 2 3 4]
		blk1: change/part blk #"o" 3
		--assert [4] = blk1
		--assert [#"o" 4] = blk
	
	--test-- "change/part-blk-2"
		blk2: change/part blk [a b c] 1
		--assert [4] = blk2
		--assert [a b c 4] = blk

	--test-- "change/part-blk-3"
		val: first blk2
		blk3: change/part blk2 [z] -2
		--assert val = first blk3
		--assert [a z 4] = blk

	--test-- "change/part-blk-4"
		val: first blk
		blk3: change/part blk [x y] 0
		--assert val = first blk3
		--assert 5 = length? blk
		--assert 'x = first blk

	--test-- "change/part-str-1"
		str: "1234"
		str1: change/part str #"x" 3
		--assert "4" = str1
		--assert "x4" = str

	--test-- "change/part-str-2"
		str2: change/part str "abc" 1
		--assert "abc4" = str
		--assert "4" = str2

	--test-- "change/part-str-3"
		val: first str2
		str3: change/part str2 #"z" -2
		--assert val = first str3
		--assert "az4" = str

	--test-- "change/part-str-4"
		val: first str
		str3: change/part str [x y] 0
		--assert val = first str3
		--assert 5 = length? str
		--assert #"x" = first str

	--test-- "change/part-bin-1"
		bin: #{12345678}
		bin1: change/part bin #"x" 3
		--assert #{78} = bin1
		--assert #{7878} = bin

	--test-- "change/part-bin-2"
		bin2: change/part bin "abc" 1
		--assert #{78} = bin2 
		--assert #{61626378} = bin

	--test-- "change/part-bin-3"
		val: first bin2
		bin3: change/part bin2 #"z" -2
		--assert val = first bin3
		--assert #{617A78} = bin

	--test-- "change/part-bin-4"
		val: first bin
		bin3: change/part bin [x y] 0
		--assert val = first bin3
		--assert 5 = length? bin
		--assert 120 = first bin
	;--test-- "change/part-vec-1"

	--test-- "change/part-hash-1"
		hs: make hash! [a b c 1 2 3]
		change/part hs [x y] 4
		--assert 'y = select hs 'x
		--assert 3  = select hs 2
	--test-- "change/part-hash-2"
		change/part hs [n m o p] 1
		--assert none = select hs 'x
		--assert 'y = select hs 'p
		--assert 3  = select hs 2
===end-group===

===start-group=== "series-unicode"

	;--test-- "suc1"
	;	--assert equal? "爊倍弊褊不瀍阊吊谍樊服复漍焊蔊昊瘊㬊阍"
	;					read %tests/fixtures/chinese-characters.txt
						
	;--test-- "suc2"
	;	--assert equal? ["爊倍弊褊不瀍阊吊谍樊服复漍焊蔊昊瘊㬊阍"]
	;					read/lines %tests/fixtures/chinese-characters.txt
===end-group===


===start-group=== "block access"
	blk: [a b c [d] e]
	
	--test-- "blk-1"
		--assert blk/1 = 'a
		--assert blk/2 = 'b
		--assert blk/3 = 'c
		--assert blk/4 = [d]
		--assert blk/4/1 = 'd
	
	--test-- "blk-2"
		blk/1: 99
		--assert blk/1 = 99
		blk/2: 'z
		--assert blk/2 = 'z
		blk/4/1: -1
		--assert blk/4 = [-1]
		--assert blk = [99 z c [-1] e]

	--test-- "blk-3"
		idx: 1
		--assert blk/:idx = 99
		--assert blk/4/:idx = -1
		idx: 4
		--assert blk/:idx/1 = -1
		idx: 1
		blk/:idx: 0
		--assert blk/:idx = 0
		--assert blk/1 = 0

	--test-- "blk-4"
	idx: 'z
	--assert blk/:idx = 'c

	--test-- "blk-5"
	--assert blk/z = 'c

	--test-- "blk-6"
		blk: [4 5 6 ["o"]]
		idx: 2
		--assert blk/(1) = 4
		--assert blk/(1 + 2) = 6
		--assert blk/(idx) = 5
    	
		--test-- "blk-7"
		--assert blk/(idx + 2)/(1) = "o"
		--assert blk/(idx + 2)/(1)/(idx - 1) = #"o"

	--test-- "blk-8"
		blk/(1): 99
		idx: 2
		--assert blk/1 = 99
		blk/(idx + 2)/(1)/(idx - 1): #"z"	
		--assert blk/4/1/1 = #"z"
    	
		--test-- "blk-9"
		inc: func [a][a + 1]
		--assert blk/(inc 1) = 5

===end-group===

===start-group=== "string access"
	str: "abcde"
	
	--test-- "str-1"
		--assert str/1 = #"a"
		--assert str/2 = #"b"
		--assert str/3 = #"c"
		--assert str/4 = #"d"
	
	--test-- "str-2"
		str/1: #"9"
		--assert str/1 = #"9"
		str/2: #"z"
		--assert str/2 = #"z"
		--assert str = "9zcde"

	--test-- "str-3"
		idx: 1
		--assert str/:idx = #"9"
		idx: 4
		--assert str/:idx = #"d"
		idx: 1
		str/:idx: #"0"
		--assert str/:idx = #"0"
		--assert str/1 = #"0"

	--test-- "str-4"
		str: "456o"
		idx: 2
		--assert str/(1) = #"4"
		--assert str/(1 + 2) = #"6"
		--assert str/(idx) = #"5"

	--test-- "str-5"
		str/(1): #"9"
		--assert str/1 = #"9"
		idx: 2
		str/(idx + 2): #"z"	
		--assert str/4 = #"z"

	--test-- "str-6"
		inc: func [a][a + 1]
		--assert str/(inc 1) = #"5"
	
	--test-- "str-7 - issue #1113"
		s7-a: "abcz"
		s7-b: 5
		--assert none = s7-a/5
		--assert none = s7-a/:s7-b

===end-group===


===start-group=== "issues"

	--test-- "issue #1993"
		s: object [v: object [a: none]]
		live?: s/v/a: no
		--assert live? == false
		--assert s/v/a == false

		do [
			range: [0 0]
			a: range/2: 1
			--assert range = [0 1]
			--assert a = 1
		]

===end-group===


ser-blk: [1 #[none] #[true] #[false] #"c" "red" Red a/b 'a/b :a/b a/b: (1 + 2) [a] [[[]]] [[[a]]] [c [d [b] e] f] :w 'w w: /w :word 'word word: /word]

ser-molded: {[1 none true false #"c" "red" Red a/b 'a/b :a/b a/b: (1 + 2) [a] [[[]]] [[[a]]] [c [d [b] e] f] :w 'w w: /w :word 'word word: /word]}
ser-formed: {1 none true false c red Red a/b 'a/b :a/b a/b: 1 + 2 a  a c d b e f w w w w word word word word}

===start-group=== "Basic MOLD tests"

	--test-- "mold-1"
	--assert "[]" = mold []
	
	--test-- "mold-2"
	--assert "" = mold/only []
	
	--test-- "mold-3"
	--assert "[1 2 3]" = mold [1 2 3]

	--test-- "mold-4"
	--assert "1 2 3" = mold/only [1 2 3]

	--test-- "mold-5"
	--assert ser-molded = mold ser-blk
	
	--test-- "mold-6"
		repeat i 24 [
			--assert (copy/part ser-molded i) = mold/part ser-blk i
		]
	
	--test-- "mold-7"
	--assert "[a [b] c]" = mold [a [b] c]	
	
===end-group===

===start-group=== "Basic FORM tests"

	--test-- "form-1"
	--assert "" = form []
	
	--test-- "form-2"
	--assert "1 2 3" = form [1 2 3]

	--test-- "form-3"
	--assert ser-formed	= form ser-blk
	
	--test-- "form-4"
	repeat i 24 [
		--assert (copy/part ser-formed i) = form/part ser-blk i
	]
	
	--test-- "form-5"
	--assert " a  a " = form [[""] [a] [] [a] [[[]]]]
	
===end-group===

===start-group=== "mold strings"
	--test-- "mold-string-1"
	--assert {"abcde"} = mold {abcde}
	
	--test-- "mold-string-2"
	--assert {"^^(3A7)^^(3B1)^^(1FD6)^^(3C1)^^(3B5), ^^(3BA)^^(3CC)^^(3C3)^^(3BC)^^(3B5)"} = mold/all "Χαῖρε, κόσμε"
	
	--test-- "mold-string3 #issue 498"
	--assert {{""}} = mold mold {}
	
	--test-- "mold-string4"
	--assert {"abcde"} = mold "abcde"
	
	--test-- "mold-string5"
	--assert {"abc^^(2710)def"} = mold/all "abc✐def"
	
	--test-- "mold-string6"
	--assert {"abc^^(10000)def"} = mold/all "abc^(010000)def"
	
	--test-- "mold-string6"
		--assert {"目录1"} = mold "目录1"
		
	--test-- "mold-string7"
		--assert {"%e录1"} = mold "%e录1"
 
===end-group===

===start-group=== "logic"
	
	--test-- "mold-logic1"
	--assert "true" = mold true
	--assert "false" = mold false
	--assert "none" = mold none

===end-group===

===start-group=== "block"

	--test-- "mold-block1"
	--assert "[a b c d e]" = mold [a b c d e]
	--assert "[b c d e]" = mold next [a b c d e]
	--assert "[c d e]" = mold at [a b c d e ] 3
	--assert "[]" = mold tail [a b c d e]
	
===end-group===

===start-group=== "integer"

	--test-- "mold-integer1"
	--assert "1" = mold 1
	--assert "-1" = mold FFFFFFFFh
	--assert "2147483647" = mold 7FFFFFFFh
	--assert "-2147483648" = mold 80000000h
	--assert "0" = mold 00h
 
===end-group===

===start-group=== "file"

	--test-- "mold-file1"
		--assert "%目录1" = mold %目录1
		
	--test-- "mold-file2"
		--assert "%^^(76EE)^^(5F55)1" = mold/all %目录1

	--test-- "mold-file3"
		--assert "%a%20b" = mold %a%20b

===end-group===

===start-group=== "mold/only"
	--test-- "mold/only-1 issue #458"
	--assert "a [b] c" = mold/only [a [b] c]
	--test-- "mold/only-2"
	--assert {"a"} = mold/only "a"
	--test-- "mold/only-3"
		a: 1
		b: 2
		c: 3
	--assert {3} = mold/only (a (b) c)
	--test-- "mold/only-4"
	--assert "a" = mold/only [a]
	--test-- "mold/only-5"
	--assert "a [b] c [d [e] f] g" = mold/only [a [b] c [d [e] f] g]
===end-group===

===start-group=== "mold/all"
	--test-- "mold/all-1"
		--assert  {"^^(76EE)^^(5F55)1"} = mold/all "目录1"
===end-group===

===start-group=== "dehex"
	--test-- "dehex-1"
		--assert  "a b" = dehex "a%20b"
	--test-- "dehex-2"
		--assert  "a%2目b" = dehex "a%2目b"
	--test-- "dehex-3"
		--assert  "a^@b" = dehex "a%00b"
	--test-- "dehex-4"
		--assert  "a%~b" = dehex "a%~b"
	--test-- "dehex-5"
		--assert  "aβc" = dehex "a%ce%b2c"
	--test-- "dehex-6"
		--assert  "a乱码b" = dehex "a%e4%b9%b1%e7%a0%81b"
	--test-- "dehex-7"
		--assert  "a%ceb2b" = dehex "a%ceb2b"
===end-group===

===start-group=== "to-hex"
	--test-- "to-hex-1"
		--assert  #00000000 = to-hex 0
	--test-- "to-hex-2"
		--assert  #FFFFFFFE = to-hex -2
	--test-- "to-hex-3"
		--assert  #0F = to-hex/size 15 2
===end-group===


===start-group=== "Basic function tests"

	--test-- "fun-1"
		foo1: func [][1]
		--assert 1 = foo1
	
	--test-- "fun-2"
		foo2: func [a][a]
		--assert 5 = foo2 5
		--assert "a" = foo2 "a"
		--assert [123] = foo2 [123]
	
	--test-- "fun-3"
		foo3: func [a /local c][c: 1 a + c]
		--assert 3 = foo3 2
	
	--test-- "fun-4"
		foo4: func [a /ref][either ref [a][0]]
		--assert 0 = foo4 5
		--assert 5 = foo4/ref 5
	
	--test-- "fun-5"
		foo5: func [a /ref b][if ref [a: a + b] a * 2]
		--assert 10 = foo5 5
		--assert 16 = foo5/ref 5 3
	
	--test-- "fun-6"
		z: 10
		foo6: func [a [integer!] b [integer!] /ref d /local c][
			c: 2
			unless ref [d: 0]
			a + b * c + z + d
		]

		--assert 16 = foo6 1 2
		--assert 21 = foo6/ref 1 2 5
	
	--test-- "fun-7"
		bar:  func [] [foo7]
		foo7: func [] [42]
		--assert 42 = bar
	
	--test-- "fun-8"
		foo8: func ['a :b][
			--assert a = 'test
			--assert "(1 + 2)" = mold b
		]
		foo8 test (1 + 2)
		
	--test-- "fun-9"
		foo9: func [/local cnt][
			cnt: [0]
			cnt/1: cnt/1 + 1
		]
		--assert 1 = foo9
		--assert 2 = foo9
		--assert 3 = foo9
	
	--test-- "fun-10"
		foo10: func [a][a + 0]
		foo10: func [][1]
		--assert 1 = foo10 "dummy"						;-- make it crash if wrong function referenced
	
	--test-- "fun-11"
		non-evaluated: func ['param] [param]
		res: first [(1 + 2)]
		--assert res = quote (1 + 2)
		--assert res = non-evaluated (quote (1 + 2))
		--assert 'quote = non-evaluated quote (1 + 2)

	--test-- "fun-12"
		foo12: func [/A argA /B argB][reduce [argA argB]]
		res: foo12/A/B 5 6 
		--assert res = [5 6]

	--test-- "fun-13"
		res: foo12/B/A 7 5
		--assert res = [5 7]

	--test-- "fun-14"
		foo14: func [arg1 /A argA /B argB][reduce [arg1 argA argB]]
		res: foo14/A/B 4 7 8
		--assert res = [4 7 8]

	--test-- "fun-15"
		res: foo14/B/A 4 9 7
		--assert res = [4 7 9]

	--test-- "fun-16"
		foo16: func [arg1 /A argA /B argB /C argC][reduce [arg1 argA argB argC]]
		res: foo16/A/B/C 4 5 7 8
		--assert res = [4 5 7 8]

	--test-- "fun-17"
		res: foo16/A/C/B 4 5 9 7
		--assert res = [4 5 7 9]

	--test-- "fun-18"
		foo18: func [/A argA [string!] /B argB [integer!]][reduce [argA argB]]
		res: foo18/A/B "a" 6
		--assert res = ["a" 6]

	--test-- "fun-19"
		res: foo18/B/A 7 "b"
		--assert res = ["b" 7]

===end-group===

===start-group=== "Out of order arguments type-checking tests"
	
	--test-- "ooo-1"
		extract/into/index [1 2 3 4 5 6] 2 b: [] 2

	--test-- "ooo-2"
		ooo2: func [cmd /w /o out [block!]][]
		ooo2/o/w "cmd" o: [] 
		--assert true

	--test-- "ooo-3"
		a: func [/b c [integer!] /d e][]
		a/d/b e: {} 1
		a/d/b {} e: 1
		--assert true

	--test-- "ooo-4"
		--assert error? try [a/d/b 1 e: {}]
		--assert error? try [a/d/b e: 1 {}]

===end-group===

===start-group=== "Alternate constructor tests"
	
	--test-- "fun-alt-1"
		z: 0
		alt1: function [a][
			z: 2
			a + z
		]
		--assert 10 = alt1 8
		--assert z = 0
	
	--test-- "fun-alt-2"
		alt2: does [123]
		--assert 123 = alt2
		
	--test-- "fun-alt-3"
		alt3: has [c][c: 1 c]
		--assert 1 = alt3

===end-group===


===start-group=== "Exit and Return tests"
	
	--test-- "fun-exit-1"
		ex1: does [123 exit 0]
		--assert unset! = type? ex1
		
	--test-- "fun-exit-2"
		ex2: does [if true [exit] 0]
		--assert unset! = type? ex2
		
	--test-- "fun-exit-3"
		ex3: does [until [if true [if true [exit]] true] 0]
		--assert unset! = type? ex3
		
	--test-- "fun-ret-1"
		ret1: does [return true]
		--assert ret1
		
	--test-- "fun-ret-2"
		ret2: does [return 123]
		--assert 123 = ret2
		
	--test-- "fun-ret-3"
		ret3: does [if true [return 3]]
		--assert 3 = ret3
	
	--test-- "fun-ret-4"
		ret4: does [return 1 + 1]
		--assert 2 = ret4
		
	--test-- "fun-ret-5"
		ret5: does [return either false [12][34]]
		--assert 34 = ret5
		
	--test-- "fun-ret-6"								;-- issue #770
		ret6: func [i [integer!]][
			until [
				if true [
					if i = 0 [
						if true [return 0]
						return 1
					]
					return 2
				]
				return 3
				true
			]
		]
		--assert 0 = ret6 0
		--assert 2 = ret6 1

	--test-- "fun-ret-7"
		f: function [][
			blk: [1 2 3 4 5]
			foreach i blk [
				case [
					i > 1 [return i]
				]
			]
		]
		g: function [][if f [return 1]]
		--assert g = 1

	--test-- "fun-ret-8"
		f: function [][
		    case [
		        2 > 1 [return true]
		    ]
		]
		g: function [][if f [return 1]]
		--assert g = 1

	--test-- "fun-ret-9"
		f: function [][if true [return true]]
		g: function [][if f [return 1]]
		--assert g = 1

	--test-- "fun-ret-10"
		g: function [][if true [return 1]]
		--assert g = 1

	--test-- "fun-ret-10"
		f: function [][true]
		g: function [][if f [return 1]]
		--assert g = 1

	--test-- "fun-ret-11"
		f: function [][if true [return true]]
		g: function [][if (f) [return 1]]
		--assert g = 1

	--test-- "fun-ret-12"
		f: function [][if true [return true] ]
		g: function [][if not not f [return 1]]
		--assert g = 1

	--test-- "fun-ret-13"
		f: function [][if true [return 'X]]
		g: function [][if f [return 1]]
		--assert g = 1

	--test-- "fun-ret-14"								;-- issue #778
	 	--assert 1 = do load "f: func [][return 1] t: f"
		
	--test-- "fun-ret-15"								;-- issue #1169
		f: does [parse "1" [(return 123)]]
		--assert f = 123

	--test-- "fun-ret-16"
		f: does [do [return 124]]
		--assert f = 124

===end-group===

===start-group=== "Reflection"
	clean-strings: func [blk [block!]][
		blk: copy blk
		forall blk [if string? blk/1 [remove blk blk: back blk]]
		blk
	]
	
	--test-- "fun-ref-1"
		ref1: func [a b][a + b]
		--assert [a b] = spec-of :ref1
		body: body-of :ref1
		--assert any [
			[a + b] = body
			none? body									;-- if option store-bodies = no
		]
	 
	--test-- "fun-ref-2"
		blk: clean-strings spec-of :append	
		--assert blk = [
			series [series! bitset! map!] value [any-type!] /part length [number! series!]
			/only /dup count [number!] return: [series! bitset! map!]
		]
	
	--test-- "fun-ref-3"
		blk: clean-strings spec-of :set	
		--assert blk = [word [any-word! block! object! path! map!] value [any-type!] /any /case /only /some return: [any-type!]]
		
	--test-- "fun-ref-4"
		blk: clean-strings spec-of :<
		--assert blk = [value1 [any-type!] value2 [any-type!]]

===end-group===

===start-group=== "Capturing of iterators counter word(s)"

	--test-- "fun-capt-1"
		f1: function [] [repeat ii 5 [ii]]
		--assert none <> find spec-of :f1 'ii
		f1
		--assert unset? get/any 'ii
	
	--test-- "fun-capt-2"
		f2: function [] [foreach ii [1 2 3] [ii]]
		--assert none <> find spec-of :f2 'ii
		f2
		--assert unset? get/any 'ii

	--test-- "fun-capt-3"
		f3: function [] [foreach [ii jj] [1 2 3 4] [ii jj]]
		--assert none <> find spec-of :f3 'ii
		--assert none <> find spec-of :f3 'jj
		f3
		--assert unset? get/any 'ii
		--assert unset? get/any 'jj

===end-group===

===start-group=== "Reported issues"
  	--test-- "ri1 issue #415"
		ri415-f: func [] [
    		ri415-g: func [] [1]
			ri415-g
		]
		--assert 1 = ri415-f
  
  	--test-- "ri2 issue #461"
  		ri2-fn: func ['word] [:word]
		--assert op? ri2-fn :+
  	
  	--test-- "ri3 issue #461"
  		ri3-fn: func ['word] [mold :word]
		--assert "'+" = ri3-fn '+
  	
  	--test-- "ri4 issue #461"
  		ri4-fn: func ['word] [mold :word]
 		--assert "+" = ri4-fn +
comment {  	
  	--test-- "ri5 issue #420"
  		ri5-fn: function [][
  			g: func [] [true]
  			g
  		]
  		--assert ri5-fn
}
 comment {   	
  	--test-- "ri6 issue #420"
  		ri6-fn: func [
  			/local
  				g
  		][
  			g: func [] [true]
  			g
  		]
  	--assert ri6-fn
}
  	
  	--test-- "ri7 issue #420"
  		ri7-g: func [][true]
  		ri7-f: func [][ri7-g]
		--assert ri7-f
  	
  	--test-- "ri8 issue #443"
  		ri8-fn: func[
  			/local
  				ri8-b
  				ri8-i
  				ri8-j
  		][
  			ri8-b: copy []
  			foreach [ri8-i ri8-j] [1 2 3 4] [append ri8-b ri8-i * ri8-j]
  			ri8-b
  		]
  		ri8-i: 100
  		ri8-j: 200
  	--assert [2 12] = ri8-fn
  	--assert 100 = ri8-i
  	--assert 200 = ri8-j
  	
  	--test-- "ri9 issue #443"
  		ri9-fn: function[][
  			ri9-b: copy []
  			foreach [ri9-i ri9-j] [1 2 3 4] [append ri9-b ri9-i * ri9-j]
  			ri9-b
  		]
  	--assert [2 12] = ri9-fn
  	--assert error? try [get 'ri9-i]
  	--assert error? try [get 'ri9-j]

===end-group===


===start-group=== "Infix operators creation"
	--test-- "infix-1"
		infix: function [a b][a * 10 + b]
		***: make op! :infix
		--assert 7 *** 3 = 73

;; Test commented as routine declaration cannot be handled in a code block anymore...
;;
;	unless system/state/interpreted? [			;-- routine creation not supported by interpreter
;		infix2: routine [a [integer!] b [integer!]][integer/box a * 20 + b]
;
;		--test-- "infix-2"
;			*+*: make op! :infix2
;			--assert 5 *+* 6 = 106
;
;		--test-- "infix-3"
;			--assert 5 *+* 6 *** 7 = 1067
;	]

===end-group===

===start-group=== "Scope of Variables"

	--test-- "scope1 issue #825"
		s1-text: "abcde"
		s1-f: function [/extern s1-text] [
			s1-text
		]
		--assert s1-f = "abcde"
		
	--test-- "scope2 issue #825"
		s2-f: function [/extern s2-text] [
			s2-text
		]
		s2-text: "abcde"
		--assert s2-f = "abcde"
		
	--test-- "scope3 issue #825"
		s3-text: "abcde"
		s3-f: func [/local s3-text] [
			s3-text: "12345"	
		]

	--test-- "scope4 issue #825"
		s4-text: "abcde"
		s4-f: function [extern s4-text] [
			if extern [s4-text: "12345"]
			s4-text
		]
		--assert "12345" = s4-f true "00000"
		
	--test-- "scope5 issue #825"
		s5-text: "abcde"
		s5-f: func[/extern s5-text] [
			either extern [
				s5-text	
			][
				"00000"
			]
		]
		--assert "12345" = s5-f/extern "12345"
		
	--test-- "scope6 issue #825"
		s6-text: "abcde"
		s6-f: func [local s6-text] [
			s6-text
		]
		--assert "12345" = s6-f "filler" "12345"
		
	--test-- "scope7 issue #825"
		s7-text: "abcde"
		s7-f: function [local s7-text] [
			s7-text
		]
		--assert "12345" = s7-f "filler" "12345"

	--test-- "scope 8"
		s8-f: function [/extern a][]
		--assert empty? spec-of :s8-f

	--test-- "scope 9"
		s9-f: function [/extern a /local b][]
		--assert [/local b] = spec-of :s9-f

	--test-- "scope 10"
		s10-f: function [/local b /extern a][]
		--assert [/local b] = spec-of :s10-f

	--test-- "scope 11"
		s11-f: function [/extern a /local b][c: 0]
		--assert [/local b c] = spec-of :s11-f

	--test-- "scope 12"
		s12-f: function [/local b /extern a][d: 1]
		--assert [/local b d] = spec-of :s12-f

	--test-- "scope 13"
		s13-f: function [/local b][]
		--assert [/local b] = spec-of :s13-f

	--test-- "scope 14"
		s14-f: function [/local b][e: 2]
		--assert [/local b e] = spec-of :s14-f

===end-group===

===start-group=== "functionfunction"
comment { issue #420
	--test-- "funfun1"
        ff1-i: 1
        ff1-f: function [][ff1-i: 2 f: func[][ff1-i] f]
        --assert 2 = ff1-f
 }                                              
                                                
    --test-- "funfun2"
        ff2-i: 1
        ff2-f: function [][ff2-i: 2 ff2-i]
        ff2-r: ff2-f
        --assert 1 = ff2-i
        --assert 2 = ff2-r
        
    --test-- "funfun3"
        ff3-i: 1
        ff3-f: function [][
            ff3-i: 2
            o: make object! [
                ff3-i: 3
            ]
            o/ff3-i
        ]
        --assert 3 = ff3-f
        
    --test-- "funfun4"
        ff4-i: 1
        ff4-f: function [][
            ff4-i: 2
            o: make object! [
                ff4-i: 3
            ]
            ff4-i
        ]
        --assert 2 = ff4-f
            
    --test-- "funfun5 #964"
        ff5-f: function [] [
            either true [
                ff5-x
             ][
                ff5-x: 0
            ]
        ]
        --assert none = ff5-f
                             
    --test-- "funfun6 #964"
        ff6-f: function [] [
            either false [
                ff6-x
             ][
                ff6-x: 0
            ]
        ]
        --assert 0 = ff6-f
        
    --test-- "funfun7"
        ff7-f: function [] [
            a: 1
            b: make object! [c: 2]
            c
        ]   
        --assert none = ff7-f 
        
     --test-- "funfun8"
        ff8-i: 1
        ff8-f: function [] [
            a: 1
            b: make object! [ff8-i: 2]
            ff8-i
        ]   
        --assert none = ff8-f 
        
if system/state/interpreted? [                          ;-- not yet supported by compiler 
    do [
    	--test-- "funfun9"
        ff9-f: function [] [
            a: 1
            b: function [] [c: 2]
            b
            c
        ]   
        --assert none = ff9-f 
    ]
]

if system/state/interpreted? [                          ;-- not yet supported by compiler         
	do [
     --test-- "funfun10"
        ff10-i: 1
        ff10-f: function [] [
            a: 
            b: function [] [ff10-i: 2]
            b
            ff10-i
        ]   
        --assert none = ff10-f 
    ]
]

if system/state/interpreted? [                          ;-- not yet supported by compiler         
    do [
    --test-- "funfun11"
        ff11-i: 1
        ff11-f: function [] [
            ff: func [/local ff11-i][ff11-i: 2]
            ff11-i
        ]
        --assert none = ff11-f
        --assert 1 = ff11-i
    ]
]        
comment { 
    --test-- "funfun12"
        ff12-i: 1
        ff12-f: function [] [
            ff: make object! [ff12-i: 2]
            ff12-i
        ]
        --assert none = ff12-f
        --assert 1 = ff12-i
       
    --test-- "funfun13"
        ff13-i: 1
        ff13-f: function [/extern ff13-i] [
            ff: func [/local ff13-i][ff13-i: 2]
            ff13-i: 3
        ]
        --assert 3 = ff13-f
        --assert 3 = ff13-i
      
    --test-- "funfun14"
        ff14-i: 1
        ff14-f: function [/extern ff14-i] [
            ff: make object! [ff14-i: 2]
            ff14-i: 3
        ]
        --assert 3 = ff14-f
        --assert 3 = ff14-i
       
    --test-- "funfun15"
        ff15-i: 1
        ff15-f: func [
            /local ff15-i
        ][
            ff15-i: 2
            ff: function [
                /extern ff15-i
            ][
                ff15-i
            ]
            ff
        ]
        --assert 2 = ff15-f
        --assert 1 = ff15-i     
}
                                                    
if system/state/interpreted? [                      ;-- not yet supported by compiler
	do [
    --test-- "funfun16"
        ff16-f: function [] [
            f2: func [i] [i: 1]
            f2 i
            i
        ]
        --assert none = ff16-f
    ]
]       

if system/state/interpreted? [                      ;-- not yet supported by compiler
	do [
    --test-- "funfun17"
        ff17-i: 10
        ff17-f: function [] [
            f2: func [ff17-i] [ff17-i: 1]
            f2 ff17-i
            ff17-i
        ]
        --assert none = ff17-f
    ]
]
                                        
===end-group===

===start-group=== "functions with objects"
--test-- "fwo1 - #965"
        fwo1-f: func [
            o object!
        ][
          append o/a o/b  
        ]
        fwo1-o: make object! [ 
            a: "hello"
            b: " world"
        ]
        --assert "hello world" = fwo1-f fwo1-o

===end-group===

===start-group=== "function with lit-arg"
    fwla-f: func ['x][:x]
        
    --test-- "fwla1"
        --assert 10 = fwla-f 10
    
    --test-- "fwla2"
        --assert 50 = fwla-f (20 + 30)
        
    --test-- "fwla3"
        fwla3-i: 40
        --assert 40 = fwla-f :fwla3-i 
        
    --test-- "fwla4"
        fwla4-o: make object! [i: 50]
        --assert 50 = fwla-f :fwla4-o/i

    --test-- "fwla5"
        --assert (first ['fwla4-o/i]) = fwla-f 'fwla4-o/i

    --test-- "fwla6"
        --assert (first [fwla4-o/i:]) = fwla-f fwla4-o/i:

    --test-- "fwla7"
        --assert (first [fwla4-o/i]) = fwla-f fwla4-o/i
===end-group===

===start-group=== "function with get-arg"
        fwga-f: func [:x][:x]
        
    --test-- "fwga1"
        --assert 10 = fwga-f 10
    
    --test-- "fwga2"
        --assert (first [(20 + 30)]) = fwga-f (20 + 30)
        
    --test-- "fwga3"
        fwga3-i: 40
        --assert (first [:fwga3-i]) = fwga-f :fwga3-i 
        
    --test-- "fwga4"
        fwga4-o: make object! [i: 50]
        --assert (first [:fwga4-o/i]) = fwga-f :fwga4-o/i
        
    --test-- "fwga5"
        fwga5-i: 10
        fwga5-f: func[:x][set x 1 + get x]
        --assert 11 = fwga5-f fwga5-i
        --assert 11 = fwga5-i

    --test-- "fwga6"
        --assert (first [fwga4-o/i]) = fwga-f fwga4-o/i

    --test-- "fwga7"
        --assert (first ['fwga4-o/i]) = fwga-f 'fwga4-o/i

    --test-- "fwga8"
        --assert (first [fwga4-o/i:]) = fwga-f fwga4-o/i:
===end-group===


===start-group=== "basic repeat tests"

  --test-- "br1"                      ;; Documenting non-local index counter
    br1-i: 0
    repeat br1-i 100 [ ]
  --assert 100 = br1-i                
  
  --test-- "br2"                      ;; Documenting non-local index counter
    br2-i: -99
    repeat br2-i 100 [ ]
  --assert 100 = br2-i 
  
  --test-- "br3"                      ;; Documenting non-local index counter
    repeat br3-i 100 [ ]
  --assert 100 = br3-i
  
  --test-- "br4"
    br4-i: 0
    repeat br4-counter 0 [br4-i: br4-i + 1]
  --assert 0 = br4-i

  --test-- "br5"
    br5-i: 0
    repeat br5-counter 0 [br5-i: br5-i + 1]
  --assert 0 = br5-i
  
===end-group===

===start-group=== "basic until tests"

  --test-- "bu1"
    bu1-i: 0
    until [
      bu1-i: bu1-i + 1
      bu1-i > 10
    ]
  --assert bu1-i = 11 
  
===end-group=== 

===start-group=== "basic loop tests"

  --test-- "bl1"                      ;; Documenting non-local index counter
    i: 10
    loop i [i: i - 1]
  --assert i = 0
  
  --test-- "bl2"                      ;; Documenting non-local index counter
    i: -1
    loop i [i: i + 1]
  --assert i = -1
  
  --test-- "bl3"                      ;; Documenting non-local index counter
    i: 0
    loop i [i: i + 1]
  --assert i = 0
  
  --test-- "b14"
    j: 0
    loop 0 [j: j + 1]
  --assert j = 0
  
  --test-- "b15"
    j: 0
    loop -1 [j: j + 1]
  --assert j = 0
  
===end-group===

===start-group=== "mixed tests"
        
    --test-- "ml1"                      ;; Documenting non-local index counter
    a: 0
    repeat c 4 [
		loop 5 [a: a + 1]
	]
    --assert a = 20 

===end-group===

===start-group=== "exceptions"

	--test-- "ex1"
	i: 0
	loop 3 [i: i + 1 break i: i - 1]
	--assert i = 1
	
	--test-- "ex2"
	i: 0
	loop 3 [i: i + 1 continue i: i - 1]
	--assert i = 3
	
	--test-- "ex3"
	i: 4
	until [
		i: i - 1
		either i > 2 [continue][break]
		zero? i
	]
	--assert i = 2
	
	--test-- "ex4"
	list: [a b c]
	while [not tail? list][list: next list break]
	--assert list = [b c]
	
	--test-- "ex5"
	c: none
	repeat c 3 [either c = 1 [continue][break]]
	--assert c = 2
	
	--test-- "ex6"
	w: result: none
	foreach w [a b c][result: w either w = 'a [continue][break]]
	--assert result = 'b
	
	--test-- "ex7"
	i: 0
	loop 3 [i: i + 1 parse "1" [(break)] i: i - 1]
	--assert i = 1
	
	--test-- "ex8"
	foo-ex2: does [parse "1" [(return 124)]]
	--assert foo-ex2 = 124

===end-group===

===start-group=== "foreach"

	--test-- "foreach-1"
		fe1-b: compose [
			11 #"v" 22 #"t" 33 #"z" "string" (func[] [1])
			(make object! [i: 1])
		]
		fe1-count: 0
		foreach fe1-val fe1-b [
			fe1-count: fe1-count + 1
		]
		--assert 9 = fe1-count
		--assert 11 = first fe1-b
		--assert 9 = length? fe1-b

===end-group===

===start-group=== "forall"

	--test-- "forall-1"
		fa1-b: compose [
			11 #"v" 22 #"t" 33 #"z" "string" (func[] [1])
			(make object! [i: 1])
		]
		fa1-count: 0
		forall fa1-b [
			--assert (9 - fa1-count) = length? fa1-b
			fa1-count: fa1-count + 1
		]
		--assert 9 = fa1-count
		--assert 9 = length? fa1-b
		--assert 11 = first fa1-b

===end-group===

===start-group=== "specific issues"

  --test-- "issue #427-1"
    issue427-acc: 0
    issue427-f: func [
      /local count
    ][
      count: #"a"
      repeat count 5 [
        issue427-acc: issue427-acc + count
      ]
      count
    ]
  --assert 5  = issue427-f
  --assert 15 = issue427-acc
  
  --test-- "issue #427-2"
    issue427-acc: 0
    issue427-f: func [
      /local count
    ][
      repeat count 5 [
        issue427-acc: issue427-acc + count
      ]
    ]
    issue427-f
  --assert 15 = issue427-acc
  
===end-group===
    

===start-group=== "unevaluated literals"
	--test-- "type?ul-1"			--assert integer! = type? first [1]
	--test-- "type?ul-2"			--assert char! = type? first [#"a"]
	--test-- "type?ul-3"			--assert block! = type? first [[]]
	--test-- "type?ul-4"			--assert get-word! = type? first [:b]
	--test-- "type?ul-5"			--assert logic! = type? first [#[true]]
	--test-- "type?ul-6"			--assert issue! = type? first [#1]
	--test-- "type?ul-7"			--assert none! = type? first [#[none]]
	--test-- "type?ul-8"			--assert paren! = type? first [(1)]
	--test-- "type?ul-9"			--assert set-word! = type? first [b:]
	--test-- "type?ul-10"			--assert string! = type? first ["1234566789"]
	--test-- "type?ul-11"			--assert unset! = type? ()
	--test-- "type?ul-12"			--assert word! = type? first [a]
	--test-- "type?ul-13"			--assert lit-word! = type? first ['a]
===end-group===

===start-group=== "word value"
	--test-- "type?wv-1"
		value: 1
		--assert integer! = type? value
	--test-- "type?wv-2"
		value: #"a"
		--assert char! = type? value
	--test-- "type?wv-3"
		value: [a b c d]
		--assert block! = type? value
	--test-- "type?wv-4"
		value: true
		--assert logic! = type? value
	--test-- "type?wv-5"
		value: #123456789
		--assert issue! = type? value
	--test-- "type?wv-6"
		value: none
		--assert none! = type? value
	--test-- "type?wv-7"
		value: first [("a b c d")]
		--assert paren! = type? value
	--test-- "type?wv-8"
		value: first [a:]
		--assert set-word! = type? value
	--test-- "type?wv-9"
		value: "Hello Nenad"
		--assert string! = type? value
	--test-- "type?wv-10"
		set/any 'value ()
		--assert unset! = type? get/any 'value
	--test-- "type?wv-11"
		value: 'a
		--assert word! = type? value
	--test-- "type?wv-12"
		value: first ['a]
		--assert lit-word! = type? value
===end-group===

===start-group=== "get word value"
	--test-- "type?gwv-1"
		value: 1
		--assert integer! = type? :value
	--test-- "type?gwv-2"
		value: #"a"
		--assert char! = type? :value
	--test-- "type?gwv-3"
		value: [a b c d]
		--assert block! = type? :value
	--test-- "type?gwv-4"
		value: first [:g]
		--assert get-word! = type? :value
	--test-- "type?gwv-5"
		value: true
		--assert logic! = type? :value
	--test-- "type?gwv-6"
		value: #123456789
		--assert issue! = type? :value
	--test-- "type?gwv-7"
		value: none
		--assert none! = type? :value
	--test-- "type?gwv-8"
		value: first [("abcd")]
		--assert paren! = type? :value
	--test-- "type?gwv-9"
		value: first [a: ]
		--assert set-word! = type? :value
	--test-- "type?gwv-10"
		value: "Hello Nenad"
		--assert string! = type? :value
	--test-- "type?gwv-11"
	  set/any 'value ()
		--assert unset! = type? :value
	--test-- "type?gwv-12"
		value: 'a
		--assert word! = type? :value
	--test-- "type?gwv-13"
		value: first ['a]
		--assert lit-word! = type? :value
===end-group===

===start-group=== "scalar?"
	--test-- "scalar? char!"
	--assert scalar? #"A"
	--test-- "not scalar? string!"
	--assert not scalar? ""
===end-group===

===start-group=== "immediate?"
    --test-- "immediate? none!" 		    --assert immediate? none
    --test-- "not immediate? map!"			--assert not immediate? #()
===end-group===


===start-group=== "find"
	--test-- "find-1"
		--assert [1 2 3 4] = find [1 2 3 4] 1
	--test-- "find-2"
		--assert [2 3 4] = find [1 2 3 4] 2
	--test-- "find-3"
		--assert [4] = find [1 2 3 4] 4
	--test-- "find-4"
		--assert none = find [1 2 3 4] 0
	--test-- "find-5"
		--assert none = find [1 2 3 4] 5
	--test-- "find-6"
		--assert none = find [1 2 3 4] "1"
	--test-- "find-7" 
		--assert "12345" = find "12345" #"1"
	--test-- "find-8" 							
		--assert none = find "12345" 1
	--test-- "find-9" 
		--assert "12345" = find "12345" "1"
	--test-- "find-10" 
		--assert "12345" = find "12345" "12"
	--test-- "find-11" 
		--assert "2345" = find "12345" #"2"
	--test-- "find-12" 
		--assert "5" = find "12345" #"5"
	--test-- "find-13" 
		--assert none = find "12345" #"0" 
	--test-- "find-14" 
		--assert none = find "12345" #"6"
	--test-- "find-15"
		--assert [2 3] = find [1 2 3] [2 3]
	--test-- "find-16"
		--assert none = find [1 2 3] [3 2]
	--test-- "find-17"
		--assert [2 3] = find [1 2 2 3] [2 3]
	--test-- "find-18"
		--assert none = find [1 2] [2 3]
	--test-- "find-19"
		--assert "é" = find "abcdeé" "é"
	--test-- "find-20"
		--assert "eé" = find "abcdeé" "eé"
	--test-- "find-21"
		--assert none = find "abcdeé" "ée"
	--test-- "find-22"
		--assert "✐" = find "abcde✐" "✐"            ;; code point 10000 (decimal)
	--test-- "find-23"
		--assert none = find "abcde✐" "ed✐"
	--test-- "find-24"
		--assert "^(010000)" = find "abcde^(010000)" "^(010000)" 
	--test-- "find-25"
		--assert none = find tail "123345" 1
	--test-- "find-26 -issue #765"
		--assert none = find tail [a b c d e] 'a	
		
===end-group===

===start-group=== "find/part"
	--test-- "find/part-1"
		--assert none = find/part "1234" "1" 0
	--test-- "find/part-2"
		--assert "1234" = find/part "1234" "1" 1
	--test-- "find/part-3"
		--assert "234" = find/part "1234" "2" 2
	--test-- "find/part-4"
		--assert "234" = find/part "1234" "2" 4
	--test-- "find/part-5"
		--assert "234" = find/part "1234" "2" 5
	--test-- "find/part-6"
		--assert none = find/part "1234" "3" 2
	--test-- "find/part-7"
		--assert none = find/part [1 2 3 4] 1 0
	--test-- "find/part-8"
		--assert [1 2 3 4] = find/part [1 2 3 4] 1 1
	--test-- "find/part-9"
		--assert [2 3 4] = find/part [1 2 3 4] 2 2
	--test-- "find/part-10"
		--assert [2 3 4] = find/part [1 2 3 4] [2 3] 4
	--test-- "find/part-11"
		--assert none = find/part [1 2 3 4] [2 3] 2
	--test-- "find/part-12"
		--assert none = find/part [1 2 3 4] 3 2
	--test-- "find/part-13"
		--assert none = find/part "Χαῖρε, κόσμε!" "Χαῖ" 2
===end-group===

===start-group=== "find/only"
	--test-- "find/only-1"
		--assert [[2 3] 4] = find/only [1 [2 3] 4] [2 3]
	--test-- "find/only-2"
		--assert none = find/only [1 2 3 4] [2 3]
===end-group===

===start-group=== "find/case"
	--test-- "find/case-1"
		--assert "abcde" = find/case "Aabcde" "a"
	--test-- "find/case-2"
		--assert "Abcde" = find/case "aAbcde" "A"
	--test-- "find/case-3"
		--assert none = find/case "è" "E"
===end-group===

===start-group=== "find/same"
	--test-- "find/same-1"
		--assert "Abcde" = find/same "aAbcde" "A"
	--test-- "find/same-2"
		obj1: context [a: 1 b: 2]
		obj2: context [a: 1 b: 2]
		blk: reduce [1 obj1 2 obj2 3]
		res: skip blk 3
		--assert res = find/same blk obj2
	--test-- "find/same-3"
		hs: make hash! blk
		res: skip hs 3
		--assert res = find/same hs obj2
===end-group===

===start-group=== "find/any"      ; not yet implemented
	--test-- "find/any-1"
		;--assert "12345" = find/any "12345" "*"
	--test-- "find/any-2"
		;--assert "12345" = find/any "12345" "?"
	--test-- "find/any-3"
		;--assert "2345" = find/any "12345" "2?4"
	--test-- "find/any-4"
		;--assert "2345" = find/any "12345" "2*"
	--test-- "find/any-5"
		;--assert "e✐" = find/any "abcde✐" "e?"        ;; code point 10000 (decimal)
	--test-- "find/any-6"
		;--assert "e✐f" = find/any "abcde✐f" "?f" 
	--test-- "find/any-7"
		;--assert "e✐" = find/any "abcde✐" "e*" 
	--test-- "find/any-8"
		;--assert "abcde✐f" = find/any "abcde✐f" "*f" 
	--test-- "find/any-9"
		;--assert "e^(010000)" = find/any "abcde^(010000)" "e?"        
	--test-- "find/any-10"
		;--assert "e^(010000)f" = find/any "abcde^(010000)f" "?f" 
	--test-- "find/any-11"
		;--assert "e^(010000)" = find/any "abcde^(010000)" "e*" 
	--test-- "find/any-12"
		;--assert "abcde^(010000)f" = find/any "abcde^(010000)f" "*f" 
===end-group===

===start-group=== "find/with"      ; not yet implemented
	--test-- "find/with-1"
		;--assert "12345" = find/with "12345" "^(FFFF)" "^(FFFE)^(FFFF)" 
	--test-- "find/with-2"
		;--assert "12345" = find/with "12345" "^(FFFE)" "^(FFFE)^(FFFF)" 
	--test-- "find/with-3"
		;--assert "2345" = find/with "12345" "2^(FFFE)3" "^(FFFE)^(FFFF)"
	--test-- "find/with-4"
		;--assert "2345" = find/with "12345" "2^(FFFF)" "^(FFFE)^(FFFF)"
	--test-- "find/with-5"
		;--assert "e✐" = find/with "abcde✐" "e^(FFFE)" "^(FFFE)^(FFFF)"
	--test-- "find/with-6"
		;--assert "e✐f" = find/with "abcde✐f" "^(FFFE)f" "^(FFFE)^(FFFF)"
	--test-- "find/with-7"
		;--assert "e✐" = find/with "abcde✐" "e^(FFFF)" "^(FFFE)^(FFFF)"
	--test-- "find/with-8"
		;--assert "abcde✐f" = find/with "abcde✐f" "^(FFFF)f" "^(FFFE)^(FFFF)" 
	--test-- "find/with-9"
		;--assert "e^(010000)" = find/with "abcde^(010000)" "e^(FFFE)" "^(FFFE)^(FFFF)"        
	--test-- "find/with-10"
		;--assert "e^(010000)f" = find/with "abcde^(010000)f" "^(FFFE)f" "^(FFFE)^(FFFF)"
	--test-- "find/with-11"
		;--assert "e^(010000)" = find/with "abcde^(010000)" "e^(FFFF)" "^(FFFE)^(FFFF)"
	--test-- "find/with-12"
		;--assert "abcde^(010000)f" = find/with "abcde^(010000)f" "^(FFFF)f" "^(FFFE)^(FFFF)"
===end-group===

===start-group=== "find/skip"
	--test-- "find/skip-1"
		--assert [6 7 8 9 0] = find/skip [1 2 3 4 5 1 6 6 6 6 1 2 3 4 5 6 7 8 9 0] 6 5
	--test-- "find/skip-2"
		--assert none = find/skip [1 2 3 4 5 1 6 6 6 6 1 2 3 4 5 1 2 3 4 5] 6 5
	--test-- "find/skip-3"
		--assert [6 7 8 9 0] = find/skip [1 2 3 4 5 6 6 6 6 6 1 2 3 4 5 6 7 8 9 0] [6 7] 5
	--test-- "find/skip-4"
		--assert none = find/skip [1 2 3 4 5 1 6 6 6 6 1 2 3 4 5 1 2 3 4 5] [6 7] 5
	--test-- "find/skip-5"
		--assert "67890" = find/skip "12345166661234567890" "6" 5
	--test-- "find/skip-6"
		--assert none = find/skip "12345166661234557890" "6" 5
===end-group===

===start-group=== "find/match"
	--test-- "find/match-1"
		--assert [and now] = find/match [here and now] 'here
	--test-- "find/match-2"
		--assert none = find/match [here and now] 'her
	--test-- "find/match-3"
		--assert none = find/match [her and now] 'here
	--test-- "find/match-4"
		--assert " and now" = find/match "here and now" "here"
	--test-- "find/match-5"
		--assert "andnow" = find/match "hereandnow" "here"
	--test-- "find/match-6"
		--assert none = find/match "her and now" "here"
	--test-- "find/match-7"
		--assert " and now" = find/match "here✐ and now" "here✐"
	--test-- "find/match-8"
		--assert "✐andnow" = find/match "here✐andnow" "here"
	--test-- "find/match-9"
		--assert none = find/match "her and now" "he✐r"
	--test-- "find/match-10"
		--assert none = find/match "here and now" "✐here"
	--test-- "find/match-11"
		--assert "^(010000)andnow" = find/match "here^(010000)andnow" "here"
	--test-- "find/match-12"
		--assert none = find/match "her and now" "here^(010000)"
	--test-- "find/match-13"
		--assert " and now" = find/match "here^(010000) and now" "here^(010000)"
	--test-- "find/match-14"
		--assert "andnow" = find/match "^(010000)hereandnow" "^(010000)here"
	--test-- "find/match-15"
		--assert none = find/match "her^(010000) and now" "here^(010000)"
	--test-- "find/match-16"
		--assert [and now] = find/match [he✐re and now] 'he✐re
===end-group===

===start-group=== "find/tail"
	--test-- "find/tail-1"
		--assert [and now] = find/tail [here and now] 'here
	--test-- "find/tail-2"
		--assert none = find/tail [here and now] 'her
	--test-- "find/tail-3"
		--assert none = find/tail [her and now] 'here
	--test-- "find/tail-4"
		--assert " and now" = find/tail "here and now" "here"
	--test-- "find/tail-5"
		--assert "andnow" = find/tail "hereandnow" "here"
	--test-- "find/tail-6"
		--assert none = find/tail "her and now" "here"
	--test-- "find/tail-7"
		--assert " and now" = find/tail "here✐ and now" "here✐"
	--test-- "find/tail-8"
		--assert "✐andnow" = find/tail "here✐andnow" "here"
	--test-- "find/tail-9"
		--assert none = find/tail "her and now" "he✐r"
	--test-- "find/tail-10"
		--assert none = find/tail "here and now" "✐here"
	--test-- "find/tail-11"
		--assert "^(010000)andnow" = find/tail "here^(010000)andnow" "here"
	--test-- "find/tail-12"
		--assert none = find/tail "her and now" "here^(010000)"
	--test-- "find/tail-13"
		--assert " and now" = find/tail "here^(010000) and now" "here^(010000)"
	--test-- "find/tail-14"
		--assert "andnow" = find/tail "^(010000)hereandnow" "^(010000)here"
	--test-- "find/tail-15"
		--assert none = find/tail "her^(010000) and now" "here^(010000)"
	--test-- "find/tail-16"
		--assert [and now] = find/tail [he✐re and now] 'he✐re
	--test-- "find/tail-17 issue #457"
		--assert "de" = find/tail "abcde" #"c"
	--test-- "find-tail-18"
		--assert "de" = find/tail "abc^^de" #"^^"
	
===end-group===

===start-group=== "find/last"
	--test-- "find/last-1"
		--assert [1] = find/last [1 1 1 1] 1
		--assert 4 = index? find/last [1 1 1 1] 1
	--test-- "find/last-2"
		--assert [2 1] = find/last [1 2 3 4 3 2 1] 2
	--test-- "find/last-3"
		--assert [3 3 2 1] = find/last [1 2 3 3 2 1] [3 3]
	--test-- "find/last-4"
		--assert "3321" = find/last "123321" "33"
	--test-- "find/last-5"
		--assert "321" = find/last "123321" "3"
	--test-- "find/last-6"
		--assert "1" = find/last "1111" "1"
	--test-- "find/last-7"
		--assert none = find/last "123" "34"
	--test-- "find/last-8" 
		--assert "✐5678" = find/last "1234✐5678" "✐"
	--test-- "find/last-9" 
		--assert "^(010000)5678" = find/last "1234^(010000)5678" "^(010000)"
===end-group===

===start-group=== "find/reverse"
	--test-- "find/reverse-1"
		--assert none = find/reverse [1 1 1 1] 1
	--test-- "find/reverse-2"
		--assert [2 1] = find/reverse tail [1 2 3 4 3 2 1] 2
	--test-- "find/reverse-3"
		--assert [3 3 2 1] = find/reverse tail [1 2 3 3 2 1] [3 3]
	--test-- "find/reverse-4"
		--assert "3321" = find/reverse back back back tail "123321" "33"
	--test-- "find/reverse-5"
		--assert "3321" = find/reverse back back back tail"123321" "3"
	--test-- "find/reverse-6"
		--assert "1" = find/reverse tail "1111" "1"
	--test-- "find/reverse-7"
		--assert none = find/reverse tail "123" "34"
	--test-- "find/reverse-8" 
		--assert "✐5678" = find/reverse tail "1234✐5678" "✐"
	--test-- "find/reverse-9" 
		--assert "^(010000)5678" = find/reverse tail "1234^(010000)5678" "^(010000)"
	--test-- "find/reverse-10 issue #505" 
		--assert "ab" = find/reverse tail "ab" #"a"
		--assert "ab" = find/reverse tail "ab" "ab"
		--assert [a b] = find/reverse tail [a b] 'a
		--assert [a b] = find/reverse tail [a b] [a b]
===end-group===

===start-group=== "find/last/tail"
	--test-- "find/last/tail-1 issue #459"
		--assert [7 8] = find/last/tail [1 2 3 4 5 6 3 7 8] 3
	--test-- "find/last/tail-2 issue #459"
		--assert "78" = find/last/tail "123456378" #"3"
	--test-- "find/last/tail-3"
		--assert "78" = find/last/tail "123456378" "3"
===end-group===

===start-group=== "find datatype!"
	--test-- "find datatype! -1"
		--assert [1] = find [a 1] integer!
	--test-- "find datatype! -2"
		--assert none = find [a] integer!
===end-group===


===start-group=== "select"
	--test-- "select-1"
	--assert 2 = select [1 2 3 4] 1
	--test-- "select-2"
	--assert 3 = select [1 2 3 4] 2
	--test-- "select-3"
	--assert none = select [1 2 3 4] 4
	--test-- "select-4"
	--assert none = select [1 2 3 4] 0
	--test-- "select-5"
	--assert none = select [1 2 3 4] 5
	--test-- "select-6"
	--assert none = select [1 2 3 4] "1"
	--test-- "select-7" 
	--assert #"2" = select "12345" #"1"
	;--test-- "select-8" 								;; unsupported case, it is unsure if it will be implemented or not
	;--assert #"2" = select "12345" 1					;; keeping it here commented for further reference.
	--test-- "select-9" 
	--assert #"2" = select "12345" "1"
	--test-- "select-10" 
	--assert #"3" = select "12345" "12"
	--test-- "select-11" 
	--assert #"3" = select "12345" #"2"
	--test-- "select-12" 
	--assert none = select "12345" #"5"
	--test-- "select-13" 
	--assert none = select "12345" #"0" 
	--test-- "select-14" 
	--assert none = select "12345" #"6"
	--test-- "select-15"
	--assert 3 = select [1 2 3] [1 2]
	--test-- "select-16"
	--assert none = select [1 2 3] [3 2]
	--test-- "select-17"
	--assert 3 = select [1 2 2 3] [2 2]
	--test-- "select-18"
	--assert none = select [1 2] [2 3]
	--test-- "select-19"
	--assert #"f" = select "abcdeéf" "é"
	--test-- "select-20"
	--assert #"f" = select "abcdeéf" "eé"
	--test-- "select-21"
	--assert none = select "abcdeéf" "ée"
	--test-- "select-22"
	--assert #"✐" = select "abcde✐" "e"            ;; code point 10000 (decimal)
	--test-- "select-23"
	--assert none = select "abcde✐" "ed✐"
	--test-- "select-24"
	--assert #"f" = select "abcde^(010000)f" "^(010000)"   
===end-group===

===start-group=== "select/part"
	--test-- "select/part-1"
	--assert none = select/part "1234" "1" 0
	--test-- "select/part-2"
	--assert #"2" = select/part "1234" "1" 1
	--test-- "select/part-3"
	--assert #"3" = select/part "1234" "2" 2
	--test-- "select/part-4"
	--assert #"3" = select/part "1234" "2" 4
	--test-- "select/part-5"
	--assert #"3" = select/part "1234" "2" 5
	--test-- "select/part-6"
	--assert none = select/part "1234" "3" 2
	--test-- "select/part-7"
	--assert none = select/part [1 2 3 4] 1 0
	--test-- "select/part-8"
	--assert 2 = select/part [1 2 3 4] 1 1
	--test-- "select/part-9"
	--assert 3 = select/part [1 2 3 4] 2 2
	--test-- "select/part-10"
	--assert 4 = select/part [1 2 3 4] [2 3] 4
	--test-- "select/part-11"
	--assert none = select/part [1 2 3 4] [2 3] 2
	--test-- "select/part-12"
	--assert none = select/part [1 2 3 4] 3 2
===end-group===

===start-group=== "select/only"
	--test-- "select/only-1"
	--assert 4 = select/only [1 [2 3] 4] [2 3]
	--test-- "select/only-2"
	--assert none = select/only [1 2 3 4] [2 3]
===end-group===

===start-group=== "select/case"
	--test-- "select/case-1"
	--assert #"b" = select/case "Aabcde" "a"
	--test-- "select/case-2"
	--assert #"b" = select/case "aAbcde" "A"
	--test-- "select/case-3"
	--assert none = select/case "è" "E"
===end-group===

===start-group=== "select/any"      ; not yet implemented
	--test-- "select/any-1"
	;--assert none = select/any "12345" "*"
	--test-- "select/any-2"
	;--assert #"2" = select/any "12345" "?"
	--test-- "select/any-3"
	;--assert #"5" = select/any "12345" "2?4"
	--test-- "select/any-4"
	;assert none = select/any "12345" "2*"
	--test-- "select/any-5"
	;assert "" = select/any "abcde✐f" "e?"        ;; code point 10000 (decimal)
	--test-- "select/any-6"
	;assert "g" = select/any "abcde✐fg" "?f" 
	--test-- "select/any-7"
	;assert none = select/any "abcde✐" "e*" 
	--test-- "select/any-8"
	;assert "g" = select/any "abcde✐fg" "*f" 
	--test-- "select/any-9"
	;assert "f" = select/any "abcde^(010000)f" "e?"        
	--test-- "select/any-10"
	;assert "g" = select/any "abcde^(010000)fg" "?f" 
	--test-- "select/any-11"
	;assert none = select/any "abcde^(010000)" "e*" 
	--test-- "select/any-12"
	;assert "g" = select/any "abcde^(010000)fg" "*f" 
===end-group===

===start-group=== "select/with"      ; not yet implemented
	--test-- "select/with-1"
	;--assert #"2" = select/with "12345" "^(FFFF)" "^(FFFE)^(FFFF)" 
	--test-- "select/with-2"
	;--assert none = select/with "12345" "^(FFFE)" "^(FFFE)^(FFFF)" 
	--test-- "select/with-3"
	;--assert #"4" = select/with "12345" "2^(FFFE)3" "^(FFFE)^(FFFF)"
	--test-- "select/with-4"
	;assert #"3" = select/with "12345" "2^(FFFF)" "^(FFFE)^(FFFF)"
	--test-- "select/with-5"
	;assert none = select/with "abcde✐" "e^(FFFE)" "^(FFFE)^(FFFF)"
	--test-- "select/with-6"
	;assert #"g" = select/with "abcde✐fg" "^(FFFE)f" "^(FFFE)^(FFFF)"
	--test-- "select/with-7"
	;assert #"f" = select/with "abcde✐f" "e^(FFFF)" "^(FFFE)^(FFFF)"
	--test-- "select/with-8"
	;assert #"g" = select/with "abcde✐fg" "^(FFFF)f" "^(FFFE)^(FFFF)" 
	--test-- "select/with-9"
	;assert none = select/with "abcde^(010000)" "e^(FFFE)" "^(FFFE)^(FFFF)"        
	--test-- "select/with-10"
	;assert #"g" = select/with "abcde^(010000)f" "^(FFFE)f" "^(FFFE)^(FFFF)"
	--test-- "select/with-11"
	;assert #"f" = select/with "abcde^(010000)" "e^(FFFF)" "^(FFFE)^(FFFF)"
	--test-- "select/with-12"
	;assert #"g" = select/with "abcde^(010000)f" "^(FFFF)f" "^(FFFE)^(FFFF)"
===end-group===

===start-group=== "select/skip"
  --test-- "select/skip-1"
  --assert 7 = select/skip [1 2 3 4 5 1 6 6 6 6 1 2 3 4 5 6 7 8 9 0] 6 5
  --test-- "select/skip-2"
  --assert none = select/skip [1 2 3 4 5 1 6 6 6 6 1 2 3 4 5 1 2 3 4 5] 6 5
  --test-- "select/skip-3"
  --assert 8 = select/skip [1 2 3 4 5 6 6 6 6 6 1 2 3 4 5 6 7 8 9 0 ] [6 7] 5
  --test-- "select/skip-4"
  --assert none = select/skip [1 2 3 4 5 1 6 6 6 6 1 2 3 4 5 1 2 3 4 5] [6 7] 5
  --test-- "select/skip-5"
  --assert #"7" = select/skip "12345166661234567890" "6" 5
  --test-- "select/skip-6"
  --assert none = select/skip "12345166661234557890" "6" 5
===end-group===



===start-group=== "Definitional binding"

	--test-- "def-bind-1"
		x: 'y
		y: 1
		--assert  x = 'y
		--assert 'y = get 'x
		--assert  1 = get x
		--assert  1 = do [get x]

	--test-- "def-bind-2"	
		fun-bind-2: func [/local x y][			;-- indirect local word setting test
			x: 'y
			y: 2
			--assert  x = 'y
			--assert 'y = get 'x
			--assert  2 = get x
			--assert  2 = do [get x]
		]
		fun-bind-2
	
	--test-- "def-bind-3"	
		fun-bind-3: func [/local x][			;-- indirect global word setting test
			x: 'z
			set x 3
			--assert 3 = get 'z
			--assert 3 = do [z]
		]
		fun-bind-3
	
===end-group===

===start-group=== "Dynamic binding"

	--test-- "dyn-bind-1"
		a: 0
		fun-bind-10: func [code /local a][
			a: 1
			do bind code 'a
		]
		--assert 3 = fun-bind-10 [a + 2]
		--assert a = 0

	--test-- "dyn-bind-2"
		a: 0
		fun-bind-11: func [code /local a][
			a: 1
			do bind/copy code 'a
		]
		z: [a + 2]
		--assert 3 = fun-bind-11 z
		--assert a = 0
		--assert 2 = do z
	
	--test-- "dyn-bind-3"
		a: 0
		fun-bind-12: func [code /local a][
			a: 1
			do bind code :fun-bind-12
		]
		--assert 3 = fun-bind-12 [a + 2]
		--assert a = 0


	--test-- "dyn-bind-4"
		a: 0
		fun-bind-13: func [word /local a][
			a: 1
			get bind word 'a
		]		
		--assert 1 = fun-bind-13 'a
		--assert a = 0
		
	--test-- "dyn-bind-5"
		a: 0
		fun-bind-14: func [word /local a][
			a: 1
			get bind word :fun-bind-14
		]
		--assert 1 = fun-bind-14 'a
		--assert a = 0

===end-group===


===start-group=== "Binding bugs"
	
	--test-- "#581"
		--assert 1 = do load {S: 1 S}



===start-group=== "Delimiter LOAD tests"

	--test-- "load-1"  --assert "" 		 = load {""}
	--test-- "load-2"  --assert "" 		 = load {{}}
	--test-- "load-3"  --assert "{" 	 = load {"^{"}
	--test-- "load-4"  --assert "}" 	 = load {"^}"}
	--test-- "load-5"  --assert "{}"	 = load {"^{^}"}
	--test-- "load-6"  --assert {^}^{} 	 = load {"^}^{"}
	--test-- "load-7"  --assert "^{^}^}" = load {"^{^}^}"}
	--test-- "load-8"  --assert ""		 = load {"^"}
	--test-- "load-9"  --assert ""		 = load "{}"
	--test-- "load-10" --assert "{"		 = load "{^^{}"
	--test-- "load-11" --assert {"}		 = load {{"}}
	--test-- "load-12" --assert "^/" 	 = load "{^/}^/"
	--test-- "load-13" --assert "^/" 	 = load "{^/}"
	--test-- "load-14" --assert "{^/}"	 = load {{{^/}}}
	--test-- "load-15" --assert {{"x"}}	 = load {{{"x"}}}
	--test-- "load-16" --assert "{x}"	 = load {{{x}}}
	--test-- "load-17" --assert {"x"}	 = load {{"x"}}
	--test-- "load-18" --assert "x"		 = load {{x}}
	
===end-group===

===start-group=== "LOAD /part tests"
	src: "123abc789"

	--test-- "load-p1" --assert 123  = load/part src 3
	--test-- "load-p2" --assert 12   = load/part src 2
	--test-- "load-p3" --assert 1    = load/part src 1
	--test-- "load-p4" --assert []   = load/part src 0
	--test-- "load-p4" --assert 'abc = load/part skip src 3 3

===end-group===
 
===start-group=== "LOAD floats test"

	--test-- "load-30"	--assert "123.0"		= mold load "123.0"
	--test-- "load-31"	--assert "1.123"		= mold load "1.123"
	--test-- "load-32"	--assert "0.123"		= mold load ".123"
	--test-- "load-33"	--assert "100.0"		= mold load "1E2"
	--test-- "load-34"	--assert "1200.0"		= mold load "1.2E3"
	--test-- "load-35"	--assert "10.0"			= mold load ".1E2"
	--test-- "load-36"	--assert "12.3"			= mold load ".123E2"
	--test-- "load-37"	--assert "-0.3"			= mold load "-.3"
	--test-- "load-38"	--assert "1.#NaN"		= mold load "1.#nan"
	--test-- "load-39"	--assert "1.#INF"		= mold load "1.#INF"
	--test-- "load-40"	--assert "-1.#INF"		= mold load "-1.#Inf"
	--test-- "load-41"	--assert "1.0e23"		= mold load "0.99999999999999999999999999999999999999999e+23"
	--test-- "load-42"	--assert "-9.3e-9"		= mold load "-93E-10"
	--test-- "load-43"	--assert "0.0"			= mold load "2183167012312112312312.23538020374420446192e-370"
	--test-- "load-44"	--assert 1.3			== load "1,3"
	--test-- "load-45"	--assert 2147483648.0	== load "2147483648"
	--test-- "load-46"	--assert -2147483649.0	== load "-2147483649"

===end-group===

===start-group=== "Load integer tests"

	--test-- "load-int-1"	--assert 0 == load "0"
	--test-- "load-int-2"	--assert 2147483647 == load "2147483647"
	--test-- "load-int-3"	--assert -2147483648 == load "-2147483648"
	--test-- "load-int-4"	--assert error? try [load "1a3"]
	--test-- "load-int-5"	--assert 1 == load "1"
	--test-- "load-int-6"	--assert 1 == load "+1"
	--test-- "load-int-7"	--assert -1 == load "-1"
	--test-- "load-int-8"	--assert 0 == load "+0"
	--test-- "load-int-9"	--assert 0 == load "-0"
	--test-- "load-int-10"	--assert 1 == load "01h"
	--test-- "load-int-11"	--assert 2147483647 == load "7FFFFFFFh"
	--test-- "load-int-12"	--assert -1 == load "FFFFFFFFh"
	
===end-group===

===start-group=== "load word tests"

	--test-- "load-word-1"	--assert 'w == load "w"
	--test-- "load-word-2"	--assert '? == load "?"
	--test-- "load-word-3"	--assert '! == load "!"
	--test-- "load-word-4"	--assert '. == load "."
	--test-- "load-word-5"	--assert 'a' == load "a'"  	
	--test-- "load-word-6"	--assert '+ == load "+"
	--test-- "load-word-7"	--assert '- == load "-"
	--test-- "load-word-8"	--assert '* == load "*"
	--test-- "load-word-9"	--assert '& == load "&"
	--test-- "load-word-10"	--assert '| == load "|"
	--test-- "load-word-11"	--assert '= == load "="
	--test-- "load-word-12"	--assert '_ == load "_"
	--test-- "load-word-13" --assert '~ == load "~"
	--test-- "load-word-14" --assert 'a == load "a;b"
	--test-- "load-word-15"	--assert 'a/b == load "a/b"
	--test-- "load-word-16" --assert strict-equal? first [a:] load "a:"
	--test-- "load-word-17"	--assert strict-equal? first [:a] load ":a"
	--test-- "load-word-18"	--assert strict-equal? first ['a] load "'a"
	--test-- "load-word-19" --assert strict-equal? first [œ∑´®†] load "œ∑´®†"
	

===end-group===

===start-group=== "load code tests"
	--test-- "load-code-1"	--assert [a ()] == load "a()"
	--test-- "load-code-2"	--assert [a []] == load "a[]"
	--test-- "load-code-3"	--assert [a {}] == load "a{}"
	--test-- "load-code-4"	--assert [a ""] == load {a""}
===end-group=== 

===start-group=== "load map tests"

	--test-- "load-map-1"
		lm1-blk: load "m: #(a: 1 b: 2)"
		--assert 2 == length? lm1-blk
		--assert strict-equal? first [m:] first lm1-blk
		--assert map! = type? second lm1-blk
		--assert 2 == length? second lm1-blk
		--assert 1 == select second lm1-blk first [a:]
		--assert 2 == select second lm1-blk first [b:]
		
	--test-- "load-map-2"
		lm2-blk: load "m: make map! [a: 1 b: 2]"
		--assert 4 == length? lm2-blk
		--assert strict-equal? first [m:] first lm2-blk
		--assert 'make == second lm2-blk
		--assert 'map! == third lm2-blk
		--assert 4 == length? fourth lm2-blk
		--assert 1 == select fourth lm2-blk first [a:]
		--assert 2 == select fourth lm2-blk first [b:]

===end-group===

===start-group=== "load object tests"

	--test-- "load-object-1"
		lo1-blk: load {
			o: make object! [
				a: 1
				b: 1.0
				c: #"1"
				d: "one"
				e: #(a: 1 b: 2)
				f: func [][1]
			]
		}
		--assert block! = type? lo1-blk
		--assert 4 = length? lo1-blk
		--assert strict-equal?
			first [o:]
			first lo1-blk
		--assert 'make == second lo1-blk
		--assert 'object! == third lo1-blk
		--assert 14 == length? fourth lo1-blk
		--assert strict-equal?
			first [a:]
			first fourth lo1-blk
		--assert 1 == second fourth lo1-blk
		--assert strict-equal?
			first [b:]
			third fourth lo1-blk
		--assert 1.0 == fourth fourth lo1-blk
		--assert strict-equal?
			first [c:]
			fifth fourth lo1-blk
		--assert #"1" == pick fourth lo1-blk 6
		--assert strict-equal?
			first [d:]
			pick fourth lo1-blk 7
		--assert "one" == pick fourth lo1-blk 8
		--assert strict-equal?
			first [e:]
			pick fourth lo1-blk 9
		--assert map! == type? pick fourth lo1-blk 10
		--assert 1 == select pick fourth lo1-blk 10 'a
		--assert 2 == select pick fourth lo1-blk 10 'b
		--assert strict-equal?
			first [f:]
			pick fourth lo1-blk 11
		--assert 'func == pick fourth lo1-blk 12
		--assert [] == pick fourth lo1-blk 13
		--assert [1] == pick fourth lo1-blk 14
		
	--test-- "load-object-2"
		lo2-blk: load {
			o: make object! [
				oo: make object! [
					ooo: make object! [
						a: 1
					]
				]
			]
		}
		--assert 4 == length? lo2-blk
		--assert 4 == length? fourth lo2-blk
		--assert 4 == length? fourth fourth lo2-blk
		--assert 2 == length? fourth fourth fourth lo2-blk
		--assert strict-equal?
			first [o:]
			first lo2-blk
		--assert 'make == second lo2-blk
		--assert 'object! == third lo2-blk
		--assert strict-equal?
			first [oo:]
			first fourth lo2-blk
		--assert 'make == second fourth lo2-blk
		--assert 'object! == third fourth lo2-blk
		--assert strict-equal?
			first [ooo:]
			first fourth fourth lo2-blk
		--assert 'make == second fourth fourth lo2-blk
		--assert 'object! == third fourth fourth lo2-blk
		--assert strict-equal?
			first [a:]
			first fourth fourth fourth lo2-blk
		--assert 1 == second fourth fourth fourth lo2-blk

===end-group===

===start-group=== "load next tests"

	--test-- "load-next-1"
		s: "123 []hello"
		--assert 123 	== load/next s 's
		--assert [] 	== load/next s 's
		--assert 'hello == load/next s 's
		--assert [] 	== load/next s 's
		--assert [] 	== load/next s 's
		--assert (head s) == "123 []hello"

	--test-- "load-next-2"
		s: "{}()[]"
		--assert "" 			 == load/next s 's
		--assert (make paren! 0) == load/next s 's
		--assert [] 			 == load/next s 's

	--test-- "load-next-3"
		s: "^-{}^/(^/)^M[^-]"
		--assert "" 			 == load/next s 's
		--assert (make paren! 0) == load/next s 's
		--assert [] 			 == load/next s 's


===start-group=== "switch basics"

	--test-- "switch-basic-1"
		sb1-i: 1
		sb1-j: -1
		switch sb1-i [
			0	[sb1-j: 0]
			1	[sb1-j: 1]
			2	[sb1-j: 2]
		]
        --assert sb1-j = 1
	
	--test-- "switch-basic-2"
		sb2-i: "Nenad"
		sb2-j: "REBOL"
		switch sb2-i [
			"Andreas" 	[sb2-j: "Earl"]
			"Nenad"		[sb2-j: "Red"]
			"Peter"		[sb2-j: "Peter"]
		]
	    --assert sb2-j = "Red"
	
	--test-- "switch-basic-3"
		sb3-i: "Χαῖρε, κόσμε"
		sb3-j: "REBOL"
		switch sb3-i [
			"Andreas" 			[sb3-j: "Earl"]
			"Nenad"				[sb3-j: "Red"]
			"Peter"				[sb3-j: "Peter"]
			"Χαῖρε, κόσμε"		[sb3-j: "Zorba"]
		]
	    --assert sb3-j = "Zorba"
	
	--test-- "switch-basic-4"
		sb4-i: "Zorba"
		sb4-j: "REBOL"
		switch sb4-i [
			"Andreas" 			[sb4-j: "Earl"]
			"Nenad"				[sb4-j: "Red"]
			"Peter"				[sb4-j: "Peter"]
			"Zorba"				[sb4-j: "Χαῖρε, κόσμε"]
		]
	    --assert sb4-j = "Χαῖρε, κόσμε"
	
	--test-- "switch-basic-5"
		sb5-i: "abcde^(010000)"
		sb5-j: "REBOL"
		switch sb5-i [
			"Andreas" 			[sb5-j: "Earl"]
			"Nenad"				[sb5-j: "Red"]
			"Peter"				[sb5-j: "Peter"]
			"Zorba"				[sb5-j: "Χαῖρε, κόσμε"]
			"abcde^(010000)"	[sb5-j: "boron"]
		]
	    --assert sb5-j = "boron"
	
	--test-- "switch-basic-6"
		sb6-i: #"^(010000)"
		sb6-j: "REBOL"
		switch sb6-i [
			#"a" 				[sb6-j: "Earl"]
			#"b"				[sb6-j: "Red"]
			#"c"				[sb6-j: "Peter"]
			#"d"				[sb6-j: "Χαῖρε, κόσμε"]
			#"^(010000)"		[sb6-j: "boron"]
		]
    	--assert sb6-j = "boron"
	
	--test-- "switch-basic-8"
		sb8-i: %Nenad
		sb8-j: "REBOL"
		switch sb8-i [
			%Andreas 	[sb8-j: "Earl"]
			%Nenad		[sb8-j: "Red"]
			%Peter		[sb8-j: "Peter"]
		]
		--assert sb8-j = "Red"
	
	--test-- "switch-basic-9"
		sb9-i: #Nenad
		sb9-j: "REBOL"
		switch sb9-i [
			#Andreas 	[sb9-j: "Earl"]
			#Nenad		[sb9-j: "Red"]
			#Peter		[sb9-j: "Peter"]
		]
        --assert sb9-j = "Red"
	
	--test-- "switch-basic-10"
		sb10-i: true
		sb10-j: "REBOL"
		switch sb10-i [
			#[false]	[sb10-j: "Earl"]
			#[true]		[sb10-j: "Red"]
			#[true]		[sb10-j: "Peter"]
		]
        --assert sb10-j = "Red"
	
	--test-- "switch-basic-11"
		sb11-i: first [(1 2 3)]
		sb11-j: "REBOL"
		switch sb11-i [
			(3 2 1)	 	[sb11-j: "Earl"]
			(1 2 3)		[sb11-j: "Red"]
			(2 3 1)		[sb11-j: "Peter"]
		]
        --assert sb11-j = "Red"
	
	--test-- "switch-basic-13"
		sb13-i: first [(2)]
		sb13-j: "REBOL"
		switch sb13-i [
			(1)	 	[sb13-j: "Earl"]
			(2)		[sb13-j: "Red"]
			(3)		[sb13-j: "Peter"]
		]
        --assert sb13-j = "Red"
	
	--test-- "switch-basic-14"
		sb14-i: [2]
		sb14-j: "REBOL"
		switch first sb14-i [
			1 		[sb14-j: "Earl"]
			2		[sb14-j: "Red"]
			3		[sb14-j: "Peter"]
		]
        --assert sb14-j = "Red"
	
===end-group===

===start-group=== "switch basics local"    ;; one "direct" type & one "indirect"
										   ;;  should be sufficient

	sb-i: "Hello"
	sb-j: "World"
	switch-fun: func [/local sb-i sb-j][
		--test-- "switch-basic-local-1"
			sb-i: 1
			sb-j: -1
			switch sb-i [
				0	[sb-j: 0]
				1	[sb-j: 1]
				2	[sb-j: 2]
			]
		    --assert sb-j = 1
		--test-- "switch-basic-local-2"
			sb-i: "Nenad"
			sb-j: "REBOL"
			switch sb-i [
				"Andreas" 	[sb-j: "Earl"]
				"Nenad"		[sb-j: "Red"]
				"Peter"		[sb-j: "Peter"]
			]
		    --assert sb-j = "Red"
	]
	switch-fun
	--test-- "switch-basic-local-global-1"
	    --assert sb-i = "Hello"
	    --assert sb-j = "World"
	
===end-group===

===start-group=== "switch-default"
	
	--test-- "switch-default-1"
		sd1-i: 2
		sd1-j: -1
		switch/default sd1-i [
			1	[sd1-j: 1]
			2	[sd1-j: 2]
		][
			sd1-j: 0
		]
	    --assert sd1-j = 2
	
	--test-- "switch-default-2"
		sd2-i: 999
		sd2-j: -1
		switch/default sd2-i [
			1	[sd2-j: 1]
			2	[sd2-j: 2]
		][
			sd2-j: 0
		]
	    --assert sd2-j = 0
	
	--test-- "switch-default-3"
		sd3-i: "hello"
		sd3-j: -1
		switch/default sd3-i [
			1	[sd3-j: 1]
			2	[sd3-j: 2]
		][
			sd3-j: 0
		]
	    --assert sd3-j = 0

===end-group===

;===start-group=== "switch-all"			;; not sure if it will be implemented.
;	
;	--test-- "switch-all-1"
;	comment { /all not yet implemented 
;		sa1-i: 1
;		sa1-j: 0
;		switch/all sa1-i [
;			0	[sa1-j: sa1-j + 1]
;			1	[sa1-j: sa1-j + 2]
;			2	[sa1-j: sa1-j + 4]
;		]
;	    --assert sa1-j = 6 
;	Following assert to highlight switch/all not yet implemented
;	}
;===end-group===

===start-group=== "switch-multi"		;; not sure if it will be implemented. 

    --test-- "switch-multi-1"
        sm1-i: 2
        sm1-j: 0
        switch sm1-i [
            1 2	[sm1-j: 1]
        ]
        ; Following assert needs to be activated when support for multiple values gets implemented
        ;--assert sm1-j = 1
        
===end-group===



===start-group=== "case basics"

	--test-- "case-basic-1"
	ci:  0
	cia: 1
	case [true [0]]
	--assert cia = 1
	
	--test-- "case-basic-2"
	ci:  1
	cia: 2
	case [ci = 1 [cia: 2]]
	--assert cia = 2
	
	--test-- "case-basic-3"
	ci:  1
	cia: 2
	case [true [cia: 3]]
	--assert cia = 3
	
	--test-- "case-basic-4"
	ci:  0
	cia: 2
	case [ci <> 0 [cia: 0] true [cia: 3]]
	--assert cia = 3
	
	--test-- "case-basic-5"
	ci:  99
	cia: 2
	case [ci = 1 [cia: 2] true [cia: 3]]
	--assert cia = 3
	
	--test-- "case-basic-6"
	ci:  0
	cia: 1
	cia: case [true [2]]
	--assert cia = 2
	
	--test-- "case-basic-7"
	ci:  0
	cia: 2
	cia: case [ci <> 0 [0] true [3]]
	--assert cia = 3
	
	--test-- "case-basic-8"
	ci:  1
	cia: 2
	cia: case [ci = 1 [3]]
	--assert cia = 3
	
	--test-- "case-basic-9"
	ci:  1
	cia: 2
	case [ci = 1 [case [ci <> 0 [cia: 3] true [cia: 4]]]]
	--assert cia = 3
	
	--test-- "case-basic-10"
	ci:  1
	cia: 2
	cia: case [ci = 1 [case [ci <> 0 [3] true [4]]]]
	--assert cia = 3
	
	--test-- "case-basic-11"
	ci:  1
	cia: 2
	cia: case [ci = 1 [switch/default ci [1 [3]][4]]]
	--assert cia = 3
	
===end-group===

===start-group=== "case basics local"

	case-fun: func [/local ci cia][
		--test-- "case-loc-1"
		ci:  0
		cia: 1
		case [true [0]]
		--assert cia = 1

		--test-- "case-loc-2"
		ci:  1
		cia: 2
		case [ci = 1 [cia: 2]]
		--assert cia = 2

		--test-- "case-loc-3"
		ci:  1
		cia: 2
		case [true [cia: 3]]
		--assert cia = 3

		--test-- "case-loc-4"
		ci:  0
		cia: 2
		case [ci <> 0 [cia: 0] true [cia: 3]]
		--assert cia = 3

		--test-- "case-loc-5"
		ci:  99
		cia: 2
		case [ci = 1 [cia: 2] true [cia: 3]]
		--assert cia = 3

		--test-- "case-loc-6"
		ci:  0
		cia: 1
		cia: case [true [2]]
		--assert cia = 2

		--test-- "case-loc-7"
		ci:  0
		cia: 2
		cia: case [ci <> 0 [0] true [3]]
		--assert cia = 3

		--test-- "case-loc-8"
		ci:  1
		cia: 2
		cia: case [ci = 1 [3]]
		--assert cia = 3

		--test-- "case-loc-9"
		ci:  1
		cia: 2
		case [ci = 1 [case [ci <> 0 [cia: 3] true [cia: 4]]]]
		--assert cia = 3

		--test-- "case-loc-10"
		ci:  1
		cia: 2
		cia: case [ci = 1 [case [ci <> 0 [3] true [4]]]]
		--assert cia = 3

		--test-- "case-loc-11"
		ci:  1
		cia: 2
		cia: case [ci = 1 [switch/default ci [1 [3]][4]]]
		--assert cia = 3
	]
	case-fun
	
===end-group===

===start-group=== "case integer!"
	
	--test-- "case-int-1"
	  ci: 1
	  cia: 0
	  case [ ci = 1 [cia: 1] ci = 2 [cia: 2] true [cia: 3]]
	--assert 1 = cia
	
	--test-- "case-int-2"
	  ci: 2
	  cia: 0
	  case [ ci = 1 [cia: 1] ci = 2 [cia: 2] true [cia: 3]]
	--assert 2 = cia
	
	--test-- "case-int-3"
	  ci: 3
	  cia: 0
	  case [ ci = 1 [cia: 1] ci = 2 [cia: 2] true [cia: 3]]
	--assert 3 = cia
	
	--test-- "case-int-4"
	  ci: 9
	  cia: 0
	  case [ ci = 1 [cia: 1] ci = 2 [cia: 2] true [cia: 3]]
	  --assert 3 = cia

	--test-- "case-int-5"
	  ci: 1
	--assert 1 = case [ ci = 1 [1] ci = 2 [2] true [3]]

	--test-- "case-int-6"
	  ci: 1
	  cres: case [ ci = 1 [1] ci = 2 [2] true [3]]
	--assert 1 = cres
	
	--test-- "case-int-7"
	  ci: 2
	--assert 2 = case [ ci = 1 [1] ci = 2 [2] true [3]]
		
	--test-- "case-int-8"
	  ci: 2
	  cres: case [ ci = 1 [1] ci = 2 [2] true [3]]
	--assert 2 = cres

	--test-- "case-int-9"
	  ci: 3
	--assert 3 = case [ ci = 1 [1] ci = 2 [2] true [3]]
	
	--test-- "case-int-10"
	  ci: 3
	  cres: case [ ci = 1 [1] ci = 2 [2] true [3]]
	--assert 3 = cres
	
	--test-- "case-int-11"
	  ci: 10
	--assert 3 = case [ ci = 1 [1] ci = 2 [2] true [3]]
	
	--test-- "case-int-12"
	  ci: 10
	  cres: case [ ci = 1 [1] ci = 2 [2] true [3]]
	--assert 3 = cres

	case [ ci = 1 [cia: 1] ci = 2 [cia: 2] true [cia: 3]]

	--test-- "case-int-13"
	  ci: 1
	  cia: 0
	--assert 1 = case [ ci = 1 [cia: 1] ci = 2 [cia: 2] true [cia: 3]]
	
	--test-- "case-int-14"
	  ci: 1
	  cia: 0
	  cres: case [ ci = 1 [cia: 1] ci = 2 [cia: 2] true [cia: 3]]
	--assert 1 = cres
	
	--test-- "case-int-15"
	  ci: 2
	  cia: 0
	--assert 2 = case [ ci = 1 [cia: 1] ci = 2 [cia: 2] true [cia: 3]]
	
	--test-- "case-int-16"
	  ci: 2
	  cia: 0
	  cres: case [ ci = 1 [cia: 1] ci = 2 [cia: 2] true [cia: 3]]
	--assert 2 = cres
	
	--test-- "case-int-17"
	  ci: 3
	  cia: 0
	--assert 3 = case [ ci = 1 [cia: 1] ci = 2 [cia: 2] true [cia: 3]]
	
	--test-- "case-int-18"
	  ci: 3
	  cia: 0
	  cres: case [ ci = 1 [cia: 1] ci = 2 [cia: 2] true [cia: 3]]
	--assert 3 = cres
	
	--test-- "case-int-19"
	  ci: 9
	  cia: 0
	--assert 3 = case [ ci = 1 [cia: 1] ci = 2 [cia: 2] true [cia: 3]]
	
	--test-- "case-int-20"
	  ci: 9
	  cia: 0
	  cres: case [ ci = 1 [cia: 1] ci = 2 [cia: 2] true [cia: 3]]
	--assert 3 = cres
	
===end-group===


===start-group=== "case logic!"

  --test-- "case-logic-1"
    cl: true
  --assert case [ cl = true [true] cl = false [false] true [false]]
  
  --test-- "case-logic-2"
    cl: false
  --assert false = case [ cl = true [true] cl = false [false] true [true]]

===end-group===

===start-group=== "case reported issues"

	--test-- "case-issue-504"
	--assert 1 = case [true 1 false 2]
	
===end-group===	



===start-group=== "+ tests"
	--test-- "char+1" --assert #"^(01)" + #"^(00)" = #"^(01)"
	--test-- "char+2" --assert #"^(FF)" + #"^(01)" = #"^(0100)"
===end-group===
  
===start-group=== "- tests"
	--test-- "char-1" --assert #"^(01)" - #"^(00)" = #"^(01)"
	--test-- "char-2" --assert #"^(0100)" - #"^(01)" = #"^(FF)"
===end-group===

===start-group=== "* tests"
    --test-- "char*1" --assert #"^(01)" * #"^(00)" = #"^(00)"
    --test-- "char*2" --assert #"^(01)" * #"^(01)" = #"^(01)"
    --test-- "char*3" --assert #"^(01)" * #"^(02)" = #"^(02)"
    --test-- "char*4" --assert #"^(010FFF)" * #"^(10)" = #"^(10FFF0)"
===end-group===
  
===start-group=== "/ tests"
    --test-- "char/1" --assert #"^(01)" / #"^(01)" = #"^(01)"
    --test-- "char/2" --assert #"^(01)" / #"^(02)" = #"^(00)"
    --test-- "char/3" --assert #"^(10FFFF)" / #"^(10)" = #"^(010FFF)"
    
===end-group===

===start-group=== "mod tests"
    --test-- "char%1" --assert #"^(010FFF)" % #"^(10)" = #"^(0F)"
    --test-- "char%2" --assert #"^(01)" % #"^(02)" = #"^(01)"
===end-group===

===start-group=== "even?"
	--test-- "even1" --assert true	= even? #"^(00)"
	--test-- "even2" --assert false = even? #"^(01)"
	--test-- "even3" --assert false	= even? #"^(10FFFF)"
	--test-- "even4" --assert true	= even? #"^(FE)"
===end-group===

===start-group=== "odd?"
	--test-- "odd1" --assert false	= odd? #"^(00)"
	--test-- "odd2" --assert true	= odd? #"^(01)"
	--test-- "odd3" --assert true	= odd? #"^(10FFFF)"
	--test-- "odd4" --assert false	= odd? #"^(FE)"
===end-group===

===start-group=== "min/max"
	--test-- "max1" --assert #"b" = max #"a" #"b"
	--test-- "min1" --assert #"a" = min #"a" #"大"
===end-group===

===start-group=== "and"
	--test-- "and1" --assert #"^(01)" and #"^(10)" = #"^(00)"
	--test-- "and2" --assert #"^(11)" and #"^(10)" = #"^(10)"
	--test-- "and3" --assert #"^(01)" and #"^(1F)" = #"^(01)"
===end-group===

===start-group=== "or"
	--test-- "or1" --assert #"^(01)" or #"^(10)"  = #"^(11)"
	--test-- "or2" --assert #"^(11)" or #"^(10)"  = #"^(11)"
	--test-- "or3" --assert #"^(01)" or #"^(1F)"  = #"^(1F)"
===end-group===

===start-group=== "xor"
	--test-- "xor1" --assert #"^(01)" xor #"^(10)" = #"^(11)"
	--test-- "xor2" --assert #"^(11)" xor #"^(10)" = #"^(01)"
	--test-- "xor3" --assert #"^(01)" xor #"^(1F)" = #"^(1E)"
===end-group===


===start-group=== "prefix equal same datatype"
	--test-- "prefix-equal-same-datatype-1"		--assert equal? 0 0
	--test-- "prefix-equal-same-datatype-2"		--assert equal? 1 1
	--test-- "prefix-equal-same-datatype-3"		--assert equal? FFFFFFFFh -1
	--test-- "prefix-equal-same-datatype-4"		--assert equal? [] []
	--test-- "prefix-equal-same-datatype-5"		--assert equal? [a] [a]
	--test-- "prefix-equal-same-datatype-6"		--assert equal? [A] [a]
	--test-- "prefix-equal-same-datatype-7"		--assert equal? ['a] [a]
	--test-- "prefix-equal-same-datatype-8"		--assert equal? [a:] [a]
	--test-- "prefix-equal-same-datatype-9"		--assert equal? [:a] [a]
	--test-- "prefix-equal-same-datatype-10"	--assert equal? [:a] [a:]
	--test-- "prefix-equal-same-datatype-11"	--assert equal? [abcde] [abcde]
	--test-- "prefix-equal-same-datatype-12"	--assert equal? [a b c d] [a b c d]
	--test-- "prefix-equal-same-datatype-13"	--assert equal? [b c d] next [a b c d]
	--test-- "prefix-equal-same-datatype-14"	--assert equal? [b c d] (next [a b c d])
	--test-- "prefix-equal-same-datatype-15"	--assert equal? "a" "a"
	--test-- "prefix-equal-same-datatype-16"	--assert equal? "a" "A"
	--test-- "prefix-equal-same-datatype-17"	--assert equal? "abcdeè" "abcdeè"
	--test-- "prefix-equal-same-datatype-18"	--assert equal? (next "abcdeè") next "abcdeè"
	--test-- "prefix-equal-same-datatype-19"	--assert equal? (first "abcdeè") first "abcdeè"
	--test-- "prefix-equal-same-datatype-20"	--assert equal? (last "abcdeè") last "abcdeè"
	--test-- "prefix-equal-same-datatype-21"
		--assert equal? "abcde^(2710)é^(010000)" "abcde^(2710)é^(010000)"
	--test-- "prefix-equal-same-datatype-22"	--assert equal? [d] back tail [a b c d]
	--test-- "prefix-equal-same-datatype-23"	--assert equal? "2345" next "12345"
	--test-- "prefix-equal-same-datatype-24"	--assert equal? #"z" #"z"
	--test-- "prefix-equal-same-datatype-25"	--assert not equal? #"z" #"Z"
	--test-- "prefix-equal-same-datatype-26"	--assert not equal? #"e" #"è"
	--test-- "prefix-equal-same-datatype-27"	--assert equal? #"^(010000)" #"^(010000)"
	--test-- "prefix-equal-same-datatype-28"	--assert equal? true true
	--test-- "prefix-equal-same-datatype-29"	--assert equal? false false
	--test-- "prefix-equal-same-datatype-30"	--assert not equal? false true
	--test-- "prefix-equal-same-datatype-31"	--assert not equal? true false
	--test-- "prefix-equal-same-datatype-32"	--assert equal? none none
	--test-- "prefix-equal-same-datatype-33"	--assert equal? 'a 'a
	--test-- "prefix-equal-same-datatype-34"	--assert equal? 'a 'A
	--test-- "prefix-equal-same-datatype-35"	--assert equal? (first [a]) first [a]
	--test-- "prefix-equal-same-datatype-36"	--assert equal? 'a first [A]
	--test-- "prefix-equal-same-datatype-37"	--assert equal? 'a first ['a]
	--test-- "prefix-equal-same-datatype-38"	--assert equal? 'a first [:a]
	--test-- "prefix-equal-same-datatype-39"	--assert equal? 'a first [a:]
	--test-- "prefix-equal-same-datatype-40"	--assert equal? (first [a:]) first [a:]
	--test-- "prefix-equal-same-datatype-41"	--assert equal? (first [:a]) first [:a]
	--test-- "prefix-equal-same-datatype-42"	--assert equal? [a b c d e] first [[a b c d e]]
	--test-- "prefix-equal-same-datatype-43"
		ea-result: 1 = 1
		--assert ea-result = true
	--test-- "prefix-equal-same-datatype-44"
		ea-result: 1 = 0
		--assert ea-result = false
	--test-- "prefix-equal-same-datatype-45"
		ea-result: equal? 1 1
		--assert ea-result = true
	--test-- "prefix-equal-same-datatype-46"
		ea-result: equal? 1 0
		--assert ea-result = false
===end-group===
	
===start-group=== "prefix equal implcit cast"
	--test-- "prefix-equal-implcit-cast-1"		--assert equal? #"0" 48
	--test-- "prefix-equal-implcit-cast-2"		--assert equal? 48 #"0"
	--test-- "prefix-equal-implcit-cast-3"		--assert equal? #"^(2710)" 10000
	--test-- "prefix-equal-implcit-cast-4"		--assert equal? #"^(010000)" 65536
	--test-- "prefix-equal-implcit-cast-5"	
		ea-result: #"1" = 49
		--assert ea-result = true
	--test-- "prefix-equal-implcit-cast-6"
		ea-result: equal? #"^(010000)" 10000
		--assert ea-result = false
===end-group===

===start-group=== "= same datatype"
	--test-- "infix-equal-same-datatype-1"		--assert 0 = 0
	--test-- "infix-equal-same-datatype-2"		--assert 1 = 1
	--test-- "infix-equal-same-datatype-3"		--assert FFFFFFFFh = -1
	--test-- "infix-equal-same-datatype-4"		--assert [] = []
	--test-- "infix-equal-same-datatype-5"		--assert [a] = [a]
	--test-- "infix-equal-same-datatype-6"		--assert [A] = [a]
	--test-- "infix-equal-same-datatype-7"		--assert ['a] = [a]
	--test-- "infix-equal-same-datatype-8"		--assert [a:] = [a]
	--test-- "infix-equal-same-datatype-9"		--assert [:a] = [a]
	--test-- "infix-equal-same-datatype-10"		--assert [:a] = [a:]
	--test-- "infix-equal-same-datatype-11"		--assert [abcde] = [abcde]
	--test-- "infix-equal-same-datatype-12"		--assert [a b c d] = [a b c d]
	--test-- "infix-equal-same-datatype-13"		--assert [b c d] = next [a b c d]
	--test-- "infix-equal-same-datatype-14"		--assert [b c d] = (next [a b c d])
	--test-- "infix-equal-same-datatype-15"		--assert "a" = "a"
	--test-- "infix-equal-same-datatype-16"		--assert "a" = "A"
	--test-- "infix-equal-same-datatype-17"		--assert "abcdeè" = "abcdeè"
	--test-- "infix-equal-same-datatype-18"		--assert (next "abcdeè") = next "abcdeè"
	--test-- "infix-equal-same-datatype-19"		--assert (first "abcdeè") = first "abcdeè"
	--test-- "infix-equal-same-datatype-20"		--assert (last "abcdeè") = last "abcdeè"
	--test-- "infix-equal-same-datatype-21"
		--assert "abcde^(2710)é^(010000)" = "abcde^(2710)é^(010000)"
	--test-- "infix-equal-same-datatype-22"		--assert [d] = back tail [a b c d]
	--test-- "infix-equal-same-datatype-23"		--assert "2345" = next "12345"
	--test-- "infix-equal-same-datatype-24"		--assert #"z" = #"z"
	--test-- "infix-equal-same-datatype-25"		--assert not #"z" = #"Z"
	--test-- "infix-equal-same-datatype-26"		--assert not #"e" = #"è"
	--test-- "infix-equal-same-datatype-27"		--assert #"^(010000)" = #"^(010000)"
	--test-- "infix-equal-same-datatype-28"		--assert true = true
	--test-- "infix-equal-same-datatype-29"		--assert false = false
	--test-- "infix-equal-same-datatype-30"		--assert not false = true
	--test-- "infix-equal-same-datatype-31"		--assert not true = false
	--test-- "infix-equal-same-datatype-32"		--assert none = none
	--test-- "infix-equal-same-datatype-33"		--assert 'a = 'a
	--test-- "infix-equal-same-datatype-34"		--assert 'a = 'A
	--test-- "infix-equal-same-datatype-35"		--assert (first [a]) = first [a]
	--test-- "infix-equal-same-datatype-36"		--assert 'a = first [A]
	--test-- "infix-equal-same-datatype-37"		--assert 'a = first ['a]
	--test-- "infix-equal-same-datatype-38"		--assert 'a = first [:a]
	--test-- "infix-equal-same-datatype-39"		--assert 'a = first [a:]
	--test-- "infix-equal-same-datatype-40"		--assert (first [a:]) = first [a:]
	--test-- "infix-equal-same-datatype-41"		--assert (first [:a]) = first [:a]
	--test-- "infix-equal-same-datatype-42"		--assert [a b c d e] = first [[a b c d e]]
	--test-- "infix-equal-same-datatype-43"
		ea-result: 1 = 1
		--assert ea-result = true
	--test-- "infix-equal-same-datatype-44"
		ea-result: 1 = 0
		--assert ea-result = false
	--test-- "infix-equal-same-datatype-45"
		ea-result: equal? 1 1
		--assert ea-result = true
	--test-- "infix-equal-same-datatype-46"
		ea-result: equal? 1 0
		--assert ea-result = false
===end-group===
	
===start-group=== "= implcit cast"
	--test-- "infix-equal-implcit-cast-1"		--assert #"0" = 48
	--test-- "infix-equal-implcit-cast-2"		--assert 48 = #"0"
	--test-- "infix-equal-implcit-cast-3"		--assert #"^(2710)" = 10000
	--test-- "infix-equal-implcit-cast-4"		--assert #"^(010000)" = 65536
	--test-- "infix-equal-implcit-cast-5"
		ea-result: #"1" = 49
		--assert ea-result = true
	--test-- "infix-equal-implcit-cast-6"
		ea-result: equal? #"^(010000)" 10000
		--assert ea-result = false
===end-group===

===start-group=== "prefix-greater-same-datatype"
	--test-- "prefix-greater-same-datatype-1"	--assert not greater? 0 0
	--test-- "prefix-greater-same-datatype-2"	--assert  greater? 1 0
	--test-- "prefix-greater-same-datatype-3"	--assert not greater? 1 1
	--test-- "prefix-greater-same-datatype-4"	--assert not greater? FFFFFFFFh -1
	--test-- "prefix-greater-same-datatype-5"	--assert  greater? -1 FFFFFFFEh
	--test-- "prefix-greater-same-datatype-6"	--assert not greater? -2 FFFFFFFFh
	--test-- "prefix-greater-same-datatype-7"	--assert not greater? "a" "a"
	--test-- "prefix-greater-same-datatype-8"	--assert  greater? "b" "a"
	--test-- "prefix-greater-same-datatype-9"	--assert  greater? "è" "f"
	--test-- "prefix-greater-same-datatype-10"	--assert not greater? "A" "a"
	--test-- "prefix-greater-same-datatype-11"	--assert not greater? "a" "A"
	--test-- "prefix-greater-same-datatype-12"	--assert not greater? "abcdeè" "abcdeè"
	--test-- "prefix-greater-same-datatype-13"	--assert not greater? (next "abcdeè") next "abcdeè"
	--test-- "prefix-greater-same-datatype-14"	--assert not greater? (first "abcdeè") first "abcdeè"
	--test-- "prefix-greater-same-datatype-15"	--assert not greater? (last "abcdeè") last "abcdeè"
	--test-- "prefix-greater-same-datatype-16"	--assert not greater? "abcde^(2710)é^(010000)" "abcde^(2710)é^(010000)"
	--test-- "prefix-greater-same-datatype-17"	--assert not greater? "2345" next "12345"
	--test-- "prefix-greater-same-datatype-18"	--assert not greater? #"z" #"z"
	--test-- "prefix-greater-same-datatype-19"	--assert  greater? #"z" #"Z"
	--test-- "prefix-greater-same-datatype-20"	--assert  greater? #"è" #"e"
	--test-- "prefix-greater-same-datatype-21"	--assert not greater? #"^(010000)" #"^(010000)"
===end-group===
	
===start-group=== "prefix-greater-implcit-cast"
	--test-- "prefix-greater-implcit-cast-1"	--assert not greater? #"0" 48
	--test-- "prefix-greater-implcit-cast-2"	--assert not greater? 48 #"0"
	--test-- "prefix-greater-implcit-cast-3"	--assert not greater? #"^(2710)" 10000
	--test-- "prefix-greater-implcit-cast-4"	--assert not greater? #"^(010000)" 65536
===end-group===
	
===start-group=== "prefix-greater-equal-same-datatype"
	--test-- "prefix-greater-equal-same-datatype-1"		--assert  greater-or-equal? 0 0
	--test-- "prefix-greater-equal-same-datatype-2"		--assert  greater-or-equal? 1 0
	--test-- "prefix-greater-equal-same-datatype-3"		--assert  greater-or-equal? 1 1
	--test-- "prefix-greater-equal-same-datatype-4"		--assert  greater-or-equal? FFFFFFFFh -1
	--test-- "prefix-greater-equal-same-datatype-5"		--assert  greater-or-equal? -1 FFFFFFFEh
	--test-- "prefix-greater-equal-same-datatype-6"		--assert not greater-or-equal? -2 FFFFFFFFh
	--test-- "prefix-greater-equal-same-datatype-7"		--assert  greater-or-equal? "a" "a"
	--test-- "prefix-greater-equal-same-datatype-8"		--assert  greater-or-equal? "b" "a"
	--test-- "prefix-greater-equal-same-datatype-9"		--assert  greater-or-equal? "è" "f"
	--test-- "prefix-greater-equal-same-datatype-10"	--assert  greater-or-equal? "A" "a"
	--test-- "prefix-greater-equal-same-datatype-11"	--assert  greater-or-equal? "a" "A"
	--test-- "prefix-greater-equal-same-datatype-12"	--assert  greater-or-equal? "abcdeè" "abcdeè"
	--test-- "prefix-greater-equal-same-datatype-13"	--assert  greater-or-equal? (next "abcdeè") next "abcdeè"
	--test-- "prefix-greater-equal-same-datatype-14"	--assert  greater-or-equal? (first "abcdeè") first "abcdeè"
	--test-- "prefix-greater-equal-same-datatype-15"	--assert  greater-or-equal? (last "abcdeè") last "abcdeè"
	--test-- "prefix-greater-equal-same-datatype-16"	--assert  greater-or-equal? "abcde^(2710)é^(010000)" "abcde^(2710)é^(010000)"
	--test-- "prefix-greater-equal-same-datatype-17"	--assert  greater-or-equal? "2345" next "12345"
	--test-- "prefix-greater-equal-same-datatype-18"	--assert  greater-or-equal? #"z" #"z"
	--test-- "prefix-greater-equal-same-datatype-19"	--assert  greater-or-equal? #"z" #"Z"
	--test-- "prefix-greater-equal-same-datatype-20"	--assert  greater-or-equal? #"è" #"e"
	--test-- "prefix-greater-equal-same-datatype-21"	--assert  greater-or-equal? #"^(010000)" #"^(010000)"
===end-group===
	
===start-group=== "prefix-greater-implcit-cast"
	--test-- "prefix-greater-equal-implcit-cast-1"	--assert  greater-or-equal? #"0" 48
	--test-- "prefix-greater-equal-implcit-cast-2"	--assert  greater-or-equal? 48 #"0"
	--test-- "prefix-greater-equal-implcit-cast-3"	--assert  greater-or-equal? #"^(2710)" 10000
	--test-- "prefix-greater-equal-implcit-cast-4"	--assert  greater-or-equal? #"^(010000)" 65536
===end-group===
	
===start-group=== "infix-greater-same-datatype"
	--test-- "infix-greater-same-datatype-1"	--assert not 0 > 0
	--test-- "infix-greater-same-datatype-2"	--assert 1 > 0
	--test-- "infix-greater-same-datatype-3"	--assert not 1 > 1
	--test-- "infix-greater-same-datatype-4"	--assert not FFFFFFFFh > -1
	--test-- "infix-greater-same-datatype-5"	--assert -1 > FFFFFFFEh
	--test-- "infix-greater-same-datatype-6"	--assert not -2 > FFFFFFFFh
	--test-- "infix-greater-same-datatype-7"	--assert not "a" > "a"
	--test-- "infix-greater-same-datatype-8"	--assert "b" > "a"
	--test-- "infix-greater-same-datatype-9"	--assert "è" > "f"
	--test-- "infix-greater-same-datatype-10"	--assert not "A" > "a"
	--test-- "infix-greater-same-datatype-11"	--assert not "a" > "A"
	--test-- "infix-greater-same-datatype-12"	--assert not "abcdeè" > "abcdeè"
	--test-- "infix-greater-same-datatype-13"	--assert not (next "abcdeè") > next "abcdeè"
	--test-- "infix-greater-same-datatype-14"	--assert not (first "abcdeè") > first "abcdeè"
	--test-- "infix-greater-same-datatype-15"	--assert not (last "abcdeè") > last "abcdeè"
	--test-- "infix-greater-same-datatype-16"	--assert not "abcde^(2710)é^(010000)" > "abcde^(2710)é^(010000)"
	--test-- "infix-greater-same-datatype-17"	--assert not "2345" > next "12345"
	--test-- "infix-greater-same-datatype-18"	--assert not #"z" > #"z"
	--test-- "infix-greater-same-datatype-19"	--assert #"z" > #"Z"
	--test-- "infix-greater-same-datatype-20"	--assert #"è" > #"e"
	--test-- "infix-greater-same-datatype-21"	--assert not #"^(010000)" > #"^(010000)"
===end-group===
	
===start-group=== "infix-greater-implcit-cast"
	--test-- "infix-greater-implcit-cast-1"		--assert not #"0" > 48
	--test-- "infix-greater-implcit-cast-2"		--assert not 48 > #"0"
	--test-- "infix-greater-implcit-cast-3"		--assert not #"^(2710)" > 10000
	--test-- "infix-greater-implcit-cast-4"		--assert not #"^(010000)" > 65536
===end-group===
	
===start-group=== "infix-greater-equal-same-datatype"
	--test-- "infix-greater-equal-same-datatype-1"	--assert 0 >= 0
	--test-- "infix-greater-equal-same-datatype-2"	--assert 1 >= 0
	--test-- "infix-greater-equal-same-datatype-3"	--assert 1 >= 1
	--test-- "infix-greater-equal-same-datatype-4"	--assert FFFFFFFFh >= -1
	--test-- "infix-greater-equal-same-datatype-5"	--assert -1 >= FFFFFFFEh
	--test-- "infix-greater-equal-same-datatype-6"	--assert not -2 >= FFFFFFFFh
	--test-- "infix-greater-equal-same-datatype-7"	--assert "a" >= "a"
	--test-- "infix-greater-equal-same-datatype-8"	--assert "b" >= "a"
	--test-- "infix-greater-equal-same-datatype-9"	--assert "è" >= "f"
	--test-- "infix-greater-equal-same-datatype-10"	--assert "A" >= "a"
	--test-- "infix-greater-equal-same-datatype-11"	--assert "a" >= "A"
	--test-- "infix-greater-equal-same-datatype-12"	--assert "abcdeè" >= "abcdeè"
	--test-- "infix-greater-equal-same-datatype-13"	--assert (next "abcdeè") >= next "abcdeè"
	--test-- "infix-greater-equal-same-datatype-14"	--assert (first "abcdeè") >= first "abcdeè"
	--test-- "infix-greater-equal-same-datatype-15"	--assert (last "abcdeè") >= last "abcdeè"
	--test-- "infix-greater-equal-same-datatype-16"	--assert "abcde^(2710)é^(010000)" >= "abcde^(2710)é^(010000)"
	--test-- "infix-greater-equal-same-datatype-17"	--assert "2345" >= next "12345"
	--test-- "infix-greater-equal-same-datatype-18"	--assert #"z" >= #"z"
	--test-- "infix-greater-equal-same-datatype-19"	--assert #"z" >= #"Z"
	--test-- "infix-greater-equal-same-datatype-20"	--assert #"è" >= #"e"
	--test-- "infix-greater-equal-same-datatype-21"	--assert #"^(010000)" >= #"^(010000)"
===end-group===
	
===start-group=== "infix-greater-equal-implcit-cast"
	--test-- "infix-greater-equal-implcit-cast-1"	--assert #"0" >= 48
	--test-- "infix-greater-equal-implcit-cast-2"	--assert 48 >= #"0"
	--test-- "infix-greater-equal-implcit-cast-3"	--assert #"^(2710)" >= 10000
	--test-- "infix-greater-equal-implcit-cast-4"	--assert #"^(010000)" >= 65536
===end-group===
	
===start-group=== "infix-lesser-same-datatype"
	--test-- "infix-lesser-same-datatype-1"		--assert not 0 < 0
	--test-- "infix-lesser-same-datatype-2"		--assert 0 < 1
	--test-- "infix-lesser-same-datatype-3"		--assert not 1 < 1
	--test-- "infix-lesser-same-datatype-4"		--assert not FFFFFFFFh < -1
	--test-- "infix-lesser-same-datatype-5"		--assert FFFFFFFEh < -1
	--test-- "infix-lesser-same-datatype-6"		--assert not FFFFFFFFh < -2
	--test-- "infix-lesser-same-datatype-7"		--assert not "a" < "a"
	--test-- "infix-lesser-same-datatype-8"		--assert "a" < "b"
	--test-- "infix-lesser-same-datatype-9"		--assert "f" < "è"
	--test-- "infix-lesser-same-datatype-10"	--assert not "A" < "a"
	--test-- "infix-lesser-same-datatype-11"	--assert not "a" < "A"
	--test-- "infix-lesser-same-datatype-12"	--assert not "abcdeè" < "abcdeè"
	--test-- "infix-lesser-same-datatype-13"	--assert not (next "abcdeè") < next "abcdeè"
	--test-- "infix-lesser-same-datatype-14"	--assert not (first "abcdeè") < first "abcdeè"
	--test-- "infix-lesser-same-datatype-15"	--assert not (last "abcdeè") < last "abcdeè"
	--test-- "infix-lesser-same-datatype-16"	--assert not "abcde^(2710)é^(010000)" < "abcde^(2710)é^(010000)"
	--test-- "infix-lesser-same-datatype-17"	--assert not "2345" < next "12345"
	--test-- "infix-lesser-same-datatype-18"	--assert not #"z" < #"z"
	--test-- "infix-lesser-same-datatype-19"	--assert #"Z" < #"z"
	--test-- "infix-lesser-same-datatype-20"	--assert #"e" < #"è"
	--test-- "infix-lesser-same-datatype-21"	--assert not #"^(010000)" < #"^(010000)"
===end-group===
	
===start-group=== "infix-lesser-implcit-cast"
	--test-- "infix-lesser-implcit-cast-1"		--assert not #"0" < 48
	--test-- "infix-lesser-implcit-cast-2"		--assert not 48 < #"0"
	--test-- "infix-lesser-implcit-cast-3"		--assert not #"^(2710)" < 10000
	--test-- "infix-lesser-implcit-cast-4"		--assert not #"^(010000)" < 65536
===end-group===
	
===start-group=== "infix-lesser-equal-same-datatype"
	--test-- "infix-lesser-equal-same-datatype-1"	--assert 0 <= 0
	--test-- "infix-lesser-equal-same-datatype-2"	--assert 0 <= 1
	--test-- "infix-lesser-equal-same-datatype-3"	--assert 1 <= 1
	--test-- "infix-lesser-equal-same-datatype-4"	--assert FFFFFFFFh <= -1
	--test-- "infix-lesser-equal-same-datatype-5"	--assert FFFFFFFEh <= -1
	--test-- "infix-lesser-equal-same-datatype-6"	--assert not FFFFFFFFh <= -2
	--test-- "infix-lesser-equal-same-datatype-7"	--assert "a" <= "a"
	--test-- "infix-lesser-equal-same-datatype-8"	--assert "a" <= "b"
	--test-- "infix-lesser-equal-same-datatype-9"	--assert "f" <= "è"
	--test-- "infix-lesser-equal-same-datatype-10"	--assert "A" <= "a"
	--test-- "infix-lesser-equal-same-datatype-11"	--assert "a" <= "A"
	--test-- "infix-lesser-equal-same-datatype-12"	--assert "abcdeè" <= "abcdeè"
	--test-- "infix-lesser-equal-same-datatype-13"	--assert (next "abcdeè") <= next "abcdeè"
	--test-- "infix-lesser-equal-same-datatype-14"	--assert (first "abcdeè") <= first "abcdeè"
	--test-- "infix-lesser-equal-same-datatype-15"	--assert (last "abcdeè") <= last "abcdeè"
	--test-- "infix-lesser-equal-same-datatype-16"	--assert "abcde^(2710)é^(010000)" <= "abcde^(2710)é^(010000)"
	--test-- "infix-lesser-equal-same-datatype-17"	--assert "2345" <= next "12345"
	--test-- "infix-lesser-equal-same-datatype-18"	--assert #"z" <= #"z"
	--test-- "infix-lesser-equal-same-datatype-19"	--assert #"Z" <= #"z"
	--test-- "infix-lesser-equal-same-datatype-20"	--assert #"e" <= #"è"
	--test-- "infix-lesser-equal-same-datatype-21"	--assert #"^(010000)" <= #"^(010000)"	
===end-group===
	
===start-group=== "infix-lesser-equal-implcit-cast"
	--test-- "infix-lesser-equal-implcit-cast-1"	--assert #"0" <= 48
	--test-- "infix-lesser-equal-implcit-cast-2"	--assert 48 <= #"0"
	--test-- "infix-lesser-equal-implcit-cast-3"	--assert #"^(2710)" <= 10000
	--test-- "infix-lesser-equal-implcit-cast-4"	--assert #"^(010000)" <= 65536
===end-group===
	
===start-group=== "prefix-lesser-same-datatype"
	--test-- "prefix-lesser-same-datatype-1"	--assert not lesser? 0 0
	--test-- "prefix-lesser-same-datatype-2"	--assert  lesser? 0 1
	--test-- "prefix-lesser-same-datatype-3"	--assert not lesser? 1 1
	--test-- "prefix-lesser-same-datatype-4"	--assert not lesser? FFFFFFFFh -1
	--test-- "prefix-lesser-same-datatype-5"	--assert  lesser? FFFFFFFEh -1
	--test-- "prefix-lesser-same-datatype-6"	--assert not lesser? FFFFFFFFh -2
	--test-- "prefix-lesser-same-datatype-7"	--assert not lesser? "a" "a"
	--test-- "prefix-lesser-same-datatype-8"	--assert  lesser? "a" "b"
	--test-- "prefix-lesser-same-datatype-9"	--assert  lesser? "f" "è"
	--test-- "prefix-lesser-same-datatype-10"	--assert not lesser? "A" "a"
	--test-- "prefix-lesser-same-datatype-11"	--assert not lesser? "a" "A"
	--test-- "prefix-lesser-same-datatype-12"	--assert not lesser? "abcdeè" "abcdeè"
	--test-- "prefix-lesser-same-datatype-13"	--assert not lesser? (next "abcdeè") next "abcdeè"
	--test-- "prefix-lesser-same-datatype-14"	--assert not lesser? (first "abcdeè") first "abcdeè"
	--test-- "prefix-lesser-same-datatype-15"	--assert not lesser? (last "abcdeè") last "abcdeè"
	--test-- "prefix-lesser-same-datatype-16"	--assert not lesser? "abcde^(2710)é^(010000)" "abcde^(2710)é^(010000)"
	--test-- "prefix-lesser-same-datatype-17"	--assert not lesser? "2345" next "12345"
	--test-- "prefix-lesser-same-datatype-18"	--assert not lesser? #"z" #"z"
	--test-- "prefix-lesser-same-datatype-19"	--assert  lesser? #"Z" #"z"
	--test-- "prefix-lesser-same-datatype-20"	--assert  lesser? #"e" #"è"
	--test-- "prefix-lesser-same-datatype-21"	--assert not lesser? #"^(010000)" #"^(010000)"
===end-group===
	
===start-group=== "prefix-lesser-implcit-cast"
	--test-- "prefix-lesser-implcit-cast-1"		--assert not lesser? #"0" 48
	--test-- "prefix-lesser-implcit-cast-2"		--assert not lesser? 48 #"0"
	--test-- "prefix-lesser-implcit-cast-3"		--assert not lesser? #"^(2710)" 10000
	--test-- "prefix-lesser-implcit-cast-4"		--assert not lesser? #"^(010000)" 65536
===end-group===
	
===start-group=== "prefix-lesser-same-datatype"
	--test-- "prefix-lesser-equal-same-datatype-1"	--assert  lesser-or-equal? 0 0
	--test-- "prefix-lesser-equal-same-datatype-2"	--assert  lesser-or-equal? 0 1
	--test-- "prefix-lesser-equal-same-datatype-3"	--assert  lesser-or-equal? 1 1
	--test-- "prefix-lesser-equal-same-datatype-4"	--assert  lesser-or-equal? FFFFFFFFh -1
	--test-- "prefix-lesser-equal-same-datatype-5"	--assert  lesser-or-equal? FFFFFFFEh -1
	--test-- "prefix-lesser-equal-same-datatype-6"	--assert not lesser-or-equal? FFFFFFFFh -2
	--test-- "prefix-lesser-equal-same-datatype-7"	--assert  lesser-or-equal? "a" "a"
	--test-- "prefix-lesser-equal-same-datatype-8"	--assert  lesser-or-equal? "a" "b"
	--test-- "prefix-lesser-equal-same-datatype-9"	--assert  lesser-or-equal? "f" "è"
	--test-- "prefix-lesser-equal-same-datatype-10"	--assert  lesser-or-equal? "A" "a"
	--test-- "prefix-lesser-equal-same-datatype-11"	--assert  lesser-or-equal? "a" "A"
	--test-- "prefix-lesser-equal-same-datatype-12"	--assert  lesser-or-equal? "abcdeè" "abcdeè"
	--test-- "prefix-lesser-equal-same-datatype-13"	--assert  lesser-or-equal? (next "abcdeè") next "abcdeè"
	--test-- "prefix-lesser-equal-same-datatype-14"	--assert  lesser-or-equal? (first "abcdeè") first "abcdeè"
	--test-- "prefix-lesser-equal-same-datatype-15"	--assert  lesser-or-equal? (last "abcdeè") last "abcdeè"
	--test-- "prefix-lesser-equal-same-datatype-16"	--assert  lesser-or-equal? "abcde^(2710)é^(010000)" "abcde^(2710)é^(010000)"
	--test-- "prefix-lesser-equal-same-datatype-17"	--assert  lesser-or-equal? "2345" next "12345"
	--test-- "prefix-lesser-equal-same-datatype-18"	--assert  lesser-or-equal? #"z" #"z"
	--test-- "prefix-lesser-equal-same-datatype-19"	--assert  lesser-or-equal? #"Z" #"z"
	--test-- "prefix-lesser-equal-same-datatype-20"	--assert  lesser-or-equal? #"e" #"è"
	--test-- "prefix-lesser-equal-same-datatype-21"	--assert  lesser-or-equal? #"^(010000)" #"^(010000)"
===end-group===
		
===start-group=== "prefix-lesser-implcit-cast"
	--test-- "prefix-lesser-equal-implcit-cast-1"	--assert  lesser-or-equal? #"0" 48
	--test-- "prefix-lesser-equal-implcit-cast-2"	--assert  lesser-or-equal? 48 #"0"
	--test-- "prefix-lesser-equal-implcit-cast-3"	--assert  lesser-or-equal? #"^(2710)" 10000
	--test-- "prefix-lesser-equal-implcit-cast-4"	--assert  lesser-or-equal? #"^(010000)" 65536
===end-group===
	
===start-group=== "prefix-not-equal-same-datatype"
	--test-- "prefix-not-equal-same-datatype-1"		--assert not-equal? 0 1
	--test-- "prefix-not-equal-same-datatype-2"		--assert not-equal? 1 0
	--test-- "prefix-not-equal-same-datatype-3"		--assert not-equal? FFFFFFFEh -1
	--test-- "prefix-not-equal-same-datatype-4"		--assert not-equal? [] [[]]
	--test-- "prefix-not-equal-same-datatype-5"		--assert not-equal? [a] [b]
	--test-- "prefix-not-equal-same-datatype-6"		--assert not-equal? [A] [b]
	--test-- "prefix-not-equal-same-datatype-7"		--assert not-equal? ['a] ['b]
	--test-- "prefix-not-equal-same-datatype-8"		--assert not-equal? [a:] [b:]
	--test-- "prefix-not-equal-same-datatype-9"		--assert not-equal? [:a] [b:]
	--test-- "prefix-not-equal-same-datatype-10"	--assert not-equal? [abcde] [abcdef]
	--test-- "prefix-not-equal-same-datatype-11"	--assert not-equal? [a b c d] [a c d]
	--test-- "prefix-not-equal-same-datatype-12"	--assert not-equal? [b c d] next [a b c d e]
	--test-- "prefix-not-equal-same-datatype-13"	--assert not-equal? [b c d] (next [a b c d e])
	--test-- "prefix-not-equal-same-datatype-14"	--assert not-equal? "a" "b"
	--test-- "prefix-not-equal-same-datatype-15"	--assert not-equal? "a" "B"
	--test-- "prefix-not-equal-same-datatype-16"	--assert not-equal? "abcdeè" "abcdeèf"
	--test-- "prefix-not-equal-same-datatype-17"	--assert not-equal? (next "abcdeè") next "abcdeèf"
	--test-- "prefix-not-equal-same-datatype-18"	--assert not-equal? (first "abcdeè") first "bcdeè"
	--test-- "prefix-not-equal-same-datatype-19"	--assert not-equal? (last "abcdeè") last "abcdeèf"
	--test-- "prefix-not-equal-same-datatype-20"	--assert not-equal? "abcde^(2710)é^(010000)" "abcde^(2711)é^(010000)"
	--test-- "prefix-not-equal-same-datatype-21"	--assert not-equal? [d] back tail [a b c d e]
	--test-- "prefix-not-equal-same-datatype-22"	--assert not-equal? "2345" next "123456"
	--test-- "prefix-not-equal-same-datatype-23"	--assert not-equal? #"z" #"Z"
	--test-- "prefix-not-equal-same-datatype-24"	--assert not not-equal? #"z" #"z"
	--test-- "prefix-not-equal-same-datatype-25"	--assert not not-equal? #"e" #"e"
	--test-- "prefix-not-equal-same-datatype-26"	--assert not-equal? #"^(010000)" #"^(010001)"
	--test-- "prefix-not-equal-same-datatype-27"	--assert not-equal? true false
	--test-- "prefix-not-equal-same-datatype-28"	--assert not-equal? false true
	--test-- "prefix-not-equal-same-datatype-29"	--assert not not-equal? false false
	--test-- "prefix-not-equal-same-datatype-30"	--assert not not-equal? true true
	--test-- "prefix-not-equal-same-datatype-31"	--assert not-equal? none "a"
	--test-- "prefix-not-equal-same-datatype-32"	--assert not-equal? 'a 'b
	--test-- "prefix-not-equal-same-datatype-33"	--assert not-equal? 'a 'B
	--test-- "prefix-not-equal-same-datatype-34"	--assert not-equal? (first [a]) first [b]
	--test-- "prefix-not-equal-same-datatype-35"	--assert not-equal? 'a first [B]
	--test-- "prefix-not-equal-same-datatype-36"	--assert not-equal? 'a first ['b]
	--test-- "prefix-not-equal-same-datatype-37"	--assert not-equal? 'a first [:b]
	--test-- "prefix-not-equal-same-datatype-38"	--assert not-equal? 'a first [b:]
	--test-- "prefix-not-equal-same-datatype-39"	--assert not-equal? (first [a:]) first [z:]
	--test-- "prefix-not-equal-same-datatype-40"	--assert not-equal? (first [:a]) first [:z]
	--test-- "prefix-not-equal-same-datatype-41"	--assert not-equal? [a b c d e] first [[b c d e]]
	--test-- "prefix-not-equal-same-datatype-42"
		ea-result: 1 <> 1
		--assert ea-result = false
	--test-- "prefix-not-equal-same-datatype-43"
		ea-result: 1 <> 0
		--assert ea-result = true
	--test-- "prefix-not-equal-same-datatype-44"
		ea-result: not-equal? 1 1
		--assert ea-result = false
	--test-- "prefix-not-equal-same-datatype-45"
		ea-result: not-equal? 1 0
		--assert ea-result = true
===end-group===
	
===start-group=== "prefix-not-equal-implcit-cast"
	--test-- "prefix-not-equal-implcit-cast-1"		--assert not-equal? #"0" 49
	--test-- "prefix-not-equal-implcit-cast-2"		--assert not-equal? 48 #"1"
	--test-- "prefix-not-equal-implcit-cast-3"		--assert not-equal? #"^(2711)" 10000
	--test-- "prefix-not-equal-implcit-cast-4"		--assert not-equal? #"^(010001)" 65536
	--test-- "prefix-not-equal-implcit-cast-5"
		ea-result: #"1" <> 49
		--assert ea-result = false
	--test-- "prefix-not-equal-implcit-cast-6"
		ea-result: not-equal? #"^(01000)" 10000
		--assert ea-result = true
===end-group===

===start-group=== "infix-not-equal-same-datatype"
	--test-- "infix-not-equal-same-datatype-1"		--assert 0 <> 1
	--test-- "infix-not-equal-same-datatype-2"		--assert 1 <> 0
	--test-- "infix-not-equal-same-datatype-3"		--assert FFFFFFFEh <> -1
	--test-- "infix-not-equal-same-datatype-4"		--assert [] <> [[]]
	--test-- "infix-not-equal-same-datatype-5"		--assert [a] <> [b]
	--test-- "infix-not-equal-same-datatype-6"		--assert [A] <> [b]
	--test-- "infix-not-equal-same-datatype-7"		--assert ['a] <> ['b]
	--test-- "infix-not-equal-same-datatype-8"		--assert [a:] <> [b:]
	--test-- "infix-not-equal-same-datatype-9"		--assert [:a] <> [b:]
	--test-- "infix-not-equal-same-datatype-10"		--assert [abcde] <> [abcdef]
	--test-- "infix-not-equal-same-datatype-11"		--assert [a b c d] <> [a c d]
	--test-- "infix-not-equal-same-datatype-12"		--assert [b c d] <> next [a b c d e]
	--test-- "infix-not-equal-same-datatype-13"		--assert [b c d] <> (next [a b c d e])
	--test-- "infix-not-equal-same-datatype-14"		--assert "a" <> "b"
	--test-- "infix-not-equal-same-datatype-15"		--assert "a" <> "B"
	--test-- "infix-not-equal-same-datatype-16"		--assert "abcdeè" <> "abcdeèf"
	--test-- "infix-not-equal-same-datatype-17"		--assert (next "abcdeè") <> next "abcdeèf"
	--test-- "infix-not-equal-same-datatype-18"		--assert (first "abcdeè") <> first "bcdeè"
	--test-- "infix-not-equal-same-datatype-19"		--assert (last "abcdeè") <> last "abcdeèf"
	--test-- "infix-not-equal-same-datatype-20"		--assert "abcde^(2710)é^(010000)" <> "abcde^(2711)é^(010000)"
	--test-- "infix-not-equal-same-datatype-21"		--assert [d] <> back tail [a b c d e]
	--test-- "infix-not-equal-same-datatype-22"		--assert "2345" <> next "123456"
	--test-- "infix-not-equal-same-datatype-23"		--assert #"z" <> #"Z"
	--test-- "infix-not-equal-same-datatype-24"		--assert not #"z" <> #"z"
	--test-- "infix-not-equal-same-datatype-25"		--assert not #"e" <> #"e"
	--test-- "infix-not-equal-same-datatype-26"		--assert #"^(010000)" <> #"^(010001)"
	--test-- "infix-not-equal-same-datatype-27"		--assert true <> false
	--test-- "infix-not-equal-same-datatype-28"		--assert false <> true
	--test-- "infix-not-equal-same-datatype-29"		--assert not false <> false
	--test-- "infix-not-equal-same-datatype-30"		--assert not true <> true
	--test-- "infix-not-equal-same-datatype-31"		--assert none <> "a"
	--test-- "infix-not-equal-same-datatype-32"		--assert 'a <> 'b
	--test-- "infix-not-equal-same-datatype-33"		--assert 'a <> 'B
	--test-- "infix-not-equal-same-datatype-34"		--assert (first [a]) <> first [b]
	--test-- "infix-not-equal-same-datatype-35"		--assert 'a <> first [B]
	--test-- "infix-not-equal-same-datatype-36"		--assert 'a <> first ['b]
	--test-- "infix-not-equal-same-datatype-37"		--assert 'a <> first [:b]
	--test-- "infix-not-equal-same-datatype-38"		--assert 'a <> first [b:]
	--test-- "infix-not-equal-same-datatype-39"		--assert (first [a:]) <> first [z:]
	--test-- "infix-not-equal-same-datatype-40"		--assert (first [:a]) <> first [:z]
	--test-- "infix-not-equal-same-datatype-41"		--assert [a b c d e] <> first [[b c d e]]
	--test-- "infix-not-equal-same-datatype-42"
		ea-result: 1 <> 1
		--assert ea-result = false
	--test-- "infix-not-equal-same-datatype-43"
		ea-result: 1 <> 0
		--assert ea-result = true
	--test-- "infix-not-equal-same-datatype-44"
		ea-result: not-equal? 1 1
		--assert ea-result = false
	--test-- "infix-not-equal-same-datatype-45"
		ea-result: not-equal? 1 0
		--assert ea-result = true
===end-group===

===start-group=== "infix-not-equal-implcit-cast"
	--test-- "infix-not-equal-implcit-cast-1"	--assert #"0" <> 49
	--test-- "infix-not-equal-implcit-cast-2"	--assert 48 <> #"1"
	--test-- "infix-not-equal-implcit-cast-3"	--assert #"^(2711)" <> 10000
	--test-- "infix-not-equal-implcit-cast-4"	--assert #"^(010001)" <> 65536
	--test-- "infix-not-equal-implcit-cast-5"
		ea-result: #"1" <> 49
		--assert ea-result = false
	--test-- "infix-not-equal-implcit-cast-6"
		ea-result: not-equal? #"^(01000)" 10000
		--assert ea-result = true
===end-group===

===start-group=== "same-datatype"
	--test-- "same-datatype-1"	--assert same? 0 0
	--test-- "same-datatype-2"	--assert same? 1 1
	--test-- "same-datatype-3"	--assert same? FFFFFFFFh -1
	--test-- "same-datatype-4"	--assert not same? [] []
	--test-- "same-datatype-5"	--assert not same? [a] [a]
	--test-- "same-datatype-6"	--assert not same? [A] [a]
	--test-- "same-datatype-7"	--assert not same? ['a] [a]
	--test-- "same-datatype-8"	--assert not same? [a:] [a]
	--test-- "same-datatype-9"	--assert not same? [:a] [a]
	--test-- "same-datatype-10"	--assert not same? [:a] [a:]
	--test-- "same-datatype-11"	--assert not same? [abcde] [abcde]
	--test-- "same-datatype-12"	--assert not same? [a b c d] [a b c d]
	--test-- "same-datatype-13"	--assert not same? [b c d] next [a b c d]
	--test-- "same-datatype-14"	--assert not same? [b c d] (next [a b c d])
	--test-- "same-datatype-15"	--assert not same? "a" "a"
	--test-- "same-datatype-16"	--assert not same? "a" "A"
	--test-- "same-datatype-17"	--assert not same? "abcdeè" "abcdeè"
	--test-- "same-datatype-18"	--assert not same? (next "abcdeè") next "abcdeè"
	--test-- "same-datatype-19"	--assert same? (first "abcdeè") first "abcdeè"
	--test-- "same-datatype-20"	--assert same? (last "abcdeè") last "abcdeè"
	--test-- "same-datatype-21"	--assert not same? "abcde^(2710)é^(010000)" "abcde^(2710)é^(010000)"
	--test-- "same-datatype-22"	--assert not same? [d] back tail [a b c d]
	--test-- "same-datatype-23"	--assert not same? "2345" next "12345"
	--test-- "same-datatype-24"	--assert same? #"z" #"z"
	--test-- "same-datatype-25"	--assert not same? #"z" #"Z"
	--test-- "same-datatype-26"	--assert not same? #"e" #"è"
	--test-- "same-datatype-27"	--assert same? #"^(010000)" #"^(010000)"
	--test-- "same-datatype-28"	--assert same? true true
	--test-- "same-datatype-29"	--assert same? true #[true]
	--test-- "same-datatype-30"	--assert same? none #[none]
	--test-- "same-datatype-31"	--assert same? none none
	--test-- "same-datatype-32"	--assert same? 'true first [true]
	--test-- "same-datatype-33"	--assert same? first [#[true]] #[true]
	--test-- "same-datatype-34"	--assert same? false false
	--test-- "same-datatype-35"	--assert not same? false true
	--test-- "same-datatype-36"	--assert not same? true false
	--test-- "same-datatype-37"	--assert same? 'a 'a
	--test-- "same-datatype-38"	--assert not same? 'a 'A
	--test-- "same-datatype-39"	--assert not same? [a b c d e] first [[a b c d e]]
	--test-- "same-datatype-40"	--assert not same? 0.0 -0.0
	--test-- "same-datatype-41"
		ea-result: same? 1 1
		--assert ea-result = true
	--test-- "same-datatype-42"
		ea-result: same? 1 0
		--assert ea-result = false
===end-group===

===start-group=== "same-implcit-cast"
	--test-- "same-implcit-cast-1"	--assert not same? #"0" 48
	--test-- "same-implcit-cast-2"	--assert not same? 48 #"0"
	--test-- "same-implcit-cast-3"	--assert not same? #"^(2710)" 10000
	--test-- "same-implcit-cast-4"	--assert not same? #"^(010000)" 65536
	--test-- "same-implcit-cast-5"
		ea-result: #"1" == 49
		--assert ea-result = false
	--test-- "same-implcit-cast-6"
		ea-result: same? #"^(010000)" 10000
		--assert ea-result = false
	--test-- "same-implcit-cast-7"
		a: b: 1
		--assert same? a b
	--test-- "same-implcit-cast-8"
		a: b: "abcde"
		--assert same? a b
===end-group===

===start-group=== "infix-strict-equal-same-datatype"
	--test-- "infix-strict-equal-same-datatype-1"	--assert 0 == 0
	--test-- "infix-strict-equal-same-datatype-2"	--assert 1 == 1
	--test-- "infix-strict-equal-same-datatype-3"	--assert FFFFFFFFh == -1
	--test-- "infix-strict-equal-same-datatype-4"	--assert [] == []
	--test-- "infix-strict-equal-same-datatype-5"	--assert [a] == [a]
	--test-- "infix-strict-equal-same-datatype-6"	--assert not [A] == [a]
	--test-- "infix-strict-equal-same-datatype-7"	--assert not ['a] == [a]
	--test-- "infix-strict-equal-same-datatype-8"	--assert not [a:] == [a]
	--test-- "infix-strict-equal-same-datatype-9"	--assert not [:a] == [a]
	--test-- "infix-strict-equal-same-datatype-10"	--assert not [:a] == [a:]
	--test-- "infix-strict-equal-same-datatype-11"	--assert [abcde] == [abcde]
	--test-- "infix-strict-equal-same-datatype-12"	--assert [a b c d] == [a b c d]
	--test-- "infix-strict-equal-same-datatype-13"	--assert [b c d] == next [a b c d]
	--test-- "infix-strict-equal-same-datatype-14"	--assert [b c d] == (next [a b c d])
	--test-- "infix-strict-equal-same-datatype-15"	--assert "a" == "a"
	--test-- "infix-strict-equal-same-datatype-16"	--assert not "a" == "A"
	--test-- "infix-strict-equal-same-datatype-17"	--assert "abcdeè" == "abcdeè"
	--test-- "infix-strict-equal-same-datatype-18"	--assert (next "abcdeè") == next "abcdeè"
	--test-- "infix-strict-equal-same-datatype-19"	--assert (first "abcdeè") == first "abcdeè"
	--test-- "infix-strict-equal-same-datatype-20"	--assert (last "abcdeè") == last "abcdeè"
	--test-- "infix-strict-equal-same-datatype-21"	--assert "abcde^(2710)é^(010000)" == "abcde^(2710)é^(010000)"
	--test-- "infix-strict-equal-same-datatype-22"	--assert [d] == back tail [a b c d]
	--test-- "infix-strict-equal-same-datatype-23"	--assert "2345" == next "12345"
	--test-- "infix-strict-equal-same-datatype-24"	--assert #"z" == #"z"
	--test-- "infix-strict-equal-same-datatype-25"	--assert not #"z" == #"Z"
	--test-- "infix-strict-equal-same-datatype-26"	--assert not #"e" == #"è"
	--test-- "infix-strict-equal-same-datatype-27"	--assert #"^(010000)" == #"^(010000)"
	--test-- "infix-strict-equal-same-datatype-28"	--assert true == true
	--test-- "infix-strict-equal-same-datatype-29"	--assert false == false
	--test-- "infix-strict-equal-same-datatype-30"	--assert not false == true
	--test-- "infix-strict-equal-same-datatype-31"	--assert not true == false
	--test-- "infix-strict-equal-same-datatype-32"	--assert none == none
	--test-- "infix-strict-equal-same-datatype-33"	--assert 'a == 'a
	--test-- "infix-strict-equal-same-datatype-34"	--assert [a b c d e] == first [[a b c d e]]
	--test-- "infix-strict-equal-same-datatype-35"
		ea-result: 1 == 1
		--assert ea-result = true
	--test-- "infix-strict-equal-same-datatype-36"
		ea-result: 1 == 0
		--assert ea-result = false
	--test-- "infix-strict-equal-same-datatype-37"
		ea-result: strict-equal? 1 1
		--assert ea-result = true
	--test-- "infix-strict-equal-same-datatype-38"
		ea-result: strict-equal? 1 0
		--assert ea-result = false
	--test-- "infix-strict-equal-same-datatype-39"	--assert 0.0 == -0.0
	--test-- "infix-strict-equal-same-datatype-40"	--assert not 1 == 1.0
===end-group===

===start-group=== "infix-strict-equal-implcit-cast"
	--test-- "infix-strict-equal-implcit-cast-1"	--assert not #"0" == 48
	--test-- "infix-strict-equal-implcit-cast-2"	--assert not 48 == #"0"
	--test-- "infix-strict-equal-implcit-cast-3"	--assert not #"^(2710)" == 10000
	--test-- "infix-strict-equal-implcit-cast-4"	--assert not #"^(010000)" == 65536
	--test-- "infix-strict-equal-implcit-cast-5"
		ea-result: #"1" == 49
		--assert ea-result = false
	--test-- "infix-strict-equal-implcit-cast-6"
		ea-result: strict-equal? #"^(010000)" 10000
		--assert ea-result = false
	--test-- "infix-strict-equal-implcit-cast-7"
		a: b: 1
		--assert a == b
	--test-- "infix-strict-equal-implcit-cast-8"
		a: b: "abcde"
		--assert a == b
===end-group===

===start-group=== "prefix-strict-equal-same-datatype"
	--test-- "prefix-strict-equal-same-datatype-1"	--assert strict-equal? 0 0
	--test-- "prefix-strict-equal-same-datatype-2"	--assert strict-equal? 1 1
	--test-- "prefix-strict-equal-same-datatype-3"	--assert strict-equal? FFFFFFFFh -1
	--test-- "prefix-strict-equal-same-datatype-4"	--assert strict-equal? [] []
	--test-- "prefix-strict-equal-same-datatype-5"	--assert strict-equal? [a] [a]
	--test-- "prefix-strict-equal-same-datatype-6"	--assert not strict-equal? [A] [a]
	--test-- "prefix-strict-equal-same-datatype-7"	--assert not strict-equal? ['a] [a]
	--test-- "prefix-strict-equal-same-datatype-8"	--assert not strict-equal? [a:] [a]
	--test-- "prefix-strict-equal-same-datatype-9"	--assert not strict-equal? [:a] [a]
	--test-- "prefix-strict-equal-same-datatype-10"	--assert not strict-equal? [:a] [a:]
	--test-- "prefix-strict-equal-same-datatype-11"	--assert strict-equal? [abcde] [abcde]
	--test-- "prefix-strict-equal-same-datatype-12"	--assert strict-equal? [a b c d] [a b c d]
	--test-- "prefix-strict-equal-same-datatype-13"	--assert strict-equal? [b c d] next [a b c d]
	--test-- "prefix-strict-equal-same-datatype-14"	--assert strict-equal? [b c d] (next [a b c d])
	--test-- "prefix-strict-equal-same-datatype-15"	--assert strict-equal? "a" "a"
	--test-- "prefix-strict-equal-same-datatype-16"	--assert not strict-equal? "a" "A"
	--test-- "prefix-strict-equal-same-datatype-17"	--assert strict-equal? "abcdeè" "abcdeè"
	--test-- "prefix-strict-equal-same-datatype-18"	--assert strict-equal? (next "abcdeè") next "abcdeè"
	--test-- "prefix-strict-equal-same-datatype-19"	--assert strict-equal? (first "abcdeè") first "abcdeè"
	--test-- "prefix-strict-equal-same-datatype-20"	--assert strict-equal? (last "abcdeè") last "abcdeè"
	--test-- "prefix-strict-equal-same-datatype-21"	--assert strict-equal? "abcde^(2710)é^(010000)" "abcde^(2710)é^(010000)"
	--test-- "prefix-strict-equal-same-datatype-22"	--assert strict-equal? [d] back tail [a b c d]
	--test-- "prefix-strict-equal-same-datatype-23"	--assert strict-equal? "2345" next "12345"
	--test-- "prefix-strict-equal-same-datatype-24"	--assert strict-equal? #"z" #"z"
	--test-- "prefix-strict-equal-same-datatype-25"	--assert not strict-equal? #"z" #"Z"
	--test-- "prefix-strict-equal-same-datatype-26"	--assert not strict-equal? #"e" #"è"
	--test-- "prefix-strict-equal-same-datatype-27"	--assert strict-equal? #"^(010000)" #"^(010000)"
	--test-- "prefix-strict-equal-same-datatype-28"	--assert strict-equal? true true
	--test-- "prefix-strict-equal-same-datatype-29"	--assert strict-equal? false false
	--test-- "prefix-strict-equal-same-datatype-30"	--assert not strict-equal? false true
	--test-- "prefix-strict-equal-same-datatype-31"	--assert not strict-equal? true false
	--test-- "prefix-strict-equal-same-datatype-32"	--assert strict-equal? none none
	--test-- "prefix-strict-equal-same-datatype-33"	--assert strict-equal? 'a 'a
	--test-- "prefix-strict-equal-same-datatype-34"	--assert strict-equal? [a b c d e] first [[a b c d e]]
	--test-- "prefix-strict-equal-same-datatype-35"
		ea-result: 1 == 1
		--assert ea-result = true
	--test-- "prefix-strict-equal-same-datatype-36"
		ea-result: 1 == 0
		--assert ea-result = false
	--test-- "prefix-strict-equal-same-datatype-37"
		ea-result: strict-equal? 1 1
		--assert ea-result = true
	--test-- "prefix-strict-equal-same-datatype-38"
		ea-result: strict-equal? 1 0
		--assert ea-result = false
	--test-- "prefix-strict-equal-same-datatype-39"	--assert strict-equal? 0.0 -0.0
	--test-- "prefix-strict-equal-same-datatype-40"	--assert not strict-equal? 1 1.0
===end-group===

===start-group=== "prefix-strict-equal-implcit-cast"
	--test-- "prefix-strict-equal-implcit-cast-1"	--assert not strict-equal? #"0" 48
	--test-- "prefix-strict-equal-implcit-cast-2"	--assert not strict-equal? 48 #"0"
	--test-- "prefix-strict-equal-implcit-cast-3"	--assert not strict-equal? #"^(2710)" 10000
	--test-- "prefix-strict-equal-implcit-cast-4"	--assert not strict-equal? #"^(010000)" 65536
	--test-- "prefix-strict-equal-implcit-cast-5"
		ea-result: #"1" == 49
		--assert ea-result = false
	--test-- "prefix-strict-equal-implcit-cast-6"
		ea-result: strict-equal? #"^(010000)" 10000
		--assert ea-result = false
	--test-- "prefix-strict-equal-implcit-cast-7"
		a: b: 1
		--assert strict-equal? a b
	--test-- "prefix-strict-equal-implcit-cast-8"
		a: b: "abcde"
		--assert strict-equal? a b
===end-group===


===start-group=== "append"
  --test-- "append-1"
  --assert 6 = last append [1 2 3 4 5] 6
  --test-- "append-2"
  --assert 6 = last append [1 2 3 4] [5 6]
  --assert 4 = fourth append [1 2 3 4] [5 6]
  --assert 5 = fifth append [1 2 3 4] [5 6]
  --test-- "append-3"
  --assert 55 = last append "12345" "67"
  --test-- "append-4"
  --assert 233 = last append "abcde" "é" ;; utf-8 C3 A9
  --test-- "append-5"
  --assert 49 = last append "abcdeé" "1" ;; utf-8 C3 A9
  --test-- "append-6"
  --assert 10000 = last append "abcde" "✐"
  --test-- "append-7"
  --assert 48 = last append "abcde^(2710)" "0"
  --test-- "append-8"
  --assert 10000 = last append "abcdeé" "^(2710)"
  --test-- "append-9"
  --assert 233 = last append "abcde^(2710)" "é"
  --test-- "append-10"
  --assert 65536 = last append "abcde" "^(010000)"   
  --test-- "append-11"
  --assert 48 = last append "abcde^(010000)" "0"
  --test-- "append-12"
  --assert 65536 = last append "abcde^(2710)é" "^(010000)" 
  
  --test-- "append-13"
	blk: make block! 1
	append blk 'x/y
	append/only blk  'r/s
	--assert "[x y r/s]" = mold blk

  --test-- "append-14"
	blk: [1 2]
	append/dup/part blk [4 5 6] 3 2
	--assert "[1 2 4 5 4 5 4 5]" = mold blk
	
  --test-- "append-15"
	blk: [1 2]
	append/dup/part blk [4 5 6] 2 3
	--assert "[1 2 4 5 6 4 5 6]" = mold blk	

  --test-- "append-16"
	str: "12"
	append/dup/part str "456" 3 2 
	--assert str = "12454545"

  --test-- "append-17"
	str: "12"
	append/part/dup str "456" 3 2 
	--assert str = "12456456"

  --test-- "append-18"
	str: "12"
	append/part/dup str ["4" #"5" #"6" 7 a 'b x] 6 2
	--assert str = "124567ab4567ab"
===end-group===

===start-group=== "append/dup"
	
	--test-- "append/dup1"
		ad1-s: copy ""
		append/dup ad1-s #" " 10
	--assert 10 = length? ad1-s
	--assert "          " = ad1-s
	
	--test-- "append/dup2"
		ad2-s: copy ""
		append/dup ad2-s #"1" 9

	--assert 9 = length? ad2-s
	--assert "111111111" = ad2-s
	
	--test-- "append/dup2"
		ad3-s: copy []
		append/dup ad3-s 1 8
	--assert 8 = length? ad3-s
	--assert [1 1 1 1 1 1 1 1] = ad3-s
	
	--test-- "append/dup4"
		ad4-s: copy " "
		append/dup ad4-s #" " 10
	--assert 11 = length? ad4-s
	--assert "           " = ad4-s
;; this test is premature before the introduction of a garbage collector
comment { 	
	--test-- "append/dup5"
		ad5-s: copy " "
		append/dup ad5-s #" " 2147483647
	--assert 2147483647 = length? ad5-s
}
===end-group===

;; these tests are premature before the introduction of a garbage collector
comment { 
===start-group=== "big strings" 
	
	--test-- "bg1"
		bg1-s: copy ""
		loop 2147483647 [
			append bg1-s #"a"
		]
	--assert 2147483647 = length? bg1-s
		clear bg1-s
	
	--test-- "bg2"
		bg2-s: copy ""
		loop 2147483647 [
			append bg2-s #"é"
		]
	--assert 2147483647 = length? bg2-s
		clear bg2-s
	
	--test-- "bg3"
		bg3-s: copy ""
		loop 2147483647 [
			append bg3-s #"✐"
		]
	--assert 2147483647 = length? bg3-s
		clear bg3-s
	
		--test-- "bg4"
		bg4-s: copy ""
		loop 2147483647 [
			append bg4-s #"^(2710)"
		]
	--assert 2147483647 = length? bg4-s
		clear bg4-s
		
===end-group===
}



===start-group=== "insert"
	--test-- "insert-1"
	--assert 6 = first head insert [1 2 3 4 5] 6
	--assert [1 2 3 4 5] = insert [1 2 3 4 5] 6
	--test-- "insert-2"
	--assert 5 = first head insert [1 2 3 4] [5 6]
	--assert [1 2 3 4] = insert [1 2 3 4] [5 6]
	--assert [5 6 1 2 3 4] = head insert [1 2 3 4] [5 6]
	--test-- "insert-3"
	--assert "12345" = insert "12345" "67"
	--assert "6712345" = head insert "12345" "67"
	--test-- "insert-4"
	--assert "abcdeé" = head insert tail "abcde" "é"   	;; utf-8 C3 A9
	--assert "é" = back insert tail "abcde" "é" 			;; utf-8 C3 A9
	--assert #"é" = first back insert tail "abcde" "é"
	--test-- "insert-5"
	--assert 49 = first head insert "abcdeé" "1" ;; utf-8 C3 A9
	--test-- "insert-6"
	--assert 10000 = first head insert "abcde" "✐"
	--assert 10000 = first head insert "abcde" #"✐"
	--test-- "insert-7"
	--assert #"0" = first head insert "abcde^(2710)" "0"
	--assert #"0" = first head insert "abcde^(2710)" #"0"
	--assert #"^(2710)" = last insert "abcde^(2710)" "0"
	--test-- "insert-8"
	--assert 10000 = first head insert "abcdeé" "^(2710)"
	--assert 10000 = first head insert "abcdeé" #"^(2710)"
	--test-- "insert-9"
	--assert 233 = first head insert "abcde^(2710)" "é"
	--assert 233 = first head insert "abcde^(2710)" #"é"
	--test-- "insert-10"
	--assert 65536 = first head insert "abcde" "^(010000)"
	--assert 65536 = first head insert "abcde" #"^(010000)" 
	--test-- "insert-11"
	--assert 48 = first head insert "abcde^(010000)" "0"
	--assert 48 = first head insert "abcde^(010000)" #"0"
	--test-- "insert-12"
	--assert 65536 = first head insert "abcde^(2710)é" "^(010000)" 
	--assert 65536 = first head insert "abcde^(2710)é" #"^(010000)"
	--test-- "insert-13"
		blk: make block! 1
		insert blk 'x/y
		insert/only blk 'r/s
	--assert "[r/s x y]" = mold blk
	--test-- "insert-14"
		blk: [1 2]
		insert/dup/part blk [4 5 6] 3 2
	--assert "[4 5 4 5 4 5 1 2]" = mold blk
	--test-- "insert-15"
		blk: [1 2]
		insert/dup/part blk [4 5 6] 2 3
	--assert "[4 5 6 4 5 6 1 2]" = mold blk	
	--test-- "insert-16"
		str: "12"
		insert/dup/part str "456" 3 2 
	--assert str = "45454512"
	--test-- "insert-17"
		str: "12"
		insert/part/dup str "456" 3 2 
	--assert str = "45645612"
	--test-- "insert-18"
		hash: make hash! [a b c 1 2 3]
		insert hash [x y]
	--assert 'y = select hash 'x
	--assert 2  = select hash 1
	--test-- "insert-19"
		b: next a: [1 2 3]
		insert/part c: [] a b
	--assert [1] = c
	--test-- "insert-20"
		b: next a: "123"
		insert/part c: "" a b
	--assert "1" = c
===end-group===

===start-group=== "insert/dup"

	--test-- "insert/dup1"
		id1-s: copy ""
		insert/dup id1-s #" " 10
	--assert 10 = length? id1-s
	--assert "          " = id1-s
	
	--test-- "insert/dup2"
		id2-s: copy ""
		insert/dup id2-s #"1" 9
	--assert 9 = length? id2-s
	--assert "111111111" = id2-s
	
	--test-- "insert/dup3"
		id3-b: copy []
		insert/dup id3-b 1 8
	--assert 8 = length? id3-b
	--assert [1 1 1 1 1 1 1 1] = id3-b
	
	--test-- "insert/dup4"
		id4-s: copy " "
		insert/dup id4-s #" " 10
	--assert 11 = length? id4-s
	--assert "           " = id4-s

	--test-- "insert/dup5"
		hash: make hash! [a b c 1 2 3]
		insert/dup hash [x y] 2
	--assert 'y = select hash 'x
	--assert 2  = select hash 1
===end-group===

===start-group=== "insert not at head"

	--test-- "insert-not-at-head1"
		inah1-b: copy [1 2 3 4]
		insert next next inah1-b 'two&half 
	--assert [1 2 two&half 3 4] = head inah1-b
	
	--test-- "insert-not-at-head2"
		inah2-s: copy "1234"
		insert next next inah2-s "2.5" 
	--assert "122.534" = head inah2-s
	
	--test-- "insert-not-at-head3"
		inah3-s: copy "1234"
		insert next next inah3-s "^(2345)" 
	--assert "12^(2345)34" = head inah3-s
	
	--test-- "insert-not-at-head4"
		inah4-s: copy "1234^(2345)"
		insert next next inah4-s "2.5" 
	--assert "122.534^(2345)" = head inah4-s
	
	--test-- "insert-not-at-head5"
		inah5-s: copy "1234"
		insert next next inah5-s "^(010000)" 
	--assert "12^(010000)34" = head inah5-s
	
	--test-- "insert-not-at-head6"
		inah6-s: copy "1234^(010000)"
		insert next next inah6-s "2.5" 
	--assert "122.534^(010000)" = head inah6-s
	
	--test-- "insert-not-at-head7"
		inah7-s: copy "1234^(010000)"
		insert next next inah7-s "^(2345)" 
	--assert "12^(2345)34^(010000)" = head inah7-s
	
	--test-- "insert-not-at-head8"
		inah8-s: copy "1234^(2345)"
		insert next next inah8-s "^(010000)" 
	--assert "12^(10000)34^(02345)" = head inah8-s
	
	--test-- "insert-not-at-head9"
		inah9-s: copy "1234"
		insert next next inah9-s #"5" 
	--assert "12534" = head inah9-s
	
	--test-- "insert-not-at-head10"
		inah10-s: copy "1234"
		insert next next inah10-s #"^(2345)" 
	--assert "12^(2345)34" = head inah10-s
	
	--test-- "insert-not-at-head11"
		inah11-s: copy "1234^(2345)"
		insert next next inah11-s #"5" 
	--assert "12534^(2345)" = head inah11-s
	
	--test-- "insert-not-at-head12"
		inah12-s: copy "1234"
		insert next next inah12-s #"^(010000)" 
	--assert "12^(010000)34" = head inah12-s
	
	--test-- "insert-not-at-head13"
		inah13-s: copy "1234^(010000)"
		insert next next inah13-s #"5" 
	--assert "12534^(010000)" = head inah13-s
	
	--test-- "insert-not-at-head14"
		inah14-s: copy "1234^(010000)"
		insert next next inah14-s #"^(2345)" 
	--assert "12^(2345)34^(010000)" = head inah14-s
	
	--test-- "insert-not-at-head15"
		inah15-s: copy "1234^(2345)"
		insert next next inah15-s #"^(010000)" 
	--assert "12^(10000)34^(02345)" = head inah15-s

	--test-- "insert/insert-not-at-head16"
		hash: make hash! [a b c 1 2 3]
		insert skip hash 3 [x y]
	--assert 'b = select hash 'a
	--assert 'y = select hash 'x
	--assert 2  = select hash 1	
===end-group===

===start-group=== "insert at tail"

	--test-- "insert-at-tail1"
		inat1-b: copy [1 2 3 4]
		insert tail inat1-b 'two&half 
	--assert [1 2 3 4 two&half] = head inat1-b
	
	--test-- "insert-at-tail2"
		inat2-s: copy "1234"
		insert tail inat2-s "2.5" 
	--assert "12342.5" = head inat2-s
	
	--test-- "insert-at-tail3"
		inat3-s: copy "1234"
		insert tail inat3-s "^(2345)" 
	--assert "1234^(2345)" = head inat3-s
	
	--test-- "insert-at-tail4"
		inat4-s: copy "1234^(2345)"
		insert tail inat4-s "2.5" 
	--assert "1234^(2345)2.5" = head inat4-s
	
	--test-- "insert-at-tail5"
		inat5-s: copy "1234"
		insert tail inat5-s "^(010000)" 
	--assert "1234^(010000)" = head inat5-s
	
	--test-- "insert-at-tail6"
		inat6-s: copy "1234^(010000)"
		insert tail inat6-s "2.5" 
	--assert "1234^(010000)2.5" = head inat6-s
	
	--test-- "insert-at-tail7"
		inat7-s: copy "1234^(010000)"
		insert tail inat7-s "^(2345)" 
	--assert "1234^(010000)^(2345)" = head inat7-s
	
	--test-- "insert-at-tail8"
		inat8-s: copy "1234^(2345)"
		insert tail inat8-s "^(010000)" 
	--assert "1234^(02345)^(10000)" = head inat8-s
	
	--test-- "insert-at-tail9"
		inat9-s: copy "1234"
		insert tail inat9-s #"5" 
	--assert "12345" = head inat9-s
	
	--test-- "insert-at-tail10"
		inat10-s: copy "1234"
		insert tail inat10-s #"^(2345)" 
	--assert "1234^(2345)" = head inat10-s
	
	--test-- "insert-at-tail11"
		inat11-s: copy "1234^(2345)"
		insert tail inat11-s #"5" 
	--assert "1234^(2345)5" = head inat11-s
	
	--test-- "insert-at-tail12"
		inat12-s: copy "1234"
		insert tail inat12-s #"^(010000)" 
	--assert "1234^(010000)" = head inat12-s
	
	--test-- "insert-at-tail13"
		inat13-s: copy "1234^(010000)"
		insert tail inat13-s #"5" 
	--assert "1234^(010000)5" = head inat13-s
	
	--test-- "insert-at-tail14"
		inat14-s: copy "1234^(010000)"
		insert tail inat14-s #"^(2345)" 
	--assert "1234^(010000)^(2345)" = head inat14-s
	
	--test-- "insert-at-tail15"
		inat15-s: copy "1234^(2345)"
		insert tail inat15-s #"^(010000)" 
	--assert "1234^(02345)^(10000)" = head inat15-s

	--test-- "insert/insert-not-at-head16"
		hash: make hash! [a b c 1 2 3]
		insert skip hash 3 [x y]
	--assert 'b = select hash 'a
	--assert 'y = select hash 'x
	--assert 2  = select hash 1	
===end-group===

===start-group=== "insert reported issues"

	--test-- "iri1 - issue #460"
	--assert "1" = head insert "" 1
	
	--test-- "iri2 - issue #460"
	--assert "a" = head insert "" 'a
	
	--test-- "iri3 - issue #460"
	--assert "abc" = head insert "" #abc
	
	--test-- "iri4 - issue #599"
	--assert "<56a<56aI" = head insert/part/dup "I" ["<" #"5" #"6" a x] 4 2

===end-group===



===start-group=== "same blocks"

	--test-- "move-1"
		list: [a b c d e]
		move list at list 1
		--assert list = [a b c d e]

	--test-- "move-2"
		list: [a b c d e]
		move list at list 2
		--assert list = [b a c d e]

	--test-- "move-3"
		list: [a b c d e]
		move list at list 3
		--assert list = [b c a d e]

	--test-- "move-4"
		list: [a b c d e]
		move list at list 4
		--assert list = [b c d a e]

	--test-- "move-5"
		list: [a b c d e]
		move list at list 5
		--assert list = [b c d e a]

	--test-- "move-6"
		list: [a b c d e]
		move list at list 6
		--assert list = [b c d e a]

	--test-- "move-7"
		list: [a b c d e]
		move list tail list
		--assert list = [b c d e a]

	--test-- "move-8"
		list: [a b c d e]
		move back tail list list
		--assert list = [e a b c d]

	--test-- "move-9"
		list: [a b c d e]
		move back back tail list at list 2
		--assert list = [a d b c e]

	--test-- "move-10"
		list: [a b c d e]
		move/part list tail list 2
		--assert list = [c d e a b]

	--test-- "move-11"
		hash: make hash! [a b c d e f g 1 2 3]
		hash2: skip hash 6
		move hash hash2
		move/part hash hash2 3
		move/part hash2 hash 2
		--assert 1 = hash/d
		--assert 'e = select hash 1
		--assert 'f = hash/e
		--assert 'c = hash/b
		--assert 2 = hash/c
		--assert 3 = select hash 2

	--test-- "issue-1905"
		list: [a b c d e f g]
		move/part list skip list 3 2
		--assert list = [c d a b e f g]

===end-group===

===start-group=== "different blocks"

	--test-- "move-diff-1"
		list1: [a b c]
		list2: [d e f]
		move list1 list2
		--assert list1 = [b c]
		--assert list2 = [a d e f]

	--test-- "move-diff-2"
		list1: [a b c]
		list2: [d e f]
		move at list1 2 at list2 2
		--assert list1 = [a c]
		--assert list2 = [d b e f]

	--test-- "move-diff-3"
		list1: [a b c]
		list2: [d e f]
		move list1 tail list2
		--assert list1 = [b c]
		--assert list2 = [d e f a]

	--test-- "move-diff-4"
		list1: [a b c]
		list2: [d e f]
		move/part list1 list2 2
		--assert list1 = [c]
		--assert list2 = [a b d e f]

	--test-- "move-diff-5"
		list1: [a b c]
		list2: [d e f]
		move/part at list1 2 at list2 2 2
		--assert list1 = [a]
		--assert list2 = [d b c e f]

	--test-- "move-diff-6"
		list1: [a b c]
		list2: [d e f]
		move/part list1 tail list2 2
		--assert list1 = [c]
		--assert list2 = [d e f a b]

	--test-- "move-diff-7"
		list1: [a b c]
		list2: []
		move/part list1 tail list2 3
		--assert list1 = []
		--assert list2 = [a b c]

	--test-- "move-diff-8"
		hash1: make hash! [a b c d e f g 1 2 3]
		hash2: make hash! [x y z 7 8 9]
		move hash1 hash2
		move/part hash1 hash2 3
		move/part skip hash2 3 hash1 3
		move/part skip hash1 3 skip hash2 2 3
		--assert 'x = hash1/a
		--assert 1 = hash1/y
		--assert 'y = hash1/x
		--assert 2 = select hash1 1
		--assert 'c = hash2/b
		--assert 'e = hash2/c
		--assert 'g = hash2/f
		--assert 7 = hash2/z
		--assert 8 = select hash2 7
===end-group===

===start-group=== "same strings"

	--test-- "mv-str-1"
		str: "abcde"
		move str at str 1
		--assert str = "abcde"

	--test-- "mv-str-2"
		str: "abcde"
		move str at str 2
		--assert str = "bacde"

	--test-- "mv-str-3"
		str: "abcde"
		move str at str 3
		--assert str = "bcade"

	--test-- "mv-str-4"
		str: "abcde"
		move str at str 4
		--assert str = "bcdae"

	--test-- "mv-str-5"
		str: "abcde"
		move str at str 5
		--assert str = "bcdea"

	--test-- "mv-str-6"
		str: "abcde"
		move str at str 6
		--assert str = "bcdea"

	--test-- "mv-str-7"
		str: "abcde"
		move str tail str
		--assert str = "bcdea"

	--test-- "mv-str-8"
		str: "abcde"
		move back tail str str
		--assert str = "eabcd"

	--test-- "mv-str-9"
		str: "abcde"
		move back back tail str at str 2
		--assert str = "adbce"

	--test-- "mv-str-10"
		str: "abcde"
		move/part str tail str 2
		--assert str = "cdeab"

	--test-- "issue-1905-str"
		str: "abcdefg"
		move/part str skip str 3 2
		--assert str = "cdabefg"


===end-group===

===start-group=== "different strings"

	--test-- "mv-str-diff-1"
		str1: "abc"
		str2: "def"
		move str1 str2
		--assert str1 = "bc"
		--assert str2 = "adef"

	--test-- "mv-str-diff-2"
		str1: "abc"
		str2: "def"
		move at str1 2 at str2 2
		--assert str1 = "ac"
		--assert str2 = "dbef"

	--test-- "mv-str-diff-3"
		str1: "abc"
		str2: "def"
		move str1 tail str2
		--assert str1 = "bc"
		--assert str2 = "defa"

	--test-- "mv-str-diff-4"
		str1: "abc"
		str2: "def"
		move/part str1 str2 2
		--assert str1 = "c"
		--assert str2 = "abdef"

	--test-- "mv-str-diff-5"
		str1: "abc"
		str2: "def"
		move/part at str1 2 at str2 2 2
		--assert str1 = "a"
		--assert str2 = "dbcef"

	--test-- "mv-str-diff-6"
		str1: "abc"
		str2: "def"
		move/part str1 tail str2 2
		--assert str1 = "c"
		--assert str2 = "defab"

	--test-- "mv-str-diff-7"
		str1: "abc"
		str2: ""
		move/part str1 tail str2 3
		--assert str1 = ""
		--assert str2 = "abc"

===end-group===

===start-group=== "different encodings"

	--test-- "mv-str-unit-1"
		str1: "abc"
		str2: "一二三"
		move str1 str2
		--assert str1 = "bc"
		--assert str2 = "a一二三"

	--test-- "mv-str-unit-2"
		str1: "abc"
		str2: "一二三"
		move at str1 2 at str2 2
		--assert str1 = "ac"
		--assert str2 = "一b二三"

	--test-- "mv-str-unit-3"
		str1: "abc"
		str2: "一二三"
		move str1 tail str2
		--assert str1 = "bc"
		--assert str2 = "一二三a"

	--test-- "mv-str-unit-4"
		str1: "abc"
		str2: "一二三"
		move/part str1 str2 2
		--assert str1 = "c"
		--assert str2 = "ab一二三"

	--test-- "mv-str-unit-5"
		str1: "abc"
		str2: "一二三"
		move/part at str1 2 at str2 2 2
		--assert str1 = "a"
		--assert str2 = "一bc二三"

	--test-- "mv-str-unit-6"
		str1: "abc"
		str2: "一二三"
		move/part str1 tail str2 2
		--assert str1 = "c"
		--assert str2 = "一二三ab"

	--test-- "mv-str-unit-7"
		str1: "一二三"
		str2: ""
		move/part str1 tail str2 3
		--assert str1 = ""
		--assert str2 = "一二三"

===end-group===


===start-group=== "make basic"
	
	--test-- "mb1 - issue #465"
		mb1-s: make string! 0
		append mb1-s #"B"
		append mb1-s #"C"
		append mb1-s #"D"
	--assert "BCD" = mb1-s
	
	--test-- "mb2"
		mb2-s: make string! 1 
		append mb2-s #"A"
		append mb2-s #"B"
		append mb2-s #"C"
		append mb2-s #"D"
	--assert "ABCD" = mb2-s
  
===end-group===



===start-group=== "system word tests"

	--test-- "swt1 issue #455"
	--assert  function! = type? get first find words-of system/words 'file?
	
	--test-- "swt2 issue #455"
	--assert char! = type? get first find words-of system/words 'cr
	
	--test-- "swt3 issue #455"
	--assert action! = type? get first find words-of system/words 'find
	
	--test-- "swt4 issue #455"
	--assert datatype! = type? get first find words-of system/words 'function!
		
===end-group===



===start-group=== "block"

	--test-- "blk-1" 	--assert parse 		[]			[]
	--test-- "blk-2" 	--assert parse 		[a]			['a]
	--test-- "blk-3" 	--assert not parse	[a]			['b]
	--test-- "blk-4" 	--assert parse 		[a b]		['a 'b]
	--test-- "blk-5" 	--assert parse 		[a #"b"]	['a #"b"]
	--test-- "blk-6" 	--assert parse 		[a]			[['a]]
	--test-- "blk-7" 	--assert parse 		[a b]		[['a] 'b]
	--test-- "blk-8" 	--assert parse 		[a b]		['a ['b]]
	--test-- "blk-9" 	--assert parse 		[a b]		[['a]['b]]
	--test-- "blk-10"	--assert parse 		["hello"]	["hello"]

	--test-- "blk-11"	--assert parse 		[#"a"] 		[#"b" | #"a"]
	--test-- "blk-12"	--assert not parse	[a b]		['b | 'a]
	--test-- "blk-13"	--assert parse 		[#"a"]		[[#"b" | #"a"]]
	--test-- "blk-14"	--assert not parse	[a b]		[['b | 'a]]
	--test-- "blk-15"	--assert parse 		[a b]		[['a | 'b]['b | 'a]]
	
	--test-- "blk-16"	--assert parse		[a 123]		['a integer!]
	--test-- "blk-17"	--assert not parse	[a 123]		['a char!]
	--test-- "blk-18"	--assert parse		[a 123]		[['a][integer!]]
	--test-- "blk-19"	--assert not parse	[a 123]		['a [char!]]

	--test-- "blk-19-1"	--assert parse		[123]		[number!]
	--test-- "blk-19-2"	--assert not parse	[123]		[any-string!]
	--test-- "blk-19-3"	--assert parse		[123]		[[number!]]
	--test-- "blk-19-4"	--assert not parse	[123]		[[any-string!]]	
	
	--test-- "blk-20"
		res: 0	
	--assert parse [] [(res: 1)]
	--assert res = 1
		
	--test-- "blk-21"
		res: 0	
		--assert parse [a] ['a (res: 1)]
		--assert res = 1
		
	--test-- "blk-22"
		res: 0	
		--assert not parse [a] ['b (res: 1)]
		--assert res = 0
		
	--test-- "blk-23"
		res: 0	
		--assert parse [] [[(res: 1)]]
		--assert res = 1

	--test-- "blk-24"
		res: 0	
		--assert parse [a] [['a (res: 1)]]
		--assert res = 1

	--test-- "blk-25"
		res: 0	
		--assert not parse [a] [['b (res: 1)]]
		--assert res = 0
		
	--test-- "blk-26"
		res: 0	
		--assert parse [a 123] ['a (res: 1) [char! (res: 2) | integer! (res: 3)]]
		--assert res = 3
		
	--test-- "blk-27"
		res: 0	
		--assert not parse [a 123] ['a (res: 1) [char! (res: 2) | string! (res: 3)]]
		--assert res = 1

	--test-- "blk-28"	--assert not parse		[a a]		[1 ['a]]
	--test-- "blk-29"	--assert parse			[a a]		[2 ['a]]
	--test-- "blk-30"	--assert not parse		[a a]		[3 ['a]]
	--test-- "blk-31"	--assert not parse		[a a]		[1 1 ['a]]
	--test-- "blk-32"	--assert parse			[a a]		[1 2 ['a]]
	--test-- "blk-33"	--assert parse			[a a]		[2 2 ['a]]
	--test-- "blk-34"	--assert parse			[a a]		[2 3 ['a]]
	--test-- "blk-35"	--assert not parse		[a a]		[3 4 ['a]]
	
	--test-- "blk-36"	--assert not parse		[a a]		[1 'a]
	--test-- "blk-37"	--assert parse			[a a]		[2 'a]
	--test-- "blk-38"	--assert not parse		[a a]		[3 'a]
	--test-- "blk-39"	--assert not parse		[a a]		[1 1 'a]
	--test-- "blk-40"	--assert parse			[a a]		[1 2 'a]
	--test-- "blk-41"	--assert parse			[a a]		[2 2 'a]
	--test-- "blk-42"	--assert parse			[a a]		[2 3 'a]
	--test-- "blk-43"	--assert not parse		[a a]		[3 4 'a]
	
	--test-- "blk-44"	--assert not parse		[a a]		[1 skip]
	--test-- "blk-45"	--assert parse			[a a]		[2 skip]
	--test-- "blk-46"	--assert not parse		[a a]		[3 skip]
	--test-- "blk-47"	--assert not parse		[a a]		[1 1 skip]
	--test-- "blk-48"	--assert parse			[a a]		[1 2 skip]
	--test-- "blk-49"	--assert parse			[a a]		[2 2 skip]
	--test-- "blk-50"	--assert parse			[a a]		[2 3 skip]
	--test-- "blk-51"	--assert not parse		[a a]		[3 4 skip]
   
	--test-- "blk-52"	--assert parse			[a]			[skip]
	--test-- "blk-53"	--assert parse			[a b]		[skip skip]
	--test-- "blk-54"	--assert parse			[a b]		[skip [skip]]
	--test-- "blk-55"	--assert parse			[a b]		[[skip] [skip]]
   
	--test-- "blk-56"	--assert parse			[a a]		[some ['a]]
	--test-- "blk-57"	--assert not parse		[a a]		[some ['a] 'b]
   	
	--test-- "blk-58"	--assert parse			[a a b a b b b a]	[some [skip]]
	--test-- "blk-59"	--assert parse			[a a b a b b b a]	[some ['a | 'b]]
	--test-- "blk-60"	--assert not parse 		[a a b a b b b a]	[some ['a | 'c]]
   
	--test-- "blk-61"	--assert parse 			[a a]		[any ['a]]
	--test-- "blk-62"	--assert parse			[a a]		[some ['a] any ['b]]
	--test-- "blk-63"	--assert parse			[a a b b]	[2 'a 2 'b]
	--test-- "blk-64"	--assert not parse		[a a b b]	[2 'a 3 'b]
	--test-- "blk-65"	--assert parse			[a a b b]	[some 'a some 'b]
	--test-- "blk-66"	--assert not parse		[a a b b]	[some 'a some 'c]

	--test-- "blk-67"
		p: none
		--assert parse [] [p:]
		--assert tail? p
	
	--test-- "blk-68"
		p: none
		--assert parse [] [[[p:]]]
		--assert tail? p

		
	--test-- "blk-69"
		p: none
		--assert parse [a] [p: 'a]
		--assert p = [a]
		
	--test-- "blk-70"
		p: none
		--assert parse [a] ['a p:]
		--assert tail? p
		
	--test-- "blk-71"
		p: none
		--assert parse [a] ['a [p:]]
		--assert tail? p
		
	--test-- "blk-72"
		p: none
		--assert not parse [a b] ['a p:]
		--assert p = [b]
	
	--test-- "blk-72"
		p: none
		--assert parse [a b] ['a [p:]['b | 'c]]
		--assert p = [b]
		
	--test-- "blk-73"
		p: none
		--assert parse [a a a b b] [3 'a p: 2 'b :p [2 'b]]
		--assert p = [b b]
		
	--test-- "blk-74"
	--assert parse [b a a a c][skip some ['a] 'c]
	
===end-group===

===start-group=== "block-end"

	--test-- "blk-end-1" --assert parse 		[a] 	['a end]
	--test-- "blk-end-2" --assert not parse 	[a b] 	['a end]
	--test-- "blk-end-3" --assert parse 		[a] 	[skip end]
	--test-- "blk-end-4" --assert not parse 	[a b]	[skip end]
	--test-- "blk-end-5" --assert parse 		[]		[end]
	
	--test-- "blk-end-6"
		be6: 0
		--assert parse [] [end (be6: 1)]
		--assert be6 = 1		

===end-group===

===start-group=== "block-words"
	
	wa: ['a]
	wb: ['b]
	wca: #"a"
	wcb: #"b"
	wra: [wa]
	wrb: [wb]
	wh: "hello"
	wrab: ['a | 'b]
	wrba: ['b | 'a]
	
	--test-- "blk-w1" 	--assert parse 		[a]			[wa]
	--test-- "blk-w2" 	--assert not parse 	[a]			[wb]
	--test-- "blk-w3" 	--assert parse 		[a b]		[wa wb]
	--test-- "blk-w4" 	--assert parse 		[a #"b"]	[wa wcb]
	--test-- "blk-w5" 	--assert parse 		[a]			[wra]
	--test-- "blk-w6" 	--assert parse 		[a b]		[wra 'b]
	--test-- "blk-w7" 	--assert parse 		[a b]		['a wrb]
	--test-- "blk-w8" 	--assert parse 		[a b]		[wra wrb]
	--test-- "blk-w9" 	--assert parse 		["hello"]	[wh]

	--test-- "blk-w10"	--assert parse 		[#"a"] 		[wcb | wca]
	--test-- "blk-w11"	--assert not parse 	[a b]		[wb | wa]
	--test-- "blk-w12"	--assert parse 		[#"a"]		[[wcb | wca]]
	--test-- "blk-w13"	--assert not parse 	[a b]		[wrba]
	--test-- "blk-w14"	--assert parse 		[a b]		[wrab wrba]
	
	--test-- "blk-w15"	--assert parse		[a 123]		[wa integer!]
	--test-- "blk-w16"	--assert not parse	[a 123]		[wa char!]
	--test-- "blk-w17"	--assert parse		[a 123]		[wra [integer!]]
	--test-- "blk-w18"	--assert not parse	[a 123]		[wa  [char!]]

	--test-- "blk-w19"
		res: 0	
		--assert parse [a] [wa (res: 1)]
		--assert res = 1
		
	--test-- "blk-w20"
		res: 0	
		--assert not parse [a] [wb (res: 1)]
		--assert res = 0
		
	--test-- "blk-w21"
		res: 0	
		wres: [(res: 1)]
		--assert parse [] [wres]
		--assert res = 1

	--test-- "blk-w22"
		res: 0
		wres: ['a (res: 1)]
		--assert parse [a] [wres]
		--assert res = 1

	--test-- "blk-w23"
		res: 0
		wres: ['b (res: 1)]
		--assert not parse [a] [wres]
		--assert res = 0
		
	--test-- "blk-w24"
		res: 0
		wres: [char! (res: 2) | integer! (res: 3)]
		--assert parse [a 123] [wa (res: 1) wres]
		--assert res = 3
		
	--test-- "blk-w25"
		res: 0
		wres: [char! (res: 2) | string! (res: 3)]
		--assert not parse [a 123] [wa (res: 1) wres]
		--assert res = 1

===end-group===

===start-group=== "block-extraction"

	wa: ['a]
	--test-- "blk-ext1" 
		res: 0
		--assert parse [a][copy res skip]
		--assert res = [a]
	
	--test-- "blk-ext2" 
		res: 0
		--assert parse [a][copy res 'a]
		--assert res = [a]
	
	--test-- "blk-ext3" 
		res: 0
		--assert parse [a][copy res word!]
		--assert res = [a]
		
	--test-- "blk-ext4" 
		res:  0
		res2: 0
		--assert parse [a][copy res copy res2 'a]
		--assert res  = [a]
		--assert res2 = [a]
		
	--test-- "blk-ext5" 
		res: 0
		--assert parse [a a][copy res 2 'a]
		--assert res = [a a]

	--test-- "blk-ext6" 
		res: 0
		--assert not parse [a a][copy res 3 'a]
		--assert res = 0
		
	--test-- "blk-ext7" 
		res: 0
		--assert parse [a][copy res ['a]]
		--assert res = [a]

	--test-- "blk-ext8" 
		res: 0
		--assert parse [a][copy res wa]
		--assert res = [a]
	
	--test-- "blk-ext9" 
		res: 0
		--assert parse [a a][copy res 2 wa]
		--assert res = [a a]
	
	--test-- "blk-ext10" 
		res: 0
		--assert parse [a a b][skip copy res 'a skip]
		--assert res = [a]
 
	--test-- "blk-ext11" 
		res: 0
		--assert parse [a a b][skip copy res ['a | 'b] skip]
		--assert res = [a]
		
	--test-- "blk-ext12" 
		res: 0
		--assert not parse [a][copy res ['c | 'b]]
		--assert res = 0
		
	--test-- "blk-ext13" 
		res: 0
		--assert parse [a][set res skip]
		--assert res = 'a

	--test-- "blk-ext14" 
		res: 0
		--assert parse [a][set res 'a]
		--assert res = 'a

	--test-- "blk-ext15" 
		res: 0
		--assert parse [a][set res word!]
		--assert res = 'a
		
	--test-- "blk-ext16" 
		res:  0
		res2: 0
		--assert parse [a][set res set res2 'a]
		--assert res  = 'a
		--assert res2 = 'a

	--test-- "blk-ext17" 
		res: 0
		--assert parse [a a][set res 2 'a]
		--assert res = 'a

	--test-- "blk-ext18" 
		res: 0
		--assert not parse [a a][set res 3 'a]
		--assert res = 0

	--test-- "blk-ext19" 
		res: 0
		--assert parse [a][set res ['a]]
		--assert res = 'a

	--test-- "blk-ext20" 
		res: 0
		--assert parse [a][set res wa]
		--assert res = 'a

	--test-- "blk-ext21" 
		res: 0
		--assert parse [a a][set res 2 wa]
		--assert res = 'a

	--test-- "blk-ext22" 
		res: 0
		--assert parse [a a b][skip set res 'a skip]
		--assert res = 'a

	--test-- "blk-ext23" 
		res: 0
		--assert parse [a a b][skip set res ['a | 'b] skip]
		--assert res = 'a

	--test-- "blk-ext24" 
		res: 0
		--assert not parse [a][set res ['c | 'b]]
		--assert res = 0
		
	--test-- "blk-ext25" 
		res: 0
		--assert parse [b a a a c][skip set res some 'a 'c]
		--assert res = 'a

	--test-- "blk-ext26" 
		res: 0
		--assert parse [b a a a c][skip set res some wa 'c]
		--assert res = 'a

	--test-- "blk-ext40"
		res: parse [] [collect []]
		--assert res = []

	--test-- "blk-ext41"
		res: parse [1] [collect []]
		--assert res = []

	--test-- "blk-ext42"
		res: parse [1] [collect [keep skip]]
		--assert res = [1]

	--test-- "blk-ext43"
		res: parse [1 2 3] [collect [some [keep integer!]]]
		--assert res = [1 2 3]

	--test-- "blk-ext44"
		res: parse [1 2 3] [collect [some [keep [set v integer! if (even? v)] | skip]]]
		--assert res = [2]

	--test-- "blk-ext45"
		res: parse [a 3 4 t "test" 8][collect [any [keep integer! | skip]]]
		--assert res = [3 4 8]

	--test-- "blk-ext46"
		a: none
		--assert parse [] [collect set a []]
		--assert a = []

	--test-- "blk-ext47"
		a: none
		--assert parse [1] [collect set a [keep skip]]
		--assert a = [1]

	--test-- "blk-ext48"
		list: none
		--assert parse [a 3 4 t "test" 8][collect set list [any [keep integer! | skip]]]
		--assert list = [3 4 8]

	--test-- "blk-ext49"
		a: []
		--assert parse [] [collect into a []]
		--assert a = []

	--test-- "blk-ext50"
		a: []
		--assert parse [1] [collect into a [keep skip]]
		--assert a = [1]
		--assert [1] = head a

	--test-- "blk-ext51"
		list: next [1 2 3]
		--assert parse [a 4 b 5 c] [collect into list [some [keep word! | skip]]]
		--assert list = [a b c 2 3]
		--assert [1 a b c 2 3] = head list

	--test-- "blk-ext52"
		res: parse [a b b b] [collect [skip keep some 'b]]
		--assert res = [[b b b]]

	--test-- "blk-ext53"
		a: []
		--assert parse [1] [collect after a [keep skip]]
		--assert a = []
		--assert [1] = head a

	--test-- "blk-ext54"
		list: next [1 2 3]
		--assert parse [a 4 b 5 c] [collect after list [some [keep word! | skip]]]
		--assert list = [2 3]
		--assert [1 a b c 2 3] = head list
		
===end-group===

===start-group=== "block-skipping"

	wa: ['a]
	
	--test-- "blk-sk1" 	--assert parse		[]			[to end]
	--test-- "blk-sk2" 	--assert parse		[]			[thru end]
	--test-- "blk-sk3" 	--assert parse		[a]			[to end]
	--test-- "blk-sk4" 	--assert not parse	[a]			[to 'a]
	--test-- "blk-sk5" 	--assert not parse	[a]			[to 'a end]
	--test-- "blk-sk6" 	--assert parse		[a]			[to 'a skip]
	--test-- "blk-sk7" 	--assert parse		[a]			[thru 'a]
	--test-- "blk-sk8" 	--assert parse		[a]			[thru 'a end]
	--test-- "blk-sk9" 	--assert not parse	[a]			[thru 'a skip]
	--test-- "blk-sk10"	--assert parse		[a b]		[to 'b skip]
	--test-- "blk-sk11"	--assert parse		[a b]		[thru 'b]
	--test-- "blk-sk12"	--assert parse		[a a a b]	[to 'b skip]
	--test-- "blk-sk13"	--assert parse		[a a b a]	[skip to 'b 2 skip]
	
	--test-- "blk-sk14"	--assert not parse	[a]			[to ['a]]
	--test-- "blk-sk15"	--assert not parse	[a]			[to ['a] end]
	--test-- "blk-sk16"	--assert parse		[a]			[to ['a] skip]
	--test-- "blk-sk17"	--assert parse		[a]			[thru ['a]]
	--test-- "blk-sk18"	--assert parse		[a]			[thru ['a] end]
	--test-- "blk-sk19"	--assert not parse	[a]			[thru ['a] skip]
	--test-- "blk-sk20"	--assert parse		[a b]		[to ['b] skip]
	--test-- "blk-sk21"	--assert parse		[a b]		[thru ['b]]
	--test-- "blk-sk22"	--assert parse		[a a a b]	[to ['b] skip]
	--test-- "blk-sk23"	--assert parse		[a a b a]	[skip to ['b] 2 skip]
	
	--test-- "blk-sk24"	--assert parse		[z z a b c]	[to ['c | 'b | 'a] 3 skip]
	--test-- "blk-sk25"	--assert parse		[z z a b c]	[to ['a | 'b | 'c] 3 skip]

	--test-- "blk-sk26"	--assert parse		[z z a b c]	[thru ['c | 'b | 'a] 2 skip]
	--test-- "blk-sk27"	--assert parse		[z z a b c]	[thru ['a | 'b | 'c] 2 skip]
	
	--test-- "blk-sk28"	--assert parse		[b b a a c]	[thru 2 'a 'c]
	--test-- "blk-sk29"	--assert parse		[b b a a c]	[thru 2 'a 'c]
	--test-- "blk-sk30"	--assert parse		[b b a a c]	[thru [2 'a] 'c]
	--test-- "blk-sk31"	--assert parse		[b b a a c]	[thru some 'a 'c]
	--test-- "blk-sk32"	--assert parse		[b b a a c]	[thru [some 'a] 'c]
	--test-- "blk-sk33"	--assert parse		[b b a a c]	[thru [some 'x | 2 'a] 'c]
	--test-- "blk-sk34"	--assert parse		[b b a a c]	[thru 2 wa 'c]
	--test-- "blk-sk35"	--assert parse		[b b a a c]	[thru some wa 'c]
	
	--test-- "blk-sk36"	--assert parse 		[1 "hello"]	[thru "hello"]

	--test-- "blk-sk37"
		res: 0
		--assert parse [1 "hello" a 1 2 3 b] [thru "hello" skip copy res to 'b skip]
		--assert res = [1 2 3]

	--test-- "blk-sk38" --assert not parse	[]			[to 'a]
	--test-- "blk-sk39" --assert not parse	[]			[to ['a]]

===end-group===

===start-group=== "block-modify"
	
	--test-- "blk-rem1" --assert error? try [parse [] [remove]]

	--test-- "blk-rem2"	--assert not parse	[]			[remove skip]

	--test-- "blk-rem3"	
		blk: [a]
		--assert parse blk [remove skip]
		--assert blk = []

	--test-- "blk-rem4"	
		blk: [a b a]
		--assert parse blk [some ['a | remove 'b]]
		--assert blk = [a a]

	--test-- "blk-ins1"	
		--assert parse blk: [] [insert 1]
		--assert blk = [1]

	--test-- "blk-ins2"	
		--assert parse blk: [a a] [skip insert 'b skip]
		--assert blk = [a b a]

	--test-- "blk-ins3"	
		--assert parse blk: [] [p: insert 'a :p remove 'a]
		--assert blk = []

	--test-- "blk-ins4"	
		--assert parse blk: [] [insert [a b]]
		--assert blk = [a b]

	--test-- "blk-ins5"	
		--assert parse blk: [] [insert only [a b]]
		--assert blk = [[a b]]

	--test-- "blk-chg1"
		--assert parse blk: [1][change integer! 'a]
		--assert blk = [a]

	--test-- "blk-chg2"
		--assert parse blk: [1 2 3][change [some integer!] 'a]
		--assert blk = [a]

	--test-- "blk-chg3"
		--assert parse blk: [1 a 2 b 3][some [change word! dot | integer!]]
		--assert blk = [1 #"." 2 #"." 3]

	--test-- "blk-chg4"
		--assert parse blk: [1 2 3][change [some integer!] (99)]
		--assert blk = [99]

	--test-- "blk-chg5"
		--assert parse blk: [1 2 3][change only [some integer!] [a]]
		--assert blk = [[a]]

	--test-- "blk-chg6"
		--assert parse blk: [1 2 3][change only [some integer!] (reduce [1 + 2])]
		--assert blk = [[3]]

	--test-- "blk-chg11"
		--assert parse blk: [1][b: integer! change b 'a]
		--assert blk = [a]

	--test-- "blk-chg12"
		--assert parse blk: [1 2 3][b: some integer! change b 'a]
		--assert blk = [a]

	--test-- "blk-chg13"
		--assert parse blk: [1 a 2 b 3][some [b: word! change b dot | integer!]]
		--assert blk = [1 #"." 2 #"." 3]

	--test-- "blk-chg14"
		--assert parse blk: [1 2 3][b: some integer! change b (99)]
		--assert blk = [99]

	--test-- "blk-chg15"
		--assert parse blk: [1 2 3][b: some integer! change only b [a]]
		--assert blk = [[a]]

	--test-- "blk-chg16"
		--assert parse blk: [1 2 3][b: some integer! change only b (reduce [1 + 2])]
		--assert blk = [[3]]


===end-group===

===start-group=== "block-recurse"

	--test-- "blk-rec1"
		--assert parse [a "test"]['a set s string! (--assert parse s [4 skip])]

===end-group===

===start-group=== "block-misc"

	wa: ['a]
	wb: ['b]
	--test-- "blk-m1"	--assert parse 		[]			[break]
	--test-- "blk-m2"	--assert not parse 	[a]			[break]
	--test-- "blk-m3"	--assert parse 		[a]			[[break 'b] 'a]
	--test-- "blk-m4"	--assert parse 		[a]			[['b | break] 'a]
	--test-- "blk-m5"	--assert parse 		[a a]		[some ['b | break] 2 'a]
	--test-- "blk-m6"	--assert parse 		[a a]		[some ['b | [break]] 2 'a]
	--test-- "blk-m7"	--assert not parse 	[a a]		[some ['b | 2 ['c | break]] 2 'a]

	--test-- "blk-m20"	--assert not parse 	[]			[fail]
	--test-- "blk-m21"	--assert not parse 	[a]			['a fail]
	--test-- "blk-m22"	--assert not parse 	[a]			[[fail]]
	--test-- "blk-m23"	--assert not parse 	[a]			[fail | fail]
	--test-- "blk-m24"	--assert not parse 	[a]			[[fail | fail]]
	--test-- "blk-m25"	--assert not parse 	[a]			['b | fail]

	--test-- "blk-m30"	--assert not parse 	[]			[not end]
	--test-- "blk-m31"	--assert parse 		[a]			[not 'b 'a]
	--test-- "blk-m32"	--assert not parse 	[a]			[not skip]
	--test-- "blk-m33"	--assert not parse 	[a]			[not skip skip]
	--test-- "blk-m34"	--assert parse 		[a]			[not ['b] 'a]
	--test-- "blk-m35"	--assert parse 		[a]			[not wb 'a]
	--test-- "blk-m36"	--assert not parse 	[a a]		[not ['a 'a] to end]
	--test-- "blk-m37"	--assert parse 		[a a]		[not [some 'b] to end]
	--test-- "blk-m38"	--assert parse 		[a a]		[some ['c | not 'b] 2 skip]

	--test-- "blk-m40"	--assert parse 		[wb]		[quote wb]
	--test-- "blk-m41"	--assert parse 		[123]		[quote 123]
	--test-- "blk-m42"	--assert parse 		[3 3]		[2 quote 3]
	--test-- "blk-m43"	--assert parse 		[none]		[quote none]
	--test-- "blk-m44"	--assert parse 		[some]		[quote some]

	--test-- "blk-m50"	--assert not parse 	[]			[reject]
	--test-- "blk-m51"	--assert not parse 	[a]			[reject 'a]
	--test-- "blk-m52"	--assert not parse 	[a]			[reject wa]
	--test-- "blk-m53"	--assert not parse 	[a]			[[reject] 'a]
	--test-- "blk-m54"	--assert parse 		[a]			[[reject 'b] | 'a]
	--test-- "blk-m55"	--assert not parse 	[a]			[['b | reject] 'a]
	--test-- "blk-m56"	--assert parse 		[a]			[['b | reject] | 'a]
	--test-- "blk-m57"	--assert parse 		[a a]		[some reject | 2 'a]
	--test-- "blk-m58"	--assert parse 		[a a]		[some [reject] | 2 'a]
	
	--test-- "blk-m60"	--assert parse 		[]			[none]
	--test-- "blk-m61"	--assert parse 		[a]			[skip none]
	--test-- "blk-m62"	--assert parse 		[a]			[none skip none]
	--test-- "blk-m63"	--assert parse 		[a]			['a none]
	--test-- "blk-m64"	--assert parse 		[a]			[none 'a none]
	--test-- "blk-m65"	--assert parse 		[a]			[wa none]
	--test-- "blk-m66"	--assert parse 		[a]			[none wa none]
	--test-- "blk-m67"	--assert parse 		[a]			[['b | none] 'a]
	--test-- "blk-m68"	--assert parse 		[a]			[['b | [none]] 'a]
	--test-- "blk-m69"	--assert parse 		[a]			[[['b | [none]]] 'a]

	--test-- "blk-m80"	--assert parse 		[]			[opt none]
	--test-- "blk-m81"	--assert parse 		[]			[opt 'a]
	--test-- "blk-m82"	--assert parse 		[a]			[opt 'a]
	--test-- "blk-m83"	--assert parse 		[a]			[opt 'b 'a]
	--test-- "blk-m84"	--assert parse 		[a]			[opt ['a]]
	--test-- "blk-m85"	--assert parse 		[a]			[opt wa]
	--test-- "blk-m86"	--assert parse 		[a]			[opt skip]
	--test-- "blk-m87"	--assert parse 		[a b c]		[skip opt 'b skip]

	--test-- "blk-m90"	--assert parse 		[[]]		[into []]
	--test-- "blk-m91"	--assert parse 		[[a]]		[into ['a]]
	--test-- "blk-m92"	--assert parse 		[b [a] c]	['b into ['a] 'c]
	--test-- "blk-m93"	--assert parse 		["a"]		[into [#"a"]]
	--test-- "blk-m94"	--assert parse 		[b "a" c]	['b into ["a"] 'c]
	--test-- "blk-m95"	--assert parse 		[["a"]]		[into [into [#"a"]]]
	--test-- "blk-m96"	--assert not parse 	[[a]]		[into ['a 'b]]
	--test-- "blk-m97"	--assert not parse 	[[a]]		[into [some 'b]]
	--test-- "blk-m98"	--assert parse 		[[a]]		[into ['a 'b] | block!]

	--test-- "blk-m100"	--assert not parse	[]			[then skip]
	--test-- "blk-m101"	--assert parse		[]			[then skip | end]
	--test-- "blk-m102"	--assert parse		[a]			[then 'a | 'b]
	--test-- "blk-m103"	--assert not parse	[c]			[then 'a | 'b]
	--test-- "blk-m104"	--assert parse		[b]			[then 'a | 'b]
	--test-- "blk-m105"	--assert parse		[z a]		['z then 'a | 'b]

	x: none
	--test-- "blk-m110"	--assert parse		[2 4 6]		[any [set x integer! if (even? x)]]
	--test-- "blk-m111"	--assert not parse	[1]			[set x integer! if (even? x)]
	--test-- "blk-m112"	--assert not parse	[1 5]		[some [set x integer! if (even? x)]]

	--test-- "blk-m120"	--assert parse		[]			[while 'a]
	--test-- "blk-m121"	--assert parse		[]			[while 'b]
	--test-- "blk-m122"	--assert parse		[a]			[while 'a]
	--test-- "blk-m123"	--assert not parse	[a]			[while 'b]
	--test-- "blk-m124"	--assert parse		[a]			[while 'b skip]
	--test-- "blk-m125"	--assert parse		[a b a b]	[while ['b | 'a]]

	--test-- "blk-m130"	--assert error? try [parse [] [ahead]]
	--test-- "blk-m131"	--assert parse		[a]			[ahead 'a 'a]
	--test-- "blk-m132"	--assert parse		[1]			[ahead [block! | integer!] skip]

===end-group===

===start-group=== "block-part"
	input: [h 5 #"l" "l" o]
	input2: [a a a b b]

	--test-- "blk-part-1"
		v: none
		--assert not parse/part input [copy v 3 skip] 2
		--assert none? v

	--test-- "blk-part-2"
		v: none
		--assert parse/part input [copy v 3 skip] 3
		--assert v = [h 5 #"l"]

	--test-- "blk-part-3"
		v: none
		--assert not parse/part input [copy v 3 skip] 4
		--assert v = [h 5 #"l"]

	--test-- "blk-part-4"
		v: none
		--assert parse/part input [copy v 3 skip skip] 4
		--assert v = [h 5 #"l"]

	--test-- "blk-part-5"
		v: none
		--assert parse/part next input [copy v 3 skip] 3
		--assert v = [5 #"l" "l"]

	--test-- "blk-part-6"
		v: none
		--assert not parse/part input [copy v to 'o skip] 3
		--assert none? v

	--test-- "blk-part-7"
		v: none
		--assert parse/part input [copy v to 'o skip] 5
		--assert v = [h 5 #"l" "l"]

	--test-- "blk-part-8"
		v: none
		--assert not parse/part input2 [copy v 3 'a] 2
		--assert none? v

	--test-- "blk-part-9"
		v: none
		--assert parse/part input2 [copy v 3 'a] 3
		--assert v = [a a a]


	--test-- "blk-part-10"
		v: none
		--assert not parse/part input [copy v 3 skip] skip input 2
		--assert none? v

	--test-- "blk-part-21"
		v: none
		--assert parse/part input [copy v 3 skip] skip input 3
		--assert v = [h 5 #"l"]

	--test-- "blk-part-22"
		v: none
		--assert not parse/part input [copy v 3 skip] skip input 4
		--assert v = [h 5 #"l"]

	--test-- "blk-part-23"
		v: none
		--assert parse/part input [copy v 3 skip skip] skip input 4
		--assert v = [h 5 #"l"]

	--test-- "blk-part-24"
		v: none
		--assert parse/part next input [copy v 3 skip] skip input 4
		--assert v = [5 #"l" "l"]

	--test-- "blk-part-25"
		v: none
		--assert not parse/part input [copy v to 'o skip] skip input 3
		--assert none? v

	--test-- "blk-part-26"
		v: none
		--assert parse/part input [copy v to 'o skip] skip input 5
		--assert v = [h 5 #"l" "l"]

	--test-- "blk-part-27"
		v: none
		--assert not parse/part input2 [copy v 3 'a] skip input2 2
		--assert none? v

	--test-- "blk-part-28"
		v: none
		--assert parse/part input2 [copy v 3 'a] skip input2 3
		--assert v = [a a a]

===end-group===

===start-group=== "block-bugs"

	--test-- "#562" 	--assert not parse 	[+] 		[any ['+ if (no)]]
	--test-- "#564-1"	--assert not parse  [a] 		[0 skip]
	--test-- "#564-2"	--assert parse 		[a] 		[0 skip 'a]

	--test-- "#564-3"
		z: none
		--assert not parse 	[a] [copy z 0 skip]
		--assert z = []

	--test-- "blk-integer-bug" parse 		[1 2]		[1 2 integer!]

	--test-- "#566"
		b: next [0 9]
		--assert parse [1 [2]] [collect into b [keep integer! keep block!]]
		--assert b = [1 [2] 9]
		--assert [0 1 [2] 9] = head b

	--test-- "#565"
		b: []
		--assert parse [1] [collect into b [collect [keep integer!]]]
		--assert b = [[1]]
		--assert [[1]] = head b

===end-group===

===start-group=== "string"

	--test-- "str-1" 	--assert parse		""			[]
	--test-- "str-2" 	--assert parse		"a"			[#"a"]
	--test-- "str-3" 	--assert parse		"a"			["a"]
	--test-- "str-4" 	--assert not parse	"a"			[#"b"]
	--test-- "str-5" 	--assert parse		"ab"		[#"a" #"b"]
	--test-- "str-6" 	--assert parse		"ab"		["ab"]
	--test-- "str-7" 	--assert parse		"a"			[[#"a"]]
	--test-- "str-8" 	--assert parse		"ab"		[[#"a"] "b"]
	--test-- "str-9" 	--assert parse		"ab"		[#"a" [#"b"]]
	--test-- "str-10"	--assert parse		"ab"		[[#"a"][#"b"]]

	--test-- "str-11"	--assert parse		"a"			[#"b" | #"a"]
	--test-- "str-12"	--assert not parse	"ab"		[#"b" | "a"]
	--test-- "str-13"	--assert parse		"a"			[[#"b" | #"a"]]
	--test-- "str-14"	--assert not parse	"ab"		[[#"b" | "a"]]
	--test-- "str-15"	--assert parse		"ab"		[["a" | #"b"][#"b" | "a"]]
	
	;--test-- "str-16"	--assert parse		"123"		[integer!]
	
	
	--test-- "str-20"
		res: 0	
		--assert parse "" [(res: 1)]
		--assert res = 1
		
	--test-- "str-21"
		res: 0	
		--assert parse "a" [#"a" (res: 1)]
		--assert res = 1
		
	--test-- "str-22"
		res: 0	
		--assert not parse "a" [#"b" (res: 1)]
		--assert res = 0
		
	--test-- "str-23"
		res: 0	
		--assert parse "" [[(res: 1)]]
		--assert res = 1

	--test-- "str-24"
		res: 0	
		--assert parse "a" [[#"a" (res: 1)]]
		--assert res = 1

	--test-- "str-25"
		res: 0	
		--assert not parse "a" [[#"b" (res: 1)]]
		--assert res = 0
		
	--test-- "str-26"
		res: 0	
		--assert parse "ab" [#"a" (res: 1) [#"c" (res: 2) | #"b" (res: 3)]]
		--assert res = 3
		
	--test-- "str-27"
		res: 0	
		--assert not parse "ab" [#"a" (res: 1) [#"c" (res: 2) | #"d" (res: 3)]]
		--assert res = 1

	--test-- "str-28"	--assert not parse		"aa"		[1 [#"a"]]
	--test-- "str-29"	--assert parse			"aa"		[2 [#"a"]]
	--test-- "str-30"	--assert not parse		"aa"		[3 [#"a"]]
	--test-- "str-31"	--assert not parse		"aa"		[1 1 [#"a"]]
	--test-- "str-32"	--assert parse			"aa"		[1 2 [#"a"]]
	--test-- "str-33"	--assert parse			"aa"		[2 2 [#"a"]]
	--test-- "str-34"	--assert parse			"aa"		[2 3 [#"a"]]
	--test-- "str-35"	--assert not parse		"aa"		[3 4 [#"a"]]
   
	--test-- "str-36"	--assert not parse		"aa"		[1 #"a"]
	--test-- "str-37"	--assert parse			"aa"		[2 #"a"]
	--test-- "str-38"	--assert not parse		"aa"		[3 #"a"]
	--test-- "str-39"	--assert not parse		"aa"		[1 1 #"a"]
	--test-- "str-40"	--assert parse			"aa"		[1 2 #"a"]
	--test-- "str-41"	--assert parse			"aa"		[2 2 #"a"]
	--test-- "str-42"	--assert parse			"aa"		[2 3 #"a"]
	--test-- "str-43"	--assert not parse		"aa"		[3 4 #"a"]

	--test-- "str-44"	--assert not parse		"aa"		[1 skip]
	--test-- "str-45"	--assert parse			"aa"		[2 skip]
	--test-- "str-46"	--assert not parse		"aa"		[3 skip]
	--test-- "str-47"	--assert not parse		"aa"		[1 1 skip]
	--test-- "str-48"	--assert parse			"aa"		[1 2 skip]
	--test-- "str-49"	--assert parse			"aa"		[2 2 skip]
	--test-- "str-50"	--assert parse			"aa"		[2 3 skip]
	--test-- "str-51"	--assert not parse		"aa"		[3 4 skip]
   
	--test-- "str-52"	--assert parse			"a"			[skip]
	--test-- "str-53"	--assert parse			"ab"		[skip skip]
	--test-- "str-54"	--assert parse			"ab"		[skip [skip]]
	--test-- "str-55"	--assert parse			"ab"		[[skip] [skip]]
   
	--test-- "str-56"	--assert parse			"aa"		[some [#"a"]]
	--test-- "str-57"	--assert not parse		"aa"		[some [#"a"] #"b"]
	
	--test-- "str-58"	--assert parse			"aababbba"	[some [skip]]
	--test-- "str-59"	--assert parse			"aababbba"	[some ["a" | "b"]]
	--test-- "str-60"	--assert not parse		"aababbba"	[some ["a" | #"c"]]
   
	--test-- "str-61"	--assert parse			"aa"		[any [#"a"]]
	--test-- "str-62"	--assert parse			"aa"		[some [#"a"] any [#"b"]]
	--test-- "str-63"	--assert parse			"aabb"		[2 #"a" 2 "b"]
	--test-- "str-64"	--assert not parse		"aabb"		[2 "a" 3 #"b"]
	--test-- "str-65"	--assert parse			"aabb"		[some #"a" some "b"]
	--test-- "str-66"	--assert not parse		"aabb"		[some "a" some #"c"]

	--test-- "str-67"
		p: none
		--assert parse "" [p:]
		--assert tail? p
	
	--test-- "str-68"
		p: none
		--assert parse "" [[[p:]]]
		--assert tail? p

		
	--test-- "str-69"
		p: none
		--assert parse "a" [p: #"a"]
		--assert p = "a"
		
	--test-- "str-70"
		p: none
		--assert parse "a" [#"a" p:]
		--assert tail? p
		
	--test-- "str-71"
		p: none
		--assert parse "a" [#"a" [p:]]
		--assert tail? p
		
	--test-- "str-72"
		p: none
		--assert not parse "ab" [#"a" p:]
		--assert p = "b"
	
	--test-- "str-73"
		p: none
		--assert parse "ab" [#"a" [p:][#"b" | #"c"]]
		--assert p = "b"
		
	--test-- "str-74"
		p: none
		--assert parse "aaabb" [3 #"a" p: 2 #"b" :p [2 "b"]]
		--assert p = "bb"
	
	--test-- "str-75"
	--assert parse "baaac" [skip some [#"a"] #"c"]
	
===end-group===

===start-group=== "string-end"

	--test-- "str-end-1" --assert parse 		"a" 	[#"a" end]
	--test-- "str-end-2" --assert not parse 	"ab" 	[#"a" end]
	--test-- "str-end-3" --assert parse 		"a" 	[skip end]
	--test-- "str-end-4" --assert not parse 	"ab"	[skip end]
	--test-- "str-end-5" --assert parse 		""		[end]
	
	--test-- "str-end-6"
		be6: 0
		--assert parse "" [end (be6: 1)]
		--assert be6 = 1

===end-group===

===start-group=== "string-words"
	
	wa: [#"a"]
	wb: [#"b"]
	wca: #"a"
	wcb: #"b"
	wra: [wa]
	wrb: [wb]
	wh: "hello"
	wrab: [#"a" | #"b"]
	wrba: [#"b" | #"a"]
	
	--test-- "str-w1" 	--assert parse 		"a"			[wa]
	--test-- "str-w2" 	--assert not parse 	"a"			[wb]
	--test-- "str-w3" 	--assert parse 		"ab"		[wa wb]
	--test-- "str-w5" 	--assert parse 		"a"			[wra]
	--test-- "str-w6" 	--assert parse 		"ab"		[wra #"b"]
	--test-- "str-w7" 	--assert parse 		"ab"		[#"a" wrb]
	--test-- "str-w8" 	--assert parse 		"ab"		[wra wrb]
	--test-- "str-w9" 	--assert parse 		"hello"		[wh]

	--test-- "str-w10"	--assert parse 		"a" 		[wcb | wca]
	--test-- "str-w11"	--assert not parse 	"ab"		[wb | wa]
	--test-- "str-w12"	--assert parse 		"a"			[[wcb | wca]]
	--test-- "str-w13"	--assert not parse 	"ab"		[wrba]
	--test-- "str-w14"	--assert parse 		"ab"		[wrab wrba]
	
	--test-- "str-w19"
		res: 0	
		--assert parse "a" [wa (res: 1)]
		--assert res = 1
		
	--test-- "str-w20"
		res: 0	
		--assert not parse "a" [wb (res: 1)]
		--assert res = 0
		
	--test-- "str-w21"
		res: 0	
		wres: [(res: 1)]
		--assert parse "" [wres]
		--assert res = 1

	--test-- "str-w22"
		res: 0
		wres: [#"a" (res: 1)]
		--assert parse "a" [wres]
		--assert res = 1

	--test-- "str-w23"
		res: 0
		wres: [#"b" (res: 1)]
		--assert not parse "a" [wres]
		--assert res = 0

===end-group===

===start-group=== "string-extraction"

	wa: [#"a"]
	--test-- "str-ext1" 
		res: 0
		--assert parse "a" [copy res skip]
		--assert res = "a"
	
	--test-- "str-ext2" 
		res: 0
		--assert parse "a" [copy res #"a"]
		--assert res = "a"
		
	--test-- "str-ext4" 
		res:  0
		res2: 0
		--assert parse "a" [copy res copy res2 #"a"]
		--assert res  = "a"
		--assert res2 = "a"
		
	--test-- "str-ext5" 
		res: 0
		--assert parse "aa" [copy res 2 #"a"]
		--assert res = "aa"

	--test-- "str-ext6" 
		res: 0
		--assert not parse "aa" [copy res 3 #"a"]
		--assert res = 0
		
	--test-- "str-ext7" 
		res: 0
		--assert parse "a" [copy res [#"a"]]
		--assert res = "a"

	--test-- "str-ext8" 
		res: 0
		--assert parse "a" [copy res wa]
		--assert res = "a"
	
	--test-- "str-ext9" 
		res: 0
		--assert parse "aa" [copy res 2 wa]
		--assert res = "aa"
	
	--test-- "str-ext10" 
		res: 0
		--assert parse "aab" [skip copy res #"a" skip]
		--assert res = "a"
 
	--test-- "str-ext11" 
		res: 0
		--assert parse "aab" [skip copy res [#"a" | #"b"] skip]
		--assert res = "a"
		
	--test-- "str-ext12" 
		res: 0
		--assert not parse "a" [copy res [#"c" | #"b"]]
		--assert res = 0
		
	--test-- "str-ext13" 
		res: 0
		--assert parse "a" [set res skip]
		--assert res = #"a"

	--test-- "str-ext14" 
		res: 0
		--assert parse "a" [set res #"a"]
		--assert res = #"a"

	--test-- "str-ext16" 
		res:  0
		res2: 0
		--assert parse "a" [set res set res2 #"a"]
		--assert res  = #"a"
		--assert res2 = #"a"

	--test-- "str-ext17" 
		res: 0
		--assert parse "aa" [set res 2 #"a"]
		--assert res = #"a"

	--test-- "str-ext18" 
		res: 0
		--assert not parse "aa" [set res 3 #"a"]
		--assert res = 0

	--test-- "str-ext19" 
		res: 0
		--assert parse "a" [set res [#"a"]]
		--assert res = #"a"

	--test-- "str-ext20" 
		res: 0
		--assert parse "a" [set res wa]
		--assert res = #"a"

	--test-- "str-ext21" 
		res: 0
		--assert parse "aa" [set res 2 wa]
		--assert res = #"a"

	--test-- "str-ext22" 
		res: 0
		--assert parse "aab" [skip set res #"a" skip]
		--assert res = #"a"

	--test-- "str-ext23" 
		res: 0
		--assert parse "aab" [skip set res [#"a" | #"b"] skip]
		--assert res = #"a"

	--test-- "str-ext24" 
		res: 0
		--assert not parse "a" [set res [#"c" | #"b"]]
		--assert res = 0
		
	--test-- "str-ext25" 
		res: 0
		--assert parse "baaac" [skip set res some #"a" #"c"]
		--assert res = #"a"

	--test-- "str-ext26" 
		res: 0
		--assert parse "baaac" [skip set res some wa #"c"]
		--assert res = #"a"

	--test-- "str-ext40"
		res: parse "" [collect []]
		--assert res = []

	--test-- "str-ext41"
		res: parse "1" [collect []]
		--assert res = []

	--test-- "str-ext42"
		res: parse "1" [collect [keep skip]]
		--assert res = [#"1"]

	--test-- "str-ext43"
		digit: charset "0123456789"
		res: parse "123" [collect [some [keep digit]]]
		--assert res = [#"1" #"2" #"3"]

	--test-- "str-ext44"
		res: parse "123" [collect [some [keep [copy v digit if (even? load v)] | skip]]]
		--assert res = [#"2"]

	--test-- "str-ext45"
		res: parse "123" [collect [some [copy d digit keep (load d)]]]
		--assert res = [1 2 3]

	--test-- "str-ext46"
		a: none
		--assert parse "" [collect set a []]
		--assert a = []

	--test-- "str-ext47"
		a: none
		--assert parse "1" [collect set a [keep skip]]
		--assert a = [#"1"]

	--test-- "str-ext49"
		a: []
		--assert parse "" [collect into a []]
		--assert a = []

	--test-- "str-ext50"
		a: []
		--assert parse "1" [collect into a [keep skip]]
		--assert a = [#"1"]
		--assert [#"1"] = head a

	--test-- "str-ext51"
		res: parse "aabbb" [collect [keep some "a" keep some #"b"]]
		--assert res = ["aa" "bbb"]

	--test-- "str-ext52"
		alpha: charset [#"a" - #"z"]
		res: parse "abc|def" [collect [any [keep some alpha | skip]]]
		--assert res = ["abc" "def"]
		
	--test-- "str-ext53 - issue #1093"
		se53-copied: copy ""
		--assert parse "abcde" ["xyz" | copy s to end (se53-copied: :s)]
		--assert "abcde" = se53-copied

		
===end-group===

===start-group=== "string-skipping"

	str: "Lorem ipsum dolor sit amet."
	wa: [#"a"]
	
	--test-- "str-sk1" 	--assert parse		""			[to end]
	--test-- "str-sk2" 	--assert parse		""			[thru end]
	--test-- "str-sk3" 	--assert parse		"a"			[to end]
	--test-- "str-sk4" 	--assert not parse	"a"			[to #"a"]
	--test-- "str-sk5" 	--assert not parse	"a"			[to #"a" end]
	--test-- "str-sk6" 	--assert parse		"a"			[to #"a" skip]
	--test-- "str-sk7" 	--assert parse		"a"			[thru #"a"]
	--test-- "str-sk8" 	--assert parse		"a"			[thru #"a" end]
	--test-- "str-sk9" 	--assert not parse	"a"			[thru #"a"skip]
	--test-- "str-sk10"	--assert parse		"ab"		[to #"a" 2 skip]
	--test-- "str-sk11"	--assert parse		"ab"		[thru #"a" skip]
	--test-- "str-sk12"	--assert parse		"aaab"		[to #"a" to end]
	--test-- "str-sk13"	--assert parse		"aaba"		[skip thru #"a" 2 skip]
	
	--test-- "str-sk14"	--assert not parse	"a"			[to [#"a"]]
	--test-- "str-sk15"	--assert not parse	"a"			[to [#"a"] end]
	--test-- "str-sk16"	--assert parse		"a"			[to [#"a"] skip]
	--test-- "str-sk17"	--assert parse		"a"			[thru [#"a"]]
	--test-- "str-sk18"	--assert parse		"a"			[thru [#"a"] end]
	--test-- "str-sk19"	--assert not parse	"a"			[thru [#"a"] skip]
	--test-- "str-sk20"	--assert parse		"ab"		[to [#"a"] 2 skip]
	--test-- "str-sk21"	--assert parse		"ab"		[thru [#"a"] skip]
	--test-- "str-sk22"	--assert parse		"aaab"		[to [#"a"] to end]
	--test-- "str-sk23"	--assert parse		"aaba"		[skip thru [#"a"] 2 skip]
	
	--test-- "str-sk24"	--assert parse		"zzabc"		[to [#"c" | #"b" | #"a"] 3 skip]
	--test-- "str-sk25"	--assert parse		"zzabc"		[to [#"a" | #"b" | #"c"] 3 skip]

	--test-- "str-sk26"	--assert parse		"zzabc"		[thru [#"c" | #"b" | #"a"] 2 skip]
	--test-- "str-sk27"	--assert parse		"zzabc"		[thru [#"a" | #"b" | #"c"] 2 skip]
	--test-- "str-sk28"	--assert parse		"bbaaac"	[thru 3 #"a" #"c"]
	--test-- "str-sk29"	--assert parse		"bbaaac"	[thru 3 "a" "c"]
	--test-- "str-sk30"	--assert parse		"bbaaac"	[thru 3 wa #"c"]
	--test-- "str-sk31"	--assert parse		"bbaaac"	[thru [3 "a"] "c"]
	--test-- "str-sk32"	--assert parse		"bbaaac"	[thru some "a" "c"]
	--test-- "str-sk33"	--assert parse		"bbaaac"	[thru [some #"a"] "c"]
	--test-- "str-sk34"	--assert parse		"bbaaac"	[thru [some #"x" | "aaa"] "c"]
	
	--test-- "str-sk35"	--assert parse 		str 		[thru "amet" skip]

	--test-- "str-sk36"
		res: 0
		--assert parse str [thru "ipsum" skip copy res to #" " to end]
		--assert res = "dolor"

	--test-- "str-sk37"
		res: 0
		--assert parse str [thru #"p" res: to end]
		--assert 9 = index? res 

	--test-- "str-sk38" --assert not parse	""			[to "a"]
	--test-- "str-sk39" --assert not parse	""			[to #"a"]
	--test-- "str-sk40" --assert not parse	""			[to ["a"]]
	--test-- "str-sk41" --assert not parse	""			[to [#"a"]]

	
===end-group===

===start-group=== "string-casing"

	--test-- "str-c1"	--assert parse 			"a"			["A"]
	--test-- "str-c2"	--assert parse 			"a"			[#"A"]
	--test-- "str-c3"	--assert not parse/case	"a"			["A"]
	--test-- "str-c4"	--assert not parse/case "a"			[#"A"]
	--test-- "str-c5"	--assert parse/case		"a"			["a"]
	--test-- "str-c6"	--assert parse/case 	"a"			[#"a"]
	--test-- "str-c7"	--assert parse/case		"A"			["A"]
	--test-- "str-c8"	--assert parse/case 	"A"			[#"A"]
	--test-- "str-c9"	--assert parse 		 	"TeSt"		["test"]
	--test-- "str-c10"	--assert not parse/case	"TeSt"		["test"]
	--test-- "str-c11"	--assert parse/case		"TeSt"		["TeSt"]

===end-group===

===start-group=== "string-unicode"
	
	--test-- "str-uni1"		--assert parse		"abcdé" 	[#"a" #"b" #"c" #"d" #"é"]
	--test-- "str-uni2"		--assert parse		"abcdé" 	["abcdé"]
	--test-- "str-uni3"		--assert not parse	"abcde" 	[#"a" #"b" #"c" #"d" #"é"]
	--test-- "str-uni4"		--assert parse 		"abcdé" 	[#"a" #"b" #"c" #"d" #"é"]

	--test-- "str-uni5" 
		--assert parse "abcdé✐" [#"a" #"b" #"c" #"d" #"é" #"✐"]

	--test-- "str-uni6"		--assert parse		"abcdé✐"	["abcdé✐"]
	--test-- "str-uni7"		--assert not parse	"abcdé"		["abcdé✐"]
	--test-- "str-uni8"		--assert not parse	"ab✐cdé"	["abcdé✐"]
	--test-- "str-uni9"		--assert not parse	"abcdé✐"	["abcdé"]
	--test-- "str-uni10"	--assert parse		"✐abcdé"	["✐abcdé"]

	--test-- "str-uni11" 
		--assert parse "abcdé✐^(010000)" [#"a" #"b" #"c" #"d" #"é" #"✐" #"^(010000)"]

	--test-- "str-uni12"	--assert parse		"ab^(010000)cdé✐"	["ab^(010000)cdé✐"]
	--test-- "str-uni13"	--assert not parse	"abcdé" 			["abc^(010000)dé"]
	--test-- "str-uni14"	--assert not parse	"^(010000)abcdé"	["a^(010000)bcdé"]
	--test-- "str-uni15"	--assert not parse	"abcdé^(010000)"	["abcdé"]
	--test-- "str-uni16"	--assert parse		"^(010000)abcdé"	["^(010000)abcdé"]
	
===end-group=== 

===start-group=== "string-bitsets"
	
	bs:	   charset ["hello" #"a" - #"z"]
	wbs: [bs]
	wbs2: reduce wbs
	--test-- "str-bs1" 		--assert parse 			"abc" 		[some bs]
	--test-- "str-bs2" 		--assert not parse 		"123" 		[some bs]
	--test-- "str-bs3" 		--assert not parse 		"ABC" 		[some bs]
	--test-- "str-bs4" 		--assert parse 			"abc" 		[some [bs]]
	--test-- "str-bs5" 		--assert not parse 		"123" 		[some [bs]]
	--test-- "str-bs6" 		--assert parse 			"abc" 		[some wbs]
	--test-- "str-bs7" 		--assert not parse 		"123" 		[some wbs]
	--test-- "str-bs8" 		--assert parse 			"abc" 		[some wbs2]
	--test-- "str-bs9" 		--assert not parse 		"123" 		[some wbs2]

	--test-- "str-bs10" 	--assert parse 			"abc" 		[bs bs bs]
	--test-- "str-bs11" 	--assert not parse 		"123" 		[bs bs bs]
	--test-- "str-bs12" 	--assert parse 			"abc" 		[[bs] [bs] [bs]]
	--test-- "str-bs13" 	--assert not parse 		"123" 		[[bs] [bs] [bs]]
	--test-- "str-bs14" 	--assert parse 			"abc" 		[wbs wbs wbs]
	--test-- "str-bs15" 	--assert not parse 		"123" 		[wbs wbs wbs]
	--test-- "str-bs16" 	--assert parse 			"abc" 		[wbs2 wbs2 wbs2]
	--test-- "str-bs17" 	--assert not parse 		"123" 		[wbs2 wbs2 wbs2]


	bs: charset [not "hello123" #"a" - #"z"]
	wbs: [bs]
	wbs2: reduce wbs
	--test-- "str-bs20" 	--assert not parse 		"abc" 		[some bs]
	--test-- "str-bs21" 	--assert parse 			"ABC" 		[some bs]
	--test-- "str-bs22" 	--assert not parse 		"123" 		[some bs]
	--test-- "str-bs23"		--assert parse 			"789" 		[some bs]
	--test-- "str-bs24" 	--assert not parse 		"abc" 		[bs bs bs]
	--test-- "str-bs25" 	--assert parse			"ABC" 		[bs bs bs]
	--test-- "str-bs26" 	--assert not parse 		"123" 		[bs bs bs]
	--test-- "str-bs27" 	--assert parse 			"789" 		[bs bs bs]


	--test-- "str-bs30"
		digit: charset "0123456789"
		--assert parse "hello 123" [to digit p: 3 skip]
		--assert p = "123"


===end-group===

===start-group=== "string-modify"
	ws: charset " ^- ^/^M"
	not-ws: complement ws

	--test-- "str-rem1"	--assert error? try [parse "" [remove]]
	--test-- "str-rem2"		--assert not parse		""			[remove skip]

	--test-- "str-rem3"	
		str: "a"
		--assert parse str [remove skip]
		--assert str = ""

	--test-- "str-rem4"	
		str: "aba"
		--assert parse str [some [#"a" | remove #"b"]]
		--assert str = "aa"

	--test-- "str-rem5"	
		str: "hello world"
		--assert parse str [remove thru ws "world"]
		--assert str = "world"

	--test-- "str-rem6"	
		str: "hello world"
		--assert parse str [remove "hello" skip "world"]
		--assert str = " world"

	--test-- "str-rem7"
		--assert parse s: " t e s t " [any [remove ws | skip]]
		--assert s = "test"

	--test-- "str-rem8"
		--assert parse s: " t e s t " [while [remove ws | skip]]
		--assert s = "test"

	--test-- "str-rem9"
		str: "hello 123 world"
		digit: charset "0123456789"
		--assert parse str [any [remove [some digit #" "] | skip]]
		--assert str = "hello world"

	--test-- "str-ins1"	
		--assert parse str: "" [insert #"1"]
		--assert str = "1"

	--test-- "str-ins2"	
		--assert parse str: "aa" [skip insert #"b" skip]
		--assert str = "aba"

	--test-- "str-ins3"	
		--assert parse str: "" [p: insert #"a" :p remove #"a"]
		--assert str = ""

	--test-- "str-ins4"
		--assert parse str: "test" [some [skip p: insert #"_"] :p remove skip]
		--assert str = "t_e_s_t"

	--test-- "str-chg1"
		--assert parse str: "1" [change skip #"a"]
		--assert str = "a"

	--test-- "str-chg2"
		--assert parse str: "123" [change [3 skip] #"a"]
		--assert str = "a"

	--test-- "str-chg3"
		alpha: charset [#"a" - #"z"]
		--assert parse str: "1a2b3" [some [change alpha dot | skip]]
		--assert str = "1.2.3"

	--test-- "str-chg4"
		--assert parse str: "123" [change 3 skip (99)]
		--assert str = "99"

	--test-- "str-chg5"
		--assert parse str: "test" [some [change #"t" #"o" | skip]]
		--assert str = "oeso"

	--test-- "str-chg6"
		--assert parse str: "12abc34" [some [to alpha change [some alpha] "zzzz"] 2 skip]
		--assert str = "12zzzz34"

	--test-- "str-chg11"
		--assert parse str: "1" [b: skip change b #"a"]
		--assert str = "a"

	--test-- "str-chg12"
		--assert parse str: "123" [b: 3 skip change b #"a"]
		--assert str = "a"

	--test-- "str-chg13"
		alpha: charset [#"a" - #"z"]
		--assert parse str: "1a2b3" [some [b: alpha change b dot | skip]]
		--assert str = "1.2.3"

	--test-- "str-chg14"
		--assert parse str: "123" [b: 3 skip change b (99)]
		--assert str = "99"

	--test-- "str-chg15"
		--assert parse str: "test" [some [b: #"t" change b #"o" | skip]]
		--assert str = "oeso"

	--test-- "str-chg16"
		--assert parse str: "12abc34" [some [to alpha b: some alpha change b "zzzz"] 2 skip]
		--assert str = "12zzzz34"

===end-group===

===start-group=== "string-misc"

	wa: [#"a"]
	wb: [#"b"]
	--test-- "str-m1"	--assert parse 		""			[break]
	--test-- "str-m2"	--assert not parse 	"a"			[break]
	--test-- "str-m3"	--assert parse 		"a"			[[break #"b"] #"a"]
	--test-- "str-m4"	--assert parse 		"a"			[[#"b" | break] #"a"]
	--test-- "str-m5"	--assert parse 		"aa"		[some [#"b" | break] 2 #"a"]
	--test-- "str-m6"	--assert parse 		"aa"		[some [#"b" | [break]] 2 #"a"]
	--test-- "str-m7"	--assert not parse 	"aa"		[some [#"b" | 2 [#"c" | break]] 2 #"a"]

	--test-- "str-m20"	--assert not parse 	""			[fail]
	--test-- "str-m21"	--assert not parse 	"a"			[#"a" fail]
	--test-- "str-m22"	--assert not parse 	"a"			[[fail]]
	--test-- "str-m23"	--assert not parse 	"a"			[fail | fail]
	--test-- "str-m24"	--assert not parse 	"a"			[[fail | fail]]
	--test-- "str-m25"	--assert not parse 	"a"			[#"b" | fail]

	--test-- "str-m30"	--assert not parse 	""			[not end]
	--test-- "str-m31"	--assert parse 		"a"			[not #"b" #"a"]
	--test-- "str-m32"	--assert not parse 	"a"			[not skip]
	--test-- "str-m33"	--assert not parse 	"a"			[not skip skip]
	--test-- "str-m34"	--assert parse 		"a"			[not [#"b"] #"a"]
	--test-- "str-m35"	--assert parse 		"a"			[not wb #"a"]
	--test-- "str-m36"	--assert not parse 	"aa"		[not [#"a" #"a"] to end]
	--test-- "str-m37"	--assert parse 		"aa"		[not [some #"b"] to end]
	--test-- "str-m38"	--assert parse 		"aa"		[some [#"c" | not #"b"] 2 skip]

	--test-- "str-m50"	--assert not parse 	""			[reject]
	--test-- "str-m51"	--assert not parse 	"a"			[reject #"a"]
	--test-- "str-m52"	--assert not parse 	"a"			[reject wa]
	--test-- "str-m53"	--assert not parse 	"a"			[[reject] #"a"]
	--test-- "str-m54"	--assert parse 		"a"			[[reject #"b"] | #"a"]
	--test-- "str-m55"	--assert not parse 	"a"			[[#"b" | reject] #"a"]
	--test-- "str-m56"	--assert parse 		"a"			[[#"b" | reject] | #"a"]
	--test-- "str-m57"	--assert parse 		"aa"		[some reject | 2 #"a"]
	--test-- "str-m58"	--assert parse 		"aa"		[some [reject] | 2 #"a"]
	
	--test-- "str-m60"	--assert parse 		""			[none]
	--test-- "str-m61"	--assert parse 		"a"			[skip none]
	--test-- "str-m62"	--assert parse 		"a"			[none skip none]
	--test-- "str-m63"	--assert parse 		"a"			[#"a" none]
	--test-- "str-m64"	--assert parse 		"a"			[none #"a" none]
	--test-- "str-m65"	--assert parse 		"a"			[wa none]
	--test-- "str-m66"	--assert parse 		"a"			[none wa none]
	--test-- "str-m67"	--assert parse 		"a"			[[#"b" | none] #"a"]
	--test-- "str-m68"	--assert parse 		"a"			[[#"b" | [none]] #"a"]
	--test-- "str-m69"	--assert parse 		"a"			[[[#"b" | [none]]] #"a"]

	--test-- "str-m80"	--assert parse 		""			[opt none]
	--test-- "str-m81"	--assert parse 		""			[opt #"a"]
	--test-- "str-m82"	--assert parse 		"a"			[opt #"a"]
	--test-- "str-m83"	--assert parse 		"a"			[opt #"b" #"a"]
	--test-- "str-m84"	--assert parse 		"a"			[opt [#"a"]]
	--test-- "str-m85"	--assert parse 		"a"			[opt wa]
	--test-- "str-m86"	--assert parse 		"a"			[opt skip]
	--test-- "str-m87"	--assert parse 		"abc"		[skip opt #"b" skip]

	--test-- "str-m90"	--assert not parse	""			[then skip]
	--test-- "blk-m91"	--assert parse		""			[then skip | end]
	--test-- "str-m92"	--assert parse		"a"			[then #"a" | #"b"]
	--test-- "str-m93"	--assert not parse	"c"			[then #"a" | #"b"]
	--test-- "str-m94"	--assert parse		"b"			[then #"a" | #"b"]
	--test-- "str-m95"	--assert parse		"za"		[#"z" then #"a" | #"b"]

	x: none
	--test-- "str-m100"	--assert parse		"246"		[any [copy x skip if (even? load x)]]
	--test-- "str-m101"	--assert not parse	"1"			[copy x skip if (even? load x)]
	--test-- "str-m102"	--assert not parse	"15"		[some [copy x skip if (even? load x)]]

	--test-- "str-m120"	--assert parse		""			[while #"a"]
	--test-- "str-m121"	--assert parse		""			[while #"b"]
	--test-- "str-m122"	--assert parse		"a"			[while #"a"]
	--test-- "str-m123"	--assert not parse	"a"			[while #"b"]
	--test-- "str-m124"	--assert parse		"a"			[while #"b" skip]
	--test-- "str-m125"	--assert parse		"abab"		[while [#"b" | #"a"]]

	--test-- "str-m130"	--assert error? try [parse "" [ahead]]
	--test-- "str-m131"	--assert parse		"a"			[ahead #"a" #"a"]
	--test-- "str-m132"	--assert parse		"1"			[ahead [#"a" | #"1"] skip]

===end-group===

===start-group=== "string-part"
	input: "hello"
	input2: "aaabb"
	letters: charset [#"a" - #"o"]

	--test-- "str-part-1"
		v: none
		--assert not parse/part input [copy v 3 skip] 2
		--assert none? v

	--test-- "str-part-2"
		v: none
		--assert parse/part input [copy v 3 skip] 3
		--assert v = "hel"

	--test-- "str-part-3"
		v: none
		--assert not parse/part input [copy v 3 skip] 4
		--assert v = "hel"

	--test-- "str-part-4"
		v: none
		--assert parse/part input [copy v 3 skip skip] 4
		--assert v = "hel"

	--test-- "str-part-5"
		v: none
		--assert parse/part next input [copy v 3 skip] 3
		--assert v = "ell"

	--test-- "str-part-6"
		v: none
		--assert not parse/part input [copy v to #"o" skip] 3
		--assert none? v

	--test-- "str-part-7"
		v: none
		--assert parse/part input [copy v to #"o" skip] 5
		--assert v = "hell"

	--test-- "str-part-8"
		v: none
		--assert not parse/part input [copy v 3 letters] 2
		--assert none? v

	--test-- "str-part-9"
		v: none
		--assert parse/part input [copy v 3 letters] 3
		--assert v = "hel"

	--test-- "str-part-10"
		v: none
		--assert not parse/part input2 [copy v 3 #"a"] 2
		--assert none? v

	--test-- "str-part-11"
		v: none
		--assert parse/part input2 [copy v 3 #"a"] 3
		--assert v = "aaa"


	--test-- "str-part-20"
		v: none
		--assert not parse/part input [copy v 3 skip] skip input 2
		--assert none? v

	--test-- "str-part-21"
		v: none
		--assert parse/part input [copy v 3 skip] skip input 3
		--assert v = "hel"

	--test-- "str-part-22"
		v: none
		--assert not parse/part input [copy v 3 skip] skip input 4
		--assert v = "hel"

	--test-- "str-part-23"
		v: none
		--assert parse/part input [copy v 3 skip skip] skip input 4
		--assert v = "hel"

	--test-- "str-part-24"
		v: none
		--assert parse/part next input [copy v 3 skip] skip input 4
		--assert v = "ell"

	--test-- "str-part-25"
		v: none
		--assert not parse/part input [copy v to #"o" skip] skip input 3
		--assert none? v

	--test-- "str-part-26"
		v: none
		--assert parse/part input [copy v to #"o" skip] skip input 5
		--assert v = "hell"

	--test-- "str-part-27"
		v: none
		--assert not parse/part input [copy v 3 letters] skip input 2
		--assert none? v

	--test-- "str-part-28"
		v: none
		--assert parse/part input [copy v 3 letters] skip input 3
		--assert v = "hel"

	--test-- "str-part-29"
		v: none
		--assert not parse/part input2 [copy v 3 #"a"] skip input2 2
		--assert none? v

	--test-- "str-part-30"
		v: none
		--assert parse/part input2 [copy v 3 #"a"] skip input2 3
		--assert v = "aaa"

===end-group===

===start-group=== "string-complex"

	--test-- "str-cplx1"
		expr:    [term ["+" | "-"] expr | term]
		term:    [factor ["*" | "/"] term | factor]
		factor:  [primary "**" factor | primary]
		primary: [some digit | "(" expr ")"]
		digit:   charset "0123456789"

		--assert 	 parse "1" expr
		--assert not parse "1+" expr
		--assert 	 parse "1+2" expr
		--assert not parse "1+2*" expr
		--assert not parse "1+2*(" expr
		--assert not parse "1+2*(3" expr
		--assert not parse "1+2*(3-" expr
		--assert not parse "1+2*(3-2" expr
		--assert 	 parse "1+2*(3-2)" expr
		--assert not parse "1+2*(3-2)/" expr
		--assert 	 parse "1+2*(3-2)/4" expr

		--assert parse "(1)" expr
		--assert parse "(1*9)" expr
		--assert not parse "(+)" expr
		--assert parse "1+2*(3-2)/4" expr
		--assert parse "4/5+3**2-(5*6+1)" expr
		--assert not parse "a+b" expr
		--assert not parse "123a+2" expr

	--test-- "str-cplx2"
		html: {
			<html>
				<head><title>Test</title></head>
				<body><div><u>Hello</u> <b>World</b></div></body>
			</html>
		}	
		ws: charset " ^- ^/^M"
		res: parse html rule: [
			collect [any [
				ws
				| "</" thru ">" break
				| "<" copy name to ">" skip keep (load name) opt rule
				| copy str to "<" keep (str)
			]]
		]
		--assert res = [html [head [title ["Test"]] body [div [u ["Hello"] b ["World"]]]]]

	--test-- "str-cplx3"
		foo: func [value][value]
		res: parse [a 3 4 t [t 9] "test" 8][
			collect [
				any [
					keep integer!
					| p: block! :p into [
						collect [any [keep integer! keep ('+) | skip keep (foo '-)]]
					] 
					| skip
				]
			]
		]
		--assert res = [3 4 [- 9 +] 8]


	--test-- "str-cplx4"
		;-- test taken from http://www.rebol.net/wiki/Parse_Project#AND
		nanb: [#"a" opt nanb #"b"]
 		nbnc: [#"b" opt nbnc #"c"]
		nanbnc: [ahead [nanb #"c"] some #"a" nbnc]

		--assert parse 		"abc" 		nanbnc
		--assert parse 		"aabbcc" 	nanbnc
		--assert parse 		"aaabbbccc" nanbnc
		--assert not parse 	"abbc" 		nanbnc
		--assert not parse 	"abcc" 		nanbnc
		--assert not parse 	"aabbc"		nanbnc

	--test-- "str-cplx5"
		split: function [series [string!] dlm [string! char!] /local value][
		  rule: complement charset dlm
		  parse series [collect [any [keep copy value some rule | skip]]]
		]
		--assert ["Hello" "bright" "world!"]  = split "Hello bright world!" space
		--assert ["Hell" "bright" "w" "rld!"] = split "Hello bright world!" " o"

===end-group===

===start-group=== "string-bugs"

	--test-- "#562" 	--assert not parse 	"+"			[any [#"+" if (no)]]
	--test-- "#564-1"	--assert not parse  "a" 		[0 skip]
	--test-- "#564-2"	--assert parse 		"a" 		[0 skip #"a"]

	--test-- "#564-3"
		z: none
		--assert not parse "a" [copy z 0 skip]
		--assert z = ""

	--test-- "#564-4"
		f: func [
			s [string!]
		][
			r: [
				copy l  skip (l: load l)
				copy x  l skip
				[
					#","
					| #"]" if (f x)
				]
			]
			parse s [any r end]
		]
		--assert f "420,]]"

	--test-- "#563"
		r: [#"+" if (res: f563 "-" --assert not res res)]
		f563: func [t [string!]][parse t [any r]]
		--assert not f563 "-"
		--assert not f563 "+"

	--test-- "#567"
		res: parse "12" [collect [keep copy value 2 skip]]
		--assert res = ["12"]

	--test-- "#569"
		size: 1
		res: parse "1" [collect [keep copy value size skip]]
		--assert res = ["1"]
		size: 2
		res: parse "12" [collect [keep copy value size skip]]
		--assert res = ["12"]
		
	--test-- "#678"
		--assert parse "cat" [1 "cat"]
		--assert not parse "cat" [2 "cat"]
		--assert not parse "cat" [3 "cat"]
		--assert not parse "cat" [4 "cat"]
		--assert parse "catcat" [2 "cat"]
		--assert parse "catcatcat" [3 "cat"]
		--assert parse "catcatcatcat" [4 "cat"]
		
	--test-- "#748"
		txt: "Hello world"
		parse txt [ while any [ remove "l" | skip ] ]
		--assert txt = "Heo word"
		--assert 8 = length? txt

===end-group===

===start-group=== "binary"

	--test-- "bin-1" 	--assert parse		#{}			[]
	--test-- "bin-2" 	--assert parse		#{0A}		[#{0A}]
	--test-- "bin-3" 	--assert parse		#{0A}		[#"^(0A)"]
	--test-- "bin-4" 	--assert not parse	#{0A}		[#{0B}]
	--test-- "bin-5" 	--assert parse		#{0A0B}		[#{0A} #{0B}]
	--test-- "bin-6" 	--assert parse		#{0A0B}		[#{0A0B}]
	--test-- "bin-7" 	--assert parse		#{0A}		[[#{0A}]]
	--test-- "bin-8" 	--assert parse		#{0A0B}		[[#{0A}] #{0B}]
	--test-- "bin-9" 	--assert parse		#{0A0B}		[#{0A} [#{0B}]]
	--test-- "bin-10"	--assert parse		#{0A0B}		[[#{0A}][#{0B}]]

	--test-- "bin-11"	--assert parse		#{0A}		[#{0B} | #{0A}]
	--test-- "bin-12"	--assert not parse	#{0A0B}		[#{0B} | #{0A}]
	--test-- "bin-13"	--assert parse		#{0A}		[[#{0B} | #{0A}]]
	--test-- "bin-14"	--assert not parse	#{0A0B}		[[#{0B} | #{0A}]]
	--test-- "bin-15"	--assert parse		#{0A0B}		[[#{0A} | #{0B}][#{0B} | #{0A}]]
		
	
	--test-- "bin-20"
		res: 0	
		--assert parse #{} [(res: 1)]
		--assert res = 1
		
	--test-- "bin-21"
		res: 0	
		--assert parse #{0A} [#{0A} (res: 1)]
		--assert res = 1
		
	--test-- "bin-22"
		res: 0	
		--assert not parse #{0A} [#{0B} (res: 1)]
		--assert res = 0
		
	--test-- "bin-23"
		res: 0	
		--assert parse #{} [[(res: 1)]]
		--assert res = 1

	--test-- "bin-24"
		res: 0	
		--assert parse #{0A} [[#{0A} (res: 1)]]
		--assert res = 1

	--test-- "bin-25"
		res: 0	
		--assert not parse #{0A} [[#{0B} (res: 1)]]
		--assert res = 0
		
	--test-- "bin-26"
		res: 0	
		--assert parse #{0A0B} [#{0A} (res: 1) [#"^(0C)" (res: 2) | #{0B} (res: 3)]]
		--assert res = 3
		
	--test-- "bin-27"
		res: 0	
		--assert not parse #{0A0B} [#{0A} (res: 1) [#{0C} (res: 2) | #{0D} (res: 3)]]
		--assert res = 1

	--test-- "bin-28"	--assert not parse		#{0A0A}		[1 [#{0A}]]
	--test-- "bin-29"	--assert parse			#{0A0A}		[2 [#{0A}]]
	--test-- "bin-30"	--assert not parse		#{0A0A}		[3 [#{0A}]]
	--test-- "bin-31"	--assert not parse		#{0A0A}		[1 1 [#{0A}]]
	--test-- "bin-32"	--assert parse			#{0A0A}		[1 2 [#{0A}]]
	--test-- "bin-33"	--assert parse			#{0A0A}		[2 2 [#{0A}]]
	--test-- "bin-34"	--assert parse			#{0A0A}		[2 3 [#{0A}]]
	--test-- "bin-35"	--assert not parse		#{0A0A}		[3 4 [#{0A}]]
   
	--test-- "bin-36"	--assert not parse		#{0A0A}		[1 #{0A}]
	--test-- "bin-37"	--assert parse			#{0A0A}		[2 #{0A}]
	--test-- "bin-38"	--assert not parse		#{0A0A}		[3 #{0A}]
	--test-- "bin-39"	--assert not parse		#{0A0A}		[1 1 #{0A}]
	--test-- "bin-40"	--assert parse			#{0A0A}		[1 2 #{0A}]
	--test-- "bin-41"	--assert parse			#{0A0A}		[2 2 #{0A}]
	--test-- "bin-42"	--assert parse			#{0A0A}		[2 3 #{0A}]
	--test-- "bin-43"	--assert not parse		#{0A0A}		[3 4 #{0A}]

	--test-- "bin-44"	--assert not parse		#{0A0A}		[1 skip]
	--test-- "bin-45"	--assert parse			#{0A0A}		[2 skip]
	--test-- "bin-46"	--assert not parse		#{0A0A}		[3 skip]
	--test-- "bin-47"	--assert not parse		#{0A0A}		[1 1 skip]
	--test-- "bin-48"	--assert parse			#{0A0A}		[1 2 skip]
	--test-- "bin-49"	--assert parse			#{0A0A}		[2 2 skip]
	--test-- "bin-50"	--assert parse			#{0A0A}		[2 3 skip]
	--test-- "bin-51"	--assert not parse		#{0A0A}		[3 4 skip]
   
	--test-- "bin-52"	--assert parse			#{0A}		[skip]
	--test-- "bin-53"	--assert parse			#{0A0B}		[skip skip]
	--test-- "bin-54"	--assert parse			#{0A0B}		[skip [skip]]
	--test-- "bin-55"	--assert parse			#{0A0B}		[[skip] [skip]]
   
	--test-- "bin-56"	--assert parse			#{0A0A}		[some [#{0A}]]
	--test-- "bin-57"	--assert not parse		#{0A0A}		[some [#{0A}] #{0B}]
	
	--test-- "bin-58"	--assert parse			#{0A0A0B0A0B0B0B0A} [some [skip]]
	--test-- "bin-59"	--assert parse			#{0A0A0B0A0B0B0B0A} [some [#{0A} | #{0B}]]
	--test-- "bin-60"	--assert not parse		#{0A0A0B0A0B0B0B0A} [some [#{0A} | #"^(0C)"]]
   
	--test-- "bin-61"	--assert parse			#{0A0A}		[any [#{0A}]]
	--test-- "bin-62"	--assert parse			#{0A0A}		[some [#{0A}] any [#{0B}]]
	--test-- "bin-63"	--assert parse			#{0A0A0B0B}	[2 #{0A} 2 #{0B}]
	--test-- "bin-64"	--assert not parse		#{0A0A0B0B}	[2 #{0A} 3 #{0B}]
	--test-- "bin-65"	--assert parse			#{0A0A0B0B}	[some #{0A} some #{0B}]
	--test-- "bin-66"	--assert not parse		#{0A0A0B0B}	[some #{0A} some #"^(0C)"]

	--test-- "bin-67"
		p: none
		--assert parse #{} [p:]
		--assert tail? p
	
	--test-- "bin-68"
		p: none
		--assert parse #{} [[[p:]]]
		--assert tail? p

		
	--test-- "bin-69"
		p: none
		--assert parse #{0A} [p: #{0A}]
		--assert p = #{0A}
		
	--test-- "bin-70"
		p: none
		--assert parse #{0A} [#{0A} p:]
		--assert tail? p
		
	--test-- "bin-71"
		p: none
		--assert parse #{0A} [#{0A} [p:]]
		--assert tail? p
		
	--test-- "bin-72"
		p: none
		--assert not parse #{0A0B} [#{0A} p:]
		--assert p = #{0B}
	
	--test-- "bin-73"
		p: none
		--assert parse #{0A0B} [#{0A} [p:][#{0B} | #"^(0C)"]]
		--assert p = #{0B}
		
	--test-- "bin-74"
		p: none
		--assert parse #{0A0A0A0B0B} [3 #{0A} p: 2 #{0B} :p [2 #{0B}]]
		--assert p = #{0B0B}
	
	--test-- "bin-75"
	--assert parse #{0B0A0A0A0C} [skip some [#{0A}] #"^(0C)"]
	
===end-group===

===start-group=== "binary-end"

	--test-- "bin-end-1" --assert parse 		#{0A} 	 [#{0A} end]
	--test-- "bin-end-2" --assert not parse 	#{0A0B}  [#{0A} end]
	--test-- "bin-end-3" --assert parse 		#{0A} 	 [skip end]
	--test-- "bin-end-4" --assert not parse 	#{0A0B}	 [skip end]
	--test-- "bin-end-5" --assert parse 		#{}		 [end]
	
	--test-- "bin-end-6"
		be6: 0
		--assert parse #{} [end (be6: 1)]
		--assert be6 = 1

===end-group===

===start-group=== "binary-words"
	
	wa: [#{0A}]
	wb: [#{0B}]
	wca: #{0A}
	wcb: #{0B}
	wra: [wa]
	wrb: [wb]
	wh: #{88031100}
	wrab: [#{0A} | #{0B}]
	wrba: [#{0B} | #{0A}]
	
	--test-- "bin-w1" 	--assert parse 		#{0A}		[wa]
	--test-- "bin-w2" 	--assert not parse 	#{0A}		[wb]
	--test-- "bin-w3" 	--assert parse 		#{0A0B}		[wa wb]
	--test-- "bin-w5" 	--assert parse 		#{0A}		[wra]
	--test-- "bin-w6" 	--assert parse 		#{0A0B}		[wra #{0B}]
	--test-- "bin-w7" 	--assert parse 		#{0A0B}		[#{0A} wrb]
	--test-- "bin-w8" 	--assert parse 		#{0A0B}		[wra wrb]
	--test-- "bin-w9" 	--assert parse 		#{88031100}	[wh]

	--test-- "bin-w10"	--assert parse 		#{0A} 		[wcb | wca]
	--test-- "bin-w11"	--assert not parse 	#{0A0B}		[wb | wa]
	--test-- "bin-w12"	--assert parse 		#{0A}		[[wcb | wca]]
	--test-- "bin-w13"	--assert not parse 	#{0A0B}		[wrba]
	--test-- "bin-w14"	--assert parse 		#{0A0B}		[wrab wrba]
	
	--test-- "bin-w19"
		res: 0	
		--assert parse #{0A} [wa (res: 1)]
		--assert res = 1
		
	--test-- "bin-w20"
		res: 0	
		--assert not parse #{0A} [wb (res: 1)]
		--assert res = 0
		
	--test-- "bin-w21"
		res: 0	
		wres: [(res: 1)]
		--assert parse #{} [wres]
		--assert res = 1

	--test-- "bin-w22"
		res: 0
		wres: [#{0A} (res: 1)]
		--assert parse #{0A} [wres]
		--assert res = 1

	--test-- "bin-w23"
		res: 0
		wres: [#{0B} (res: 1)]
		--assert not parse #{0A} [wres]
		--assert res = 0

===end-group===

===start-group=== "binary-extraction"

	wa: [#{0A}]
	--test-- "bin-ext1" 
		res: 0
		--assert parse #{0A} [copy res skip]
		--assert res = #{0A}
	
	--test-- "bin-ext2" 
		res: 0
		--assert parse #{0A} [copy res #{0A}]
		--assert res = #{0A}
		
	--test-- "bin-ext4" 
		res:  0
		res2: 0
		--assert parse #{0A} [copy res copy res2 #{0A}]
		--assert res  = #{0A}
		--assert res2 = #{0A}
		
	--test-- "bin-ext5" 
		res: 0
		--assert parse #{0A0A} [copy res 2 #{0A}]
		--assert res = #{0A0A}

	--test-- "bin-ext6" 
		res: 0
		--assert not parse #{0A0A} [copy res 3 #{0A}]
		--assert res = 0
		
	--test-- "bin-ext7" 
		res: 0
		--assert parse #{0A} [copy res [#{0A}]]
		--assert res = #{0A}

	--test-- "bin-ext8" 
		res: 0
		--assert parse #{0A} [copy res wa]
		--assert res = #{0A}
	
	--test-- "bin-ext9" 
		res: 0
		--assert parse #{0A0A} [copy res 2 wa]
		--assert res = #{0A0A}
	
	--test-- "bin-ext10" 
		res: 0
		--assert parse #{0A0A0B} [skip copy res #{0A} skip]
		--assert res = #{0A}
 
	--test-- "bin-ext11" 
		res: 0
		--assert parse #{0A0A0B} [skip copy res [#{0A} | #{0B}] skip]
		--assert res = #{0A}
		
	--test-- "bin-ext12" 
		res: 0
		--assert not parse #{0A} [copy res [#"^(0C)" | #{0B}]]
		--assert res = 0
		
	--test-- "bin-ext13" 
		res: 0
		--assert parse #{0A} [set res skip]
		--assert res = 10

	--test-- "bin-ext14" 
		res: 0
		--assert parse #{0A} [set res #{0A}]
		--assert res = 10

	--test-- "bin-ext16" 
		res:  0
		res2: 0
		--assert parse #{0A} [set res set res2 #{0A}]
		--assert res  = 10
		--assert res2 = 10

	--test-- "bin-ext17" 
		res: 0
		--assert parse #{0A0A} [set res 2 #{0A}]
		--assert res = 10

	--test-- "bin-ext18" 
		res: 0
		--assert not parse #{0A0A} [set res 3 #{0A}]
		--assert res = 0

	--test-- "bin-ext19" 
		res: 0
		--assert parse #{0A} [set res [#{0A}]]
		--assert res = 10

	--test-- "bin-ext20" 
		res: 0
		--assert parse #{0A} [set res wa]
		--assert res = 10

	--test-- "bin-ext21" 
		res: 0
		--assert parse #{0A0A} [set res 2 wa]
		--assert res = 10

	--test-- "bin-ext22" 
		res: 0
		--assert parse #{0A0A0B} [skip set res #{0A} skip]
		--assert res = 10

	--test-- "bin-ext23" 
		res: 0
		--assert parse #{0A0A0B} [skip set res [#{0A} | #{0B}] skip]
		--assert res = 10

	--test-- "bin-ext24" 
		res: 0
		--assert not parse #{0A} [set res [#"^(0C)" | #{0B}]]
		--assert res = 0
		
	--test-- "bin-ext25" 
		res: 0
		--assert parse #{0B0A0A0A0C} [skip set res some #{0A} #"^(0C)"]
		--assert res = 10

	--test-- "bin-ext26" 
		res: 0
		--assert parse #{0B0A0A0A0C} [skip set res some wa #"^(0C)"]
		--assert res = 10

	--test-- "bin-ext40"
		res: parse #{} [collect []]
		--assert res = []

	--test-- "bin-ext41"
		res: parse #{01} [collect []]
		--assert res = []

	--test-- "bin-ext42"
		res: parse #{01} [collect [keep skip]]
		--assert res = [1]

	--test-- "bin-ext43"
		digit: charset [0 - 9]
		res: parse #{010203} [collect [some [keep digit]]]
		--assert res = [1 2 3]

	--test-- "bin-ext44"
		res: parse #{010203} [collect [some [keep [copy v digit if (even? first v)] | skip]]]
		--assert res = [2]

	--test-- "bin-ext45"
		res: parse #{010203} [collect [some [copy d digit keep (1 + first d)]]]
		--assert res = [2 3 4]

	--test-- "bin-ext46"
		a: none
		--assert parse #{} [collect set a []]
		--assert a = []

	--test-- "bin-ext47"
		a: none
		--assert parse #{01} [collect set a [keep skip]]
		--assert a = [1]

	--test-- "bin-ext49"
		a: []
		--assert parse #{} [collect into a []]
		--assert a = []

	--test-- "bin-ext50"
		a: []
		--assert parse #{01} [collect into a [keep skip]]
		--assert a = [1]
		--assert [1] = head a

	--test-- "bin-ext51"
		res: parse #{0A0A0B0B0B} [collect [keep some #{0A} keep some #{0B}]]
		--assert res = [#{0A0A} #{0B0B0B}]

	--test-- "bin-ext52"
		digit: charset [0 - 9]
		res: parse #{01020311040506} [collect [any [keep some digit | skip]]]
		--assert res = [#{010203} #{040506}]
		
	--test-- "bin-ext53 - issue #1093"
		se53-copied: copy #{}
		--assert parse #{0102030405} [#{AABBCC} | copy s to end (se53-copied: :s)]
		--assert #{0102030405} = se53-copied

		
===end-group===

===start-group=== "binary-skipping"

	bin: #{0BAD00CAFE00BABE00DEADBEEF00}
	wa: [#{0A}]
	
	--test-- "bin-sk1" 	--assert parse		#{}			[to end]
	--test-- "bin-sk2" 	--assert parse		#{}			[thru end]
	--test-- "bin-sk3" 	--assert parse		#{0A}		[to end]
	--test-- "bin-sk4" 	--assert not parse	#{0A}		[to #{0A}]
	--test-- "bin-sk5" 	--assert not parse	#{0A}		[to #{0A} end]
	--test-- "bin-sk6" 	--assert parse		#{0A}		[to #{0A} skip]
	--test-- "bin-sk7" 	--assert parse		#{0A}		[thru #{0A}]
	--test-- "bin-sk8" 	--assert parse		#{0A}		[thru #{0A} end]
	--test-- "bin-sk9" 	--assert not parse	#{0A}		[thru #{0A}skip]
	--test-- "bin-sk10"	--assert parse		#{0A0B}		[to #{0A} 2 skip]
	--test-- "bin-sk11"	--assert parse		#{0A0B}		[thru #{0A} skip]
	--test-- "bin-sk12"	--assert parse		#{0A0A0A0B}	[to #{0A} to end]
	--test-- "bin-sk13"	--assert parse		#{0A0A0B0A}	[skip thru #{0A} 2 skip]
	
	--test-- "bin-sk14"	--assert not parse	#{0A}		[to [#{0A}]]
	--test-- "bin-sk15"	--assert not parse	#{0A}		[to [#{0A}] end]
	--test-- "bin-sk16"	--assert parse		#{0A}		[to [#{0A}] skip]
	--test-- "bin-sk17"	--assert parse		#{0A}		[thru [#{0A}]]
	--test-- "bin-sk18"	--assert parse		#{0A}		[thru [#{0A}] end]
	--test-- "bin-sk19"	--assert not parse	#{0A}		[thru [#{0A}] skip]
	--test-- "bin-sk20"	--assert parse		#{0A0B}		[to [#{0A}] 2 skip]
	--test-- "bin-sk21"	--assert parse		#{0A0B}		[thru [#{0A}] skip]
	--test-- "bin-sk22"	--assert parse		#{0A0A0A0B}	[to [#{0A}] to end]
	--test-- "bin-sk23"	--assert parse		#{0A0A0B0A}	[skip thru [#{0A}] 2 skip]
	
	--test-- "bin-sk24"	--assert parse		#{99990A0B0C} [to [#"^(0C)" | #{0B} | #{0A}] 3 skip]
	--test-- "bin-sk25"	--assert parse		#{99990A0B0C} [to [#{0A} | #{0B} | #"^(0C)"] 3 skip]

	--test-- "bin-sk26"	--assert parse		#{99990A0B0C} [thru [#"^(0C)" | #{0B} | #{0A}] 2 skip]
	--test-- "bin-sk27"	--assert parse		#{99990A0B0C} [thru [#{0A} | #{0B} | #"^(0C)"] 2 skip]
	--test-- "bin-sk28"	--assert parse		#{0B0B0A0A0A0C}	[thru 3 #{0A} #"^(0C)"]
	--test-- "bin-sk29"	--assert parse		#{0B0B0A0A0A0C}	[thru 3 #{0A} #{0C}]
	--test-- "bin-sk30"	--assert parse		#{0B0B0A0A0A0C}	[thru 3 wa #"^(0C)"]
	--test-- "bin-sk31"	--assert parse		#{0B0B0A0A0A0C}	[thru [3 #{0A}] #{0C}]
	--test-- "bin-sk32"	--assert parse		#{0B0B0A0A0A0C}	[thru some #{0A} #{0C}]
	--test-- "bin-sk33"	--assert parse		#{0B0B0A0A0A0C}	[thru [some #{0A}] #{0C}]
	--test-- "bin-sk34"	--assert parse		#{0B0B0A0A0A0C}	[thru [some #"x" | #{0A0A0A}] #{0C}]
	
	--test-- "bin-sk35"	--assert parse 		bin 		[thru #{DEADBEEF} skip]

	--test-- "bin-sk36"
		res: 0
		--assert parse bin [thru #{CAFE} skip copy res to #"^(00)" to end]
		--assert res = #{BABE}

	--test-- "bin-sk37"
		res: 0
		--assert parse bin [thru #{BABE} res: to end]
		--assert 9 = index? res 

	--test-- "bin-sk38" --assert not parse	#{}			[to #{0A}]
	--test-- "bin-sk39" --assert not parse	#{}			[to #"^(0A)"]
	--test-- "bin-sk40" --assert not parse	#{}			[to [#{0A}]]
	--test-- "bin-sk41" --assert not parse	#{}			[to [#"^(0A)"]]

	
===end-group===

===start-group=== "binary-bitsets"
	
	bs:	   charset [16 - 31 #"^(0A)" - #"^(0F)"]
	wbs: [bs]
	wbs2: reduce wbs
	--test-- "bin-bs1" 		--assert parse 			#{0A0B0C} [some bs]
	--test-- "bin-bs2" 		--assert not parse 		#{010203} [some bs]
	--test-- "bin-bs4" 		--assert parse 			#{0A0B0C} [some [bs]]
	--test-- "bin-bs5" 		--assert not parse 		#{010203} [some [bs]]
	--test-- "bin-bs6" 		--assert parse 			#{0A0B0C} [some wbs]
	--test-- "bin-bs7" 		--assert not parse 		#{010203} [some wbs]
	--test-- "bin-bs8" 		--assert parse 			#{0A0B0C} [some wbs2]
	--test-- "bin-bs9" 		--assert not parse 		#{010203} [some wbs2]

	--test-- "bin-bs10" 	--assert parse 			#{0A0B0C} [bs bs bs]
	--test-- "bin-bs11" 	--assert not parse 		#{010203} [bs bs bs]
	--test-- "bin-bs12" 	--assert parse 			#{0A0B0C} [[bs] [bs] [bs]]
	--test-- "bin-bs13" 	--assert not parse 		#{010203} [[bs] [bs] [bs]]
	--test-- "bin-bs14" 	--assert parse 			#{0A0B0C} [wbs wbs wbs]
	--test-- "bin-bs15" 	--assert not parse 		#{010203} [wbs wbs wbs]
	--test-- "bin-bs16" 	--assert parse 			#{0A0B0C} [wbs2 wbs2 wbs2]
	--test-- "bin-bs17" 	--assert not parse 		#{010203} [wbs2 wbs2 wbs2]


	bs: charset [not 1 - 3 #"^(0A)" - #"^(0F)"]
	wbs: [bs]
	wbs2: reduce wbs
	--test-- "bin-bs20" 	--assert not parse 		#{0A0B0C} [some bs]
	--test-- "bin-bs22" 	--assert not parse 		#{010203} [some bs]
	--test-- "bin-bs23"		--assert parse 			#{070809} [some bs]
	--test-- "bin-bs24" 	--assert not parse 		#{0A0B0C} [bs bs bs]
	--test-- "bin-bs26" 	--assert not parse 		#{010203} [bs bs bs]
	--test-- "bin-bs27" 	--assert parse 			#{070809} [bs bs bs]


	--test-- "bin-bs30"
		digit: charset [0 - 9]
		--assert parse #{0BADCAFE010203} [to digit p: 3 skip]
		--assert p = #{010203}


===end-group===

===start-group=== "binary-modify"
	ws: charset " ^- ^/^M^(00)"
	not-ws: complement ws

	--test-- "bin-rem1"	--assert error? try [parse #{} [remove]]
	--test-- "bin-rem2"	--assert not parse		#{}	   [remove skip]

	--test-- "bin-rem3"	
		bin: #{0A}
		--assert parse bin [remove skip]
		--assert bin = #{}

	--test-- "bin-rem4"	
		bin: #{0A0B0A}
		--assert parse bin [some [#{0A} | remove #{0B}]]
		--assert bin = #{0A0A}

	--test-- "bin-rem5"	
		bin: #{DEAD00BEEF}
		--assert parse bin [remove thru ws #{BEEF}]
		--assert bin = #{BEEF}

	--test-- "bin-rem6"	
		bin: #{DEAD00BEEF}
		--assert parse bin [remove #{DEAD} skip #{BEEF}]
		--assert bin = #{00BEEF}

	--test-- "bin-rem7"
		--assert parse s: #{00DE00AD00} [any [remove ws | skip]]
		--assert s = #{DEAD}

	--test-- "bin-rem8"
		--assert parse s: #{00DE00AD00} [while [remove ws | skip]]
		--assert s = #{DEAD}

	--test-- "bin-rem9"
		bin: #{DEAD0001020300BEEF}
		digit: charset [1 - 9]
		--assert parse bin [any [remove [some digit #"^(00)"] | skip]]
		--assert bin = #{DEAD00BEEF}

	--test-- "bin-ins1"	
		--assert parse bin: #{} [insert #"^(01)"]
		--assert bin = #{01}

	--test-- "bin-ins2"	
		--assert parse bin: #{0A0A} [skip insert #{0B} skip]
		--assert bin = #{0A0B0A}

	--test-- "bin-ins3"	
		--assert parse bin: #{} [p: insert #{0A} :p remove #{0A}]
		--assert bin = #{}

	--test-- "bin-ins4"
		--assert parse bin: #{DEADBEEF} [some [skip p: insert #"^(00)"] :p remove skip]
		--assert bin = #{DE00AD00BE00EF}

	--test-- "bin-chg1"
		--assert parse bin: #{01} [change skip #{0A}]
		--assert bin = #{0A}

	--test-- "bin-chg2"
		--assert parse bin: #{010203} [change [3 skip] #{0A}]
		--assert bin = #{0A}

	--test-- "bin-chg3"
		digit: charset [1 - 9]
		--assert parse bin: #{010a020b03} [some [change digit #{00} | skip]]
		--assert bin = #{000a000b00}

	--test-- "bin-chg4"
		--assert parse bin: #{010203} [change 3 skip (99)]
		--assert bin = #{63}

	--test-- "bin-chg5"
		--assert parse bin: #{BEADBEEF} [some [change #{BE} #{DE} | skip]]
		--assert bin = #{DEADDEEF}

	--test-- "bin-chg6"
		--assert parse bin: #{0a0b0c03040d0e} [some [to digit change [some digit] #{BEEF}] 2 skip]
		--assert bin = #{0a0b0cBEEF0d0e}

	--test-- "bin-chg11"
		--assert parse bin: #{01} [b: skip change b #{0A}]
		--assert bin = #{0A}

	--test-- "bin-chg12"
		--assert parse bin: #{010203} [b: 3 skip change b #{0A}]
		--assert bin = #{0A}

	--test-- "bin-chg13"
		digit: charset [1 - 9]
		--assert parse bin: #{010a020b03} [some [b: digit change b #{00} | skip]]
		--assert bin = #{000a000b00}

	--test-- "bin-chg14"
		--assert parse bin: #{010203} [b: 3 skip change b (99)]
		--assert bin = #{63}

	--test-- "bin-chg15"
		--assert parse bin: #{BEADBEEF} [some [b: #{BE} change b #{DE} | skip]]
		--assert bin = #{DEADDEEF}

	--test-- "bin-chg16"
		--assert parse bin: #{0a0b0c03040d0e} [some [to digit b: some digit change b #{BEEF}] 2 skip]
		--assert bin = #{0a0b0cBEEF0d0e}

===end-group===

===start-group=== "binary-misc"

	wa: [#{0A}]
	wb: [#{0B}]
	--test-- "bin-m1"	--assert parse 		#{}			[break]
	--test-- "bin-m2"	--assert not parse 	#{0A}		[break]
	--test-- "bin-m3"	--assert parse 		#{0A}		[[break #{0B}] #{0A}]
	--test-- "bin-m4"	--assert parse 		#{0A}		[[#{0B} | break] #{0A}]
	--test-- "bin-m5"	--assert parse 		#{0A0A}		[some [#{0B} | break] 2 #{0A}]
	--test-- "bin-m6"	--assert parse 		#{0A0A}		[some [#{0B} | [break]] 2 #{0A}]
	--test-- "bin-m7"	--assert not parse 	#{0A0A}		[some [#{0B} | 2 [#"^(0C)" | break]] 2 #{0A}]

	--test-- "bin-m20"	--assert not parse 	#{}			[fail]
	--test-- "bin-m21"	--assert not parse 	#{0A}		[#{0A} fail]
	--test-- "bin-m22"	--assert not parse 	#{0A}		[[fail]]
	--test-- "bin-m23"	--assert not parse 	#{0A}		[fail | fail]
	--test-- "bin-m24"	--assert not parse 	#{0A}		[[fail | fail]]
	--test-- "bin-m25"	--assert not parse 	#{0A}		[#{0B} | fail]

	--test-- "bin-m30"	--assert not parse 	#{}			[not end]
	--test-- "bin-m31"	--assert parse 		#{0A}		[not #{0B} #{0A}]
	--test-- "bin-m32"	--assert not parse 	#{0A}		[not skip]
	--test-- "bin-m33"	--assert not parse 	#{0A}		[not skip skip]
	--test-- "bin-m34"	--assert parse 		#{0A}		[not [#{0B}] #{0A}]
	--test-- "bin-m35"	--assert parse 		#{0A}		[not wb #{0A}]
	--test-- "bin-m36"	--assert not parse 	#{0A0A}		[not [#{0A} #{0A}] to end]
	--test-- "bin-m37"	--assert parse 		#{0A0A}		[not [some #{0B}] to end]
	--test-- "bin-m38"	--assert parse 		#{0A0A}		[some [#"^(0C)" | not #{0B}] 2 skip]

	--test-- "bin-m50"	--assert not parse 	#{}			[reject]
	--test-- "bin-m51"	--assert not parse 	#{0A}		[reject #{0A}]
	--test-- "bin-m52"	--assert not parse 	#{0A}		[reject wa]
	--test-- "bin-m53"	--assert not parse 	#{0A}		[[reject] #{0A}]
	--test-- "bin-m54"	--assert parse 		#{0A}		[[reject #{0B}] | #{0A}]
	--test-- "bin-m55"	--assert not parse 	#{0A}		[[#{0B} | reject] #{0A}]
	--test-- "bin-m56"	--assert parse 		#{0A}		[[#{0B} | reject] | #{0A}]
	--test-- "bin-m57"	--assert parse 		#{0A0A}		[some reject | 2 #{0A}]
	--test-- "bin-m58"	--assert parse 		#{0A0A}		[some [reject] | 2 #{0A}]
	
	--test-- "bin-m60"	--assert parse 		#{}			[none]
	--test-- "bin-m61"	--assert parse 		#{0A}		[skip none]
	--test-- "bin-m62"	--assert parse 		#{0A}		[none skip none]
	--test-- "bin-m63"	--assert parse 		#{0A}		[#{0A} none]
	--test-- "bin-m64"	--assert parse 		#{0A}		[none #{0A} none]
	--test-- "bin-m65"	--assert parse 		#{0A}		[wa none]
	--test-- "bin-m66"	--assert parse 		#{0A}		[none wa none]
	--test-- "bin-m67"	--assert parse 		#{0A}		[[#{0B} | none] #{0A}]
	--test-- "bin-m68"	--assert parse 		#{0A}		[[#{0B} | [none]] #{0A}]
	--test-- "bin-m69"	--assert parse 		#{0A}		[[[#{0B} | [none]]] #{0A}]

	--test-- "bin-m80"	--assert parse 		#{}			[opt none]
	--test-- "bin-m81"	--assert parse 		#{}			[opt #{0A}]
	--test-- "bin-m82"	--assert parse 		#{0A}		[opt #{0A}]
	--test-- "bin-m83"	--assert parse 		#{0A}		[opt #{0B} #{0A}]
	--test-- "bin-m84"	--assert parse 		#{0A}		[opt [#{0A}]]
	--test-- "bin-m85"	--assert parse 		#{0A}		[opt wa]
	--test-- "bin-m86"	--assert parse 		#{0A}		[opt skip]
	--test-- "bin-m87"	--assert parse 		#{0A0B0C}	[skip opt #{0B} skip]

	--test-- "bin-m90"	--assert not parse	#{}			[then skip]
	--test-- "blk-m91"	--assert parse		#{}			[then skip | end]
	--test-- "bin-m92"	--assert parse		#{0A}		[then #{0A} | #{0B}]
	--test-- "bin-m93"	--assert not parse	#{0c}		[then #{0A} | #{0B}]
	--test-- "bin-m94"	--assert parse		#{0B}		[then #{0A} | #{0B}]
	--test-- "bin-m95"	--assert parse		#{0F0a}		[#"^(0F)" then #{0A} | #{0B}]

	x: none
	--test-- "bin-m100"	--assert parse		#{020406}	[any [copy x skip if (even? first x)]]
	--test-- "bin-m101"	--assert not parse	#{01}		[copy x skip if (even? first x)]
	--test-- "bin-m102"	--assert not parse	#{0105}		[some [copy x skip if (even? first x)]]

	--test-- "bin-m120"	--assert parse		#{}			[while #{0A}]
	--test-- "bin-m121"	--assert parse		#{}			[while #{0B}]
	--test-- "bin-m122"	--assert parse		#{0A}		[while #{0A}]
	--test-- "bin-m123"	--assert not parse	#{0A}		[while #{0B}]
	--test-- "bin-m124"	--assert parse		#{0A}		[while #{0B} skip]
	--test-- "bin-m125"	--assert parse		#{0A0B0A0B}	[while [#{0B} | #{0A}]]

	--test-- "bin-m130"	--assert error? try [parse #{} [ahead]]
	--test-- "bin-m131"	--assert parse		#{0A}		[ahead #{0A} #{0A}]
	--test-- "bin-m132"	--assert parse		#{01}		[ahead [#{0A} | #"^(01)"] skip]

===end-group===

===start-group=== "binary-part"
	input: #{DEADBEEF}
	input2: #{0a0a0a0b0b}
	letters: charset [#"^(AD)" - #"^(DE)"]

	--test-- "bin-part-1"
		v: none
		--assert not parse/part input [copy v 3 skip] 2
		--assert none? v

	--test-- "bin-part-2"
		v: none
		--assert parse/part input [copy v 3 skip] 3
		--assert v = #{DEADBE}

	--test-- "bin-part-3"
		v: none
		--assert not parse/part input [copy v 3 skip] 4
		--assert v = #{DEADBE}

	--test-- "bin-part-4"
		v: none
		--assert parse/part input [copy v 3 skip skip] 4
		--assert v = #{DEADBE}

	--test-- "bin-part-5"
		v: none
		--assert parse/part next input [copy v 3 skip] 3
		--assert v = #{ADBEEF}

	--test-- "bin-part-6"
		v: none
		--assert not parse/part input [copy v to #"o" skip] 3
		--assert none? v

	--test-- "bin-part-7"
		v: none
		--assert parse/part input [copy v to #{EF} skip] 5
		--assert v = #{DEADBE}

	--test-- "bin-part-8"
		v: none
		--assert not parse/part input [copy v 3 letters] 2
		--assert none? v

	--test-- "bin-part-9"
		v: none
		--assert parse/part input [copy v 3 letters] 3
		--assert v = #{DEADBE}

	--test-- "bin-part-10"
		v: none
		--assert not parse/part input2 [copy v 3 #{0A}] 2
		--assert none? v

	--test-- "bin-part-11"
		v: none
		--assert parse/part input2 [copy v 3 #{0A}] 3
		--assert v = #{0a0a0a}

	--test-- "bin-part-20"
		v: none
		--assert not parse/part input [copy v 3 skip] skip input 2
		--assert none? v

	--test-- "bin-part-21"
		v: none
		--assert parse/part input [copy v 3 skip] skip input 3
		--assert v = #{DEADBE}

	--test-- "bin-part-22"
		v: none
		--assert not parse/part input [copy v 3 skip] skip input 4
		--assert v = #{DEADBE}

	--test-- "bin-part-23"
		v: none
		--assert parse/part input [copy v 3 skip skip] skip input 4
		--assert v = #{DEADBE}

	--test-- "bin-part-24"
		v: none
		--assert parse/part next input [copy v 3 skip] skip input 4
		--assert v = #{ADBEEF}

	--test-- "bin-part-25"
		v: none
		--assert not parse/part input [copy v to #"o" skip] skip input 3
		--assert none? v

	--test-- "bin-part-26"
		v: none
		--assert parse/part input [copy v to #{EF} skip] skip input 5
		--assert v = #{DEADBE}

	--test-- "bin-part-27"
		v: none
		--assert not parse/part input [copy v 3 letters] skip input 2
		--assert none? v

	--test-- "bin-part-28"
		v: none
		--assert parse/part input [copy v 3 letters] skip input 3
		--assert v = #{DEADBE}

	--test-- "bin-part-29"
		v: none
		--assert not parse/part input2 [copy v 3 #{0A}] skip input2 2
		--assert none? v

	--test-- "bin-part-30"
		v: none
		--assert parse/part input2 [copy v 3 #{0A}] skip input2 3
		--assert v = #{0a0a0a}

===end-group===

===start-group=== "Issues"

	--test-- "#2515"
		--assert parse "this one is" ["this" to "is" "is"]

===end-group===
    


===start-group=== "basic tests"
	
	--test-- "basic-1"	--assert "make bitset! #{00}" = mold make bitset! 1
	--test-- "basic-2"	--assert "make bitset! #{00}" = mold charset ""
	--test-- "basic-3"	--assert "make bitset! #{00}" = mold charset []
	--test-- "basic-4"	--assert "make bitset! #{80}" = mold charset #"^(00)"
	--test-- "basic-5"	--assert "make bitset! #{40}" = mold charset #"^(01)"
	--test-- "basic-6"	--assert "make bitset! #{000000000000FFC0}" = mold charset "0123456789"
	--test-- "basic-7"	--assert "make bitset! #{F0}" = mold charset [0 1 2 3]

	--test-- "basic-8"	
		--assert "make bitset! #{FF800000FFFF8000048900007FFFFFE0}"
			 = mold charset [#"a" - #"z" 0 - 8 32 - #"0" "HELLO"]

	--test-- "basic-9"
		bs: make bitset! [0 1 2 3]
		--assert 8 = length? bs
		--assert true  = pick bs 0
		--assert true  = pick bs 1
		--assert true  = pick bs 2
		--assert true  = pick bs 3
		--assert false = pick bs 4
		--assert false = pick bs 256
		--assert false = pick bs 257
		--assert false = pick bs 2147483647
		--assert false = pick bs -2147483648

	--test-- "basic-10"
		bs: make bitset! [0 1 2 3]
		--assert 8 = length? bs
		--assert true  = bs/0
		--assert true  = bs/1
		--assert true  = bs/2
		--assert true  = bs/3
		--assert false = bs/4
		--assert false = bs/256
		--assert false = bs/257
		--assert false = bs/2147483647
		--assert false = bs/-2147483648

	--test-- "basic-11"
		bs: make bitset! [0 1 2 3]
		--assert 8 = length? bs
		--assert true  = pick bs #"^(00)"
		--assert true  = pick bs #"^(01)"
		--assert true  = pick bs #"^(02)"
		--assert true  = pick bs #"^(03)"
		--assert false = pick bs #"^(04)"
		--assert false = pick bs #"^(0100)"
		--assert false = pick bs #"^(0101)"

	--test-- "basic-12"
		bs: make bitset! [0100h 0102h]
		--assert 264 = length? bs
		--assert true  = pick bs 0100h
		--assert false = pick bs 0101h
		--assert true  = pick bs 0102h
		
	--test-- "basic-13"
		bs: make bitset! [255 257]
		--assert 264 = length? bs
		--assert true  = pick bs 255
		--assert false = pick bs 256
		--assert true  = pick bs 257
		
	--test-- "basic-14"
		bs: make bitset! [255 256]
		--assert 264 = length? bs
		--assert true = pick bs 255
		--assert true = pick bs 256
		
	--test-- "basic-15"
		bs: make bitset! [00010000h]
		--assert 65544 = length? bs
		--assert true = pick bs 00010000h
	
	--test-- "basic-16"
		bs: make bitset! 9
		--assert 16 = length? bs
		bs/7: yes
		--assert bs/7 = true
		--assert bs/8 = false
		bs/8: yes
		--assert bs/8 = true
		--assert bs/9 = false
	
	--test-- "basic-17"
		bs: make bitset! 8
		--assert 8 = length? bs
		bs/7: yes
		--assert bs/7 = true
		--assert bs/8 = false
		bs/8: yes
		--assert 16 = length? bs
		--assert bs/8 = true
		--assert bs/9 = false

===end-group===

===start-group=== "modify"
	
	--test-- "poke-1"
		bs: make bitset! [0 1 2 3]
		poke bs 4 true
		--assert true = pick bs 0
		--assert true = pick bs 1
		--assert true = pick bs 2
		--assert true = pick bs 3
		--assert true = pick bs 4
		--assert false = pick bs 5

	--test-- "poke-2"
		bs: make bitset! [0 1 2 3]
		--assert true = pick bs 0
		poke bs 0 false
		--assert false = pick bs 0
		poke bs 0 true
		--assert true = pick bs 0
		poke bs 0 none
		--assert false = pick bs 0
		bs/0: yes
		--assert bs/0 = true
		bs/0: no
		--assert bs/0 = false
		bs/0: yes
		--assert bs/0 = true
		bs/0: none
		--assert bs/0 = false

	--test-- "append-1"
		bs: make bitset! 8
		--assert 8 = length? bs
		append bs ["hello" #"x" - #"z"]
		--assert "make bitset! #{000000000000000000000000048900E0}" = mold bs

	--test-- "clear-1"
		clear bs
		--assert "make bitset! #{00000000000000000000000000000000}" = mold bs

	--test-- "clear-2"
		bs: charset "^(00)^(01)^(02)^(03)^(04)^(05)^(06)^(07)"
		--assert 8 = length? bs
		--assert "make bitset! #{FF}" = mold bs
		clear bs
		--assert "make bitset! #{00}" = mold bs

	--test-- "remove-1"
		bs: charset "012345789"
		--assert 64 = length? bs
		--assert "make bitset! #{000000000000FDC0}" = mold bs
		--assert "make bitset! #{0000000000007DC0}" = mold remove/part bs #"0"
		--assert "make bitset! #{0000000000003DC0}" = mold remove/part bs 49
		--assert "make bitset! #{0000000000000000}" = mold remove/part bs [#"2" - #"7" "8" #"9"]

===end-group===

===start-group=== "union"
		
	--test-- "u-1"
		c1: charset "0123456789"
		c2: charset [#"a" - #"z"]
		u: "make bitset! #{000000000000FFC0000000007FFFFFE0}"
		--assert u = mold union c1 c2
		--assert u = mold union c2 c1

	--test-- "u-2"
		nd: charset [not #"0" - #"9"]
		zero: charset #"0"
		nd-zero: union nd zero
		--assert not find nd #"0"
		--assert not find nd #"1"
		--assert find nd #"B"
		--assert find nd #"}"

	--test-- "u-3"
		--assert find zero #"0"
		--assert not find zero #"1"
		--assert not find zero #"B"
		--assert not find zero #"}"

	--test-- "u-4"
		--assert find nd-zero #"0"
		--assert not find nd-zero #"1"
		--assert find nd-zero #"B"
		--assert find nd-zero #"}"
	
===end-group===

===start-group=== "and"

	--test-- "and-1"
		c1: charset "b"
		c2: charset "1"
		u: "make bitset! #{00000000000000}"
		--assert u = mold c1 and c2
		--assert u = mold c2 and c1

	--test-- "and-2"
		c1: charset "b"
		c2: charset "1"
		c3: complement c1
		u: "make bitset! [not #{FFFFFFFFFFFFBF}]"
		--assert u = mold c3 and c2
		--assert u = mold c2 and c3
		u: "make bitset! [not #{FFFFFFFFFFFFFFFFFFFFFFFFFF}]"
		--assert u = mold c1 and c3
		c4: complement c2
		--assert "make bitset! #{FFFFFFFFFFFFBF}" = mold c3 and c4

===end-group===

===start-group=== "xor"

	--test-- "xor-1"
		c1: charset "b"
		c2: charset "1"
		u: "make bitset! #{00000000000040000000000020}"
		--assert u = mold c1 xor c2
		--assert u = mold c2 xor c1

	--test-- "xor-2"
		c1: charset "b"
		c2: charset "1"
		c3: complement c1
		u: "make bitset! [not #{00000000000040000000000020}]"
		--assert u = mold c3 xor c2
		--assert u = mold c2 xor c3
		u: "make bitset! [not #{00000000000000000000000000}]"
		--assert u = mold c1 xor c3
		c4: complement c2
		--assert "make bitset! #{00000000000040FFFFFFFFFFDF}" = mold c3 xor c4

===end-group===

===start-group=== "complemented"
	
	--test-- "comp-1"	--assert "make bitset! [not #{}]"   = mold charset [not]
	--test-- "comp-2"	--assert "make bitset! [not #{80}]" = mold charset [not #"^(00)"]
	--test-- "comp-3"	--assert "make bitset! [not #{40}]" = mold charset [not #"^(01)"]
	--test-- "comp-4"	--assert "make bitset! [not #{000000000000FFC0}]" = mold charset [not "0123456789"]
	--test-- "comp-5"	--assert "make bitset! [not #{F0}]" = mold charset [not 0 1 2 3]

	--test-- "comp-6"
		bs: make bitset! 1
		--assert false = complement? bs
		--assert "make bitset! #{00}" = mold bs
		--assert 8 = length? bs
		bs: complement bs
		--assert true = complement? bs
		--assert 8 = length? bs
		--assert "make bitset! [not #{00}]" = mold bs

	--test-- "comp-7"
		bs: charset [not "hello123" #"a" - #"z"]
		--assert 128 = length? bs
		--assert "make bitset! [not #{0000000000007000000000007FFFFFE0}]" = mold bs
		clear bs
		--assert 128 = length? bs
		--assert "make bitset! [not #{00000000000000000000000000000000}]" = mold bs

	--test-- "comp-8"
		bs: complement charset " "
		--assert 40 = length? bs
		--assert bs/31 = true
		--assert bs/32 = false
		--assert bs/33 = true
		--assert bs/200 = true

	--test-- "comp-9"
		bs/32: true
		--assert bs/32 = true
		--assert "make bitset! [not #{0000000000}]" = mold bs

	--test-- "comp-10"
		poke bs #" " none
		--assert bs/32 = false
		--assert "make bitset! [not #{0000000080}]" = mold bs

	--test-- "comp-11"
		clear bs
		--assert "make bitset! [not #{0000000000}]" = mold bs

	--test-- "comp-12"
		poke bs [32 - 40] none
		--assert "make bitset! [not #{00000000FF80}]" = mold bs
		poke bs [32 - 40] true
		--assert "make bitset! [not #{000000000000}]" = mold bs

===end-group===


===start-group=== "same-datatype"
	--test-- "same-datatype-1"		--assert 0 == 0
	--test-- "same-datatype-2"		--assert 1 == 1
	--test-- "same-datatype-3"		--assert FFFFFFFFh == -1
	--test-- "same-datatype-4"		--assert [] == []
	--test-- "same-datatype-5"		--assert [a] == [a]
	--test-- "same-datatype-6"		--assert not [A] == [a]
	--test-- "same-datatype-7"		--assert not ['a] == [a]
	--test-- "same-datatype-8"		--assert not [a:] == [a]
	--test-- "same-datatype-9"		--assert not [:a] == [a]
	--test-- "same-datatype-10"		--assert not [:a] == [a:]
	--test-- "same-datatype-11"		--assert [abcde] == [abcde]
	--test-- "same-datatype-12"		--assert [a b c d] == [a b c d]
	--test-- "same-datatype-13"		--assert [b c d] == next [a b c d]
	--test-- "same-datatype-14"		--assert [b c d] == (next [a b c d])
	--test-- "same-datatype-15"		--assert "a" == "a"
	--test-- "same-datatype-16"		--assert not "a" == "A"
	--test-- "same-datatype-17"		--assert "abcdeè" == "abcdeè"
	--test-- "same-datatype-18"		--assert (next "abcdeè") == next "abcdeè"
	--test-- "same-datatype-19"		--assert (first "abcdeè") == first "abcdeè"
	--test-- "same-datatype-20"		--assert (last "abcdeè") == last "abcdeè"
	--test-- "same-datatype-21"
		--assert "abcde^(2710)é^(010000)" == "abcde^(2710)é^(010000)"
	--test-- "same-datatype-22"		--assert [d] == back tail [a b c d]
	--test-- "same-datatype-23"		--assert "2345" == next "12345"
	--test-- "same-datatype-24"		--assert #"z" == #"z"
	--test-- "same-datatype-25"		--assert not #"z" == #"Z"
	--test-- "same-datatype-26"		--assert not #"e" == #"è"
	--test-- "same-datatype-27"		--assert #"^(010000)" == #"^(010000)"
	--test-- "same-datatype-28"		--assert true == true
	--test-- "same-datatype-29"		--assert false == false
	--test-- "same-datatype-30"		--assert not false == true
	--test-- "same-datatype-31"		--assert not true == false
	--test-- "same-datatype-32"		--assert none == none
	--test-- "same-datatype-33"		--assert 'a == 'a
	--test-- "same-datatype-34"		--assert not 'a == 'A
	--test-- "same-datatype-34a"	--assert not 'test == 'Test
	--test-- "same-datatype-35"		--assert (first [a]) == first [a]
	--test-- "same-datatype-36"		--assert not 'a == first [A]
	--test-- "same-datatype-37"		--assert 'a == first [a]
	--test-- "same-datatype-38"		--assert not 'a == first [:a]
	--test-- "same-datatype-39"		--assert not 'a == first [a:]
	--test-- "same-datatype-40"		--assert (first [a:]) == first [a:]
	--test-- "same-datatype-41"		--assert (first [:a]) == first [:a]
	--test-- "same-datatype-42"		--assert [a b c d e] == first [[a b c d e]]
	--test-- "same-datatype-43"		
		ea-result: 1 == 1
		--assert ea-result = true
	--test-- "same-datatype-44"
		ea-result: 1 == 0
		--assert ea-result = false
===end-group===
===start-group=== "implcit-cast"
	--test-- "same-implcit-cast-1"	--assert not #"0" == 48
	--test-- "same-implcit-cast-2"	--assert not 48 == #"0"
	--test-- "same-implcit-cast-3"	--assert not #"^(2710)" == 10000
	--test-- "same-implcit-cast-4"	--assert not #"^(010000)" == 65536
	--test-- "same-implcit-cast-5"
		ea-result: #"1" == 49
		--assert ea-result = false
	--test-- "same-implcit-cast-6"
		ea-result: #"^(010000)" == 10000
		--assert ea-result = false
===end-group===

===start-group=== "basic tests"

	--test-- "basic-1"
		obj1: context []
		--assert "make object! []" = mold obj1

	--test-- "basic-2"
		obj2: object []
		--assert "make object! []" = mold obj2
		
	--test-- "basic-3"
		obj3: make object! []
		--assert "make object! []" = mold obj3
	
	--test-- "basic-4"
		blk: []
		obj4: object blk
		--assert "make object! []" = mold obj4
	
	--test-- "basic-5"
		obj5: object [
			a: 123
			show: does [a + 1]
			reset: does [a: none]
			--assert show = 124
			--assert a = 123
		]
		--assert obj5/show = 124
		obj5/reset
		--assert none? obj5/a

	--test-- "basic-6"
		obj5/a: 456
		--assert obj5/a = 456

	--test-- "basic-7"
		--assert find obj5 'a
		--assert not find obj5 'z
		--assert 456 = select obj5 'a
		--assert none? select obj5 'z

	--test-- "basic-8"
		obj8: context [
			b: 123
			a: object [
				b: 456
				double: does [b * 2]
				set-b: does [b: 'hello]
			]
		]
		--assert obj8/b = 123
		--assert obj8/a/b = 456
		--assert obj8/a/double = 912
		obj8/a/set-b
		--assert obj8/a/b = 'hello

	--test-- "basic-9"
		obj8/a/b: 'red
		--assert obj8/a/b = 'red

	--test-- "basic-10"
		obj10: object [
			a: 1
			b: 2
			inc: func [i /with a][b: i + either with [a][b]]
			sub: context [
				a: 3
				b: 4
				inc: func [i /with a][b: i + either with [a][b]]
			]
		]
		--assert 12 = obj10/inc 10
		--assert obj10/b = 12

		--assert 14 = obj10/sub/inc 10
		--assert obj10/sub/b = 14

	--test-- "basic-11"
		--assert 30 = obj10/inc/with 10 20
		--assert obj10/b = 30

		--assert 50 = obj10/sub/inc/with 10 40
		--assert obj10/sub/b = 50

	--test-- "basic-12"
		blk: [a: 99]
		obj12: object blk
		--assert obj12/a = 99
	
	--test-- "basic-13"
		b13-a: 0
		b13-o: make object! [
			b13-a: 0
		]
		set in b13-o 'b13-a 1
		--assert 0 == b13-a
		--assert 1 == b13-o/b13-a

===end-group===


===start-group=== "Comparison tests"

	--test-- "comp-1"  --assert 	(context [])	 = (context [])
	--test-- "comp-2"  --assert not (context [a: 1]) = (context [])
	--test-- "comp-3"  --assert 	(context [a: 1]) = (context [a: 1])
	--test-- "comp-4"  --assert not (context [a: 1]) = (context [a: 2])
	--test-- "comp-5"  --assert 	(context [a: 1]) < (context [a: 2])
	--test-- "comp-6"  --assert not (context [a: 1]) >= (context [a: 2])
	--test-- "comp-7"  --assert 	(context [a: 2]) < (context [a: 1 b: none])

	--test-- "comp-8"
		obj:  context [a: 123]
		obj2: context [a: 123]
		--assert obj = obj2
		--assert not same? obj obj2
		--assert same? obj obj

===end-group===

===start-group=== "SELF test"

	--test-- "self-1"
		obj: context [
			--assert "make object! []" = mold/flat self
		]

	--test-- "self-2"
		obj: context [
			a: 123
			--assert "make object! [a: 123 b: unset]" = mold/flat self
			b: 456
		]

	--test-- "self-3"
		result: {make object! [b: 123 c: "hello" show: func [][--assert object? self] foo: unset]}
		
		obj: object [
			b: 123
			c: "hello"
			show: does [--assert object? self]
			--assert result = mold/flat self
			foo: does [--assert object? self c: none]
			foo
		]
		obj/show
		--assert none? obj/c

	--test-- "self-4"
		p1: object [
		    a: 1
		    b: 2
		    e: does [self/b]
		    f: does [self/b: 789 self/e]
		    --assert self/e = 2
		]
		--assert p1/e = 2
		--assert p1/f = 789

===end-group===

===start-group=== "simple object tests"
	
	--test-- "simple object 1"
		so1-a: 0
		so1-o: make object! [so1-a: 1]
		--assert so1-a = 0
		--assert so1-o/so1-a = 1
		
	--test-- "simple object 2"
		so2-s: "0"
		so2-o: make object! [so2-s: "1"]
		--assert so2-s = "0"
		--assert so2-o/so2-s = "1"
		
	--test-- "simple object 3"
		so3-s: "0"
		so3-i: 0
		so3-l: true
		so3-c: #"a"
		so3-b: [a b c]
		so3-f: func [][0]
		so3-bs: charset #"^(00)"
		so3-o: make object! [
			so3-s: "1"
			so3-i: 1
			so3-l: false
			so3-c: #"b"
			so3-b: [a b d]
			so3-f: func [][1]
			so3-bs: charset #"^(01)"
		]
		--assert so3-s = "0"
		--assert so3-o/so3-s = "1"
		--assert so3-i = 0
		--assert so3-o/so3-i = 1
		--assert so3-l = true
		--assert so3-o/so3-l = false
		--assert so3-c = #"a"
		--assert so3-o/so3-c = #"b"
		--assert so3-b = [a b c]
		--assert so3-o/so3-b = [a b d]
		--assert so3-f = 0
		--assert so3-o/so3-f = 1
		--assert "make bitset! #{80}" = mold so3-bs
		--assert "make bitset! #{40}" = mold so3-o/so3-bs
		
===end-group===

===start-group=== "nested objects"

	--test-- "no1"
		no1-o: make object! [o: make object! [i: 1] ]
		--assert no1-o/o/i = 1
		
	--test-- "no2"
		no2-o1: make object! [
			o2: make object! [
				i: 1
			]
		]
		--assert no2-o1/o2/i = 1
		
	--test-- "no3"
		no3-o1: make object! [
			o2: make object! [
			o3: make object! [
			o4: make object! [
				i: 1
			]]]
		]
		--assert no3-o1/o2/o3/o4/i = 1

	--test-- "no4"
		no4-o1: make object! [
			o2: make object! [
			o3: make object! [
			o4: make object! [
			o5: make object! [
			o6: make object! [
			o7: make object! [
				i: 1
			]]]]]]
		]
		--assert no4-o1/o2/o3/o4/o5/o6/o7/i = 1
	
	--test-- "no5"
		no5-o1: make object! [
			o2: make object! [
			o3: make object! [
			o4: make object! [
			o5: make object! [
			o6: make object! [
			o7: make object! [
			o8: make object! [
			o9: make object! [
			o10: make object! [
			o11: make object! [
			o12: make object! [
			o13: make object! [
			;o14: make object! [
			;o15: make object! [
				i: 1
			]]]]]]]]]]]]
		]
		--assert no5-o1/o2/o3/o4/o5/o6/o7/o8/o9/o10/o11/o12/o13/i = 1
		
	--test-- "no6 issue #928"
		no6-o: make object! [
			a: 1
			o: make object! [
				b: 2
				f: does [a]
				]
			]
		--assert 1 = no6-o/o/f
		
	--test-- "no7"
		no7-a: 1
		no7-o: make object! [
			no7-a: 2
			f: func[][no7-a]
		]
		--assert 2 = no7-o/f
		
	--test-- "no8"
		no8-a: 1
		no8-o: make object! [
			no8-a: 2
			oo: make object! [
				no8-a: 3
				f: func[][no8-a]
			]
		]
		--assert 3 = no8-o/oo/f
		
===end-group===

===start-group=== "object prototype tests"

	--test-- "op1"
		op1-o1: make object! [i: 1]
		op1-o2: make op1-o1 []
		--assert op1-o2/i = 1
		
	--test-- "op2"
		op2-o1: make object! [i: 1]
		op2-o2: make op2-o1 [i: 2]
		--assert op2-o2/i = 2
		--assert op2-o1/i = 1

	--test-- "op3"
		op3-o1: make object! [i: 1]
		op3-o2: make op3-o1 [i: 2 j: 3]
		--assert op3-o2/i = 2
		--assert op3-o2/j = 3
		
===end-group===

===start-group=== "object initialisation processing"

	--test-- "oip1"
		oip1-i: 1
		oip1-o: make object! [
			i: oip1-i
		]
		--assert 1 = oip1-o/i
		
	--test-- "oip2"
		oip2-i: 1
		oip2-o: make object! [
			i: either oip2-i = 1 [2] [3]
		]
		--assert 2 = oip2-o/i
	
	--test-- "oip3"
		oip3-i: 1
		oip3-o: make object! [
			i: 0
			set 'oip3-i 2
		]
		--assert 2 = oip3-i
		
	--test-- "oip4"
		oip4-o: make object! [
			i: 0
			set 'oip4-i 3
		]
		--assert 3 = oip4-i


===end-group===

===start-group=== "inheritance"

	--test-- "inherit-1"
		proto: context [
			a: 123
			get-a: does [a]
		]
		new: make proto [a: 99]
		--assert new/a = 99
		--assert new/get-a = 99
		--assert proto/a = 123
		--assert proto/get-a = 123

	--test-- "inherit-2"
		new/a: 456
		--assert new/get-a = 456
		proto/a: 759
		--assert proto/a = 759
		--assert new/get-a = 456

	--test-- "inherit-3"
		newnew: make new [
			reset: does [a: none]
		]
		--assert newnew/a = 456
		newnew/reset
		--assert none? newnew/a
		--assert new/a = 456
		--assert proto/a = 759

	--test-- "inherit-4"
		base: context [
			v: 0
			foo: does [v]
		]

		i: 0
		list: []
		loop 2 [
			bb: make base [v: i]
			--assert bb/foo = i
			append list bb
			i: i + 1
		]
		--assert object? list/1
		--assert list/1/v = 0
		--assert list/2/v = 1

#if config/dev-mode? = no [							;-- libRedRT does not support multiple-inheritance
	--test-- "inherit-5"
		base5: context [
			b: 123
			get-b: does [b]
			a: object [
				b: 456
				double: does [b * 2]
				set-b: func [/with v] [b: either with [v]['hello]]
			]
		]
		proto5: context [
			b: 999
			value: 71
			foo: does [b + value]
		]
		new: make base5 proto5
		--assert object? new
		--assert new/b = 999
		--assert new/value = 71
		--assert new/a/b = 456
		--assert base5/b = 123

	--test-- "inherit-6"
		--assert new/get-b = 999
		--assert new/a/double = 912
		new/a/set-b/with 10
		--assert new/a/b = 10
		--assert new/b = 999
		--assert base5/b = 123
		--assert new/a/double = 20
		--assert base5/a/double = 20

	--test-- "inherit-7"
		--assert same? new/a base5/a

	--test-- "inherit-8"
		--assert new/foo = 1070
]
	--test-- "inherit-9"
		base9: context [
			v: 123456
			show: does [v]
		]
		i: 100
		list: []
		loop 3 [
			new9: make base9 [v: i]
			--assert new9/v = i
			--assert new9/show = i
			append list new9
			i: i + 1
		]
		--assert base9/v = 123456
		--assert list/1/v = 100
		--assert list/2/v = 101
		--assert list/3/v = 102
		
	--test-- "inherit-10"
		base10: make object! [
			oo: make object! [
				a: 1
			]
		]
		new10: make base10 []
		base10/oo/a: 9
		--assert 9 = new10/oo/a
		
	--test-- "inherit-11"
		base11: make object! [
			a: 1
			oo: make object! [
				f: func [][a]
			]
		]
		new11: make base11 [a: 2]
		--assert 1 = new11/oo/f

===end-group===

===start-group=== "external deep setting"

	--test-- "ext-1"
		p1: object [
		    a: 1
		    b: 2
		]

		p1/a: context [
			t: 99
			z: 128
			q: object [zz: 345 show: does [zz]]
		]
		--assert object? p1/a
		--assert p1/a/z = 128
		--assert p1/a/q/show = 345

	--test-- "ext-2"
		p1/a/t: does [123]
		--assert p1/a/t = 123

===end-group===

===start-group=== "dynamic invocation"

	--test-- "dyn-1"
		d: context [
			value: 998
		    f: does [value]
		]
		h: :d/f
		--assert h = 998
		d/value: 123
		--assert 123 = do [h]


	--test-- "dyn-2"
		f: func [/local z][
		    z: object [
		        a: 1
		        g: func [/with b /local c][c: 10 either with [a + b + 10][a * 2]]
		        j: func [i][i + 1]
		    ]
	    	z
		]
		o: make f [a: 3]
		--assert 46 = do [o/j 45]			;@@ temporary workaround until dyn-stack branch
		--assert 101 = do [o/j 100]			;@@ temporary workaround until dyn-stack branch

	--test-- "dyn-3"
		--assert 52 = do [o/j o/j 50]		;@@ temporary workaround until dyn-stack branch

	--test-- "dyn-4"
		--assert 33 = do [o/g/with 20]		;@@ temporary workaround until dyn-stack branch
		--assert 59 = do [o/g/with o/j 45]	;@@ temporary workaround until dyn-stack branch

	--test-- "dyn-5"
		z: none
		--assert 12 = do [o/j z: 5 + 6]		;@@ temporary workaround until dyn-stack branch
		--assert  z = 11

	--test-- "dyn-6"
		--assert [17] = reduce [do [o/j o/j z: 5 + 10]] ;@@ temporary workaround until dyn-stack branch
		--assert z = 15

	--test-- "dyn-7"
		repeat c 1 [
			if yes [
				--assert 52 = do [o/j o/j 50]
				--assert 59 = do [o/g/with o/j 45]
				--assert [22] = reduce [do [o/j o/j z: 5 + 15]] ;@@ temporary workaround until dyn-stack branch
				--assert z = 20
			]
		]

	--test-- "dyn-8"
		o2: context [zz: none]				;-- test renaming a statically compiled object

		f: func [/alt][
			either alt [
				make object! [
					a: 10
					g: 123
				]
			][
				make object! [
					a: 1
					g: does [a]
				]
			]
		]
		o2: f
		--assert 1 = do [o2/g] 				;@@ temporary workaround until dyn-stack branch

	--test-- "dyn-9"
		o2: f/alt
		--assert 123 = do [o2/g]			;@@ temporary workaround until dyn-stack branch

	--test-- "dyn-10"

		o: context [a: [123 789]]
		--assert if o/a [true]
		--assert if block? o/a [true]
		--assert if 123 = first o/a [true]

	--test-- "dyn-11"
		--assert either o/a [true][false]
		--assert either block? o/a [true][false]
		--assert either 789 = second o/a [true][false]

	--test-- "dyn-12"
		--assert block? all [o/a]
		--assert not 	all [false o/a]
		--assert not 	all [o/a false]
		--assert 456 = 	all [o/a 456]

	--test-- "dyn-13"
		--assert block? any [o/a 0]
		--assert block? any [false o/a]
		--assert block? any [o/a false]
		--assert block? any [o/a 456]
		--assert 654 =  any [654 o/a]

	--test-- "dyn-14"
		foreach p o/a [--assert any [p = 123 p = 789]]

	--test-- "dyn-15"
		loop length? o/a [--assert any [p = 123 p = 789]]

	--test-- "dyn-16"
		repeat c length? o/a [--assert any [c = 1 c = 2]]

	--test-- "dyn-17"
		repeat c 125 - first o/a [--assert any [c = 1 c = 2]]

	--test-- "dyn-18"
		switch/default first o/a [
			123 [
				--assert true
				switch/default second o/a [
					789 [--assert true]
				][--assert false]
			]
			789 [--assert false]
		][--assert false]

	--test-- "dyn-19"
		 --assert 0 < first o/a

	--test-- "dyn-20"
		case [
			first o/a  	[--assert true]
			'else 		[--assert false]
		]

	--test-- "dyn-21"
		case [
			0 < first o/a [--assert true]
			'else	  	  [--assert false]
		]

	--test-- "dyn-22"
		case [
			0 = first o/a 	  [--assert false]
			789 = second o/a  [--assert true]
		]

	--test-- "dyn-23"
		c: context [
			x: 1
			f: func [o [object!]][x: do [o/a]]	;@@ temporary workaround until dyn-stack branch
		]

		c/f object [a: 123]
		--assert c/x = 123

		c/f object [a: does [99]]
		--assert c/x = 99

	--test-- "dyn-24"						;; issue #965
		o: [a "hello" b " world"]
		--assert "hello" = o/a
		--assert "hello world" = append o/a o/b
		--assert "hello world123" = append o/a 123 o/b

	--test-- "dyn-25"
		o: context [
			a: func [v][v * 2]
			b: 123
		]
		--assert 143 = add o/a 10 o/b
		--assert 256 = add o/a o/b 10

	--test-- "dyn-26"						;; issue #990
		f-obj-switch: func [
		    o [object!]
		][
		    switch type?/word o/x [
		        integer! [-1]
		    ]
		]
		--assert -1 = f-obj-switch object [x: 0]

===end-group===

===start-group=== "copy"
	
	--test-- "copy-1"
		co1: make object! [a: 1]
		co2: copy co1
		co1/a: 2
		--assert 2 = co1/a
		--assert 1 = co2/a
	
	--test-- "copy-2"
		co1: make object! [
			a: 1
			f: func[][a]
		]
		co2: copy co1
		co1/a: 2
		--assert 2 = co1/f
		--assert 1 = do [co2/f]		;@@ temporary workaround until dyn-stack branch
		
	--test-- "copy-3"
		co1: make object! [
			a: 1
			b: 2
			blk: [1 2 3 4]
		]
		co2: copy co1
		co1/blk/1: 5
		--assert 5 = co1/blk/1 
		--assert 5 = co2/blk/1
		
	--test-- "copy-4"
		co1: make object! [
			a: 1
			b: 2
			blk: [1 2 3 4]
		]
		co2: copy/deep co1
		co1/blk/1: 5
		--assert 5 = co1/blk/1 
		--assert 1 = co2/blk/1
		
	--test-- "copy-5"
		co1: make object! [
			a: 1
			s: "Silly old string"
			f: func [][
				[s a]
			]
		]
		co2: copy co1
		co1/a: 5
		co1/s/2: #"h"
		co1/s/3: #"i"
		co1/s/4: #"n"
		--assert "Shiny old string" = co1/s
		--assert "Shiny old string" = co2/s
		
	--test-- "copy-6"
		co1: make object! [
			a: 1
			s: "Silly old string"
		]
		co2: copy co1
		co1/a: 5
		co1/s/2: #"h"
		co1/s/3: #"i"
		co1/s/4: #"n"
		replace co1/s "old" "new"
		--assert "Shiny new string" = co1/s
		--assert "Shiny new string" = co2/s
		
	--test-- "copy-7"
		co5: make object! [
			a: 1
			s: "Silly old string"
		]
		co6: copy/deep co5
		co5/a: 5
		co5/s/2: #"h"
		co5/s/3: #"i"
		co5/s/4: #"n"
		replace at co5/s 7 "old" "new"
		--assert "Shiny new string" = co5/s
		--assert "Silly old string" = co6/s
		
	--test-- "copy-8"
		co1: make object! [
			s: "Silly old string"
			f: func[][s]
		]
		co2: copy co1
		co1/s/2: #"h"
		co1/s/3: #"i"
		co1/s/4: #"n"
		replace co1/s "old" "new"
		--assert "Shiny new string" = co1/f
		--assert "Shiny new string" = do [co2/f] ;@@ temporary workaround until dyn-stack branch
		
	--test-- "copy-9"
		co1: make object! [
			s: "Silly old string"
			f: func[][s]
		]
		co2: copy/deep co1
		co1/s/2: #"h"
		co1/s/3: #"i"
		co1/s/4: #"n"
		replace co1/s "old" "new"
		--assert "Shiny new string" = co1/f
		--assert "Silly old string" = do [co2/f]  ;@@ temporary workaround until dyn-stack branch
	
	--test-- "copy-10"
		co1: make object! [
			a: 1
			f: func[][a]
		]
		co2: copy/deep co1
		co1/a: 2
		--assert 2 = co1/f
		--assert 1 = do [co2/f]			;@@ temporary workaround until dyn-stack branch
		
	--test-- "copy-11"
		co1: make object! [
			a: 1
			oo: make object! [
				f: func[][a]
			]
		]
		co2: copy/deep co1
		co1/a: 2
		--assert 2 = co1/oo/f
		--assert 2 = do [co2/oo/f]		;@@ temporary workaround until dyn-stack branch
		
	--test-- "copy-12"
		co1: make object! [
			a: 1
			oo: make object! [
				f: func[][a]
			]
		]
		co2: copy/deep co1
		co1/a: 2
		--assert 2 = co1/oo/f
		--assert 2 = do [co2/oo/f]		;@@ temporary workaround until dyn-stack branch
		
===end-group===

===start-group=== "in"

	--test-- "in1"
		ino1: make object! [
			i: 1
			c: #"a"
			f: 1.0
			b: [1 2 3 4]
			s: "abcdef"
			o: make object! [
			]
		]
		--assert 'i = in ino1 'i
		--assert 'c = in ino1 'c
		--assert 'b = in ino1 'b
		--assert 'f = in ino1 'f
		--assert 's = in ino1 's
		--assert 'o = in ino1 'o
		

	--test-- "in2"
		ino1: make object! [
			i: 1
			c: #"a"
			f: 1.0
			b: [1 2 3 4]
			s: "abcdef"
			o: make object! [
				c: #"b"
				i: 2
				f: 2.0
				b: [5 6 7 8]
				s: "ghijkl"
				o: make object! [
				]
			]
		]
		--assert 'i = in ino1 'i
		--assert 'c = in ino1 'c
		--assert 'b = in ino1 'b
		--assert 'f = in ino1 'f
		--assert 's = in ino1 's
		--assert 'o = in ino1 'o
		--assert 'i = in ino1/o 'i
		--assert 'c = in ino1/o 'c
		--assert 'b = in ino1/o 'b
		--assert 'f = in ino1/o 'f
		--assert 's = in ino1/o 's
		--assert 'o = in ino1/o 'o


	--test-- "in3"
		ino1: make object! [
			i: 1
			c: #"a"
			f: 1.0
			b: [1 2 3 4]
			s: "abcdef"
			o: make object! [
				c: #"b"
				i: 2
				f: 2.0
				b: [5 6 7 8]
				s: "ghijkl"
				o: make object! [
					c: #"c"
					i: 3
					f: 3.0
					b: [9 10 11 12]
					s: "mnopqr"
					o: make object! [
					]
				]
			]
		]
		--assert 'i = in ino1 'i
		--assert 'c = in ino1 'c
		--assert 'b = in ino1 'b
		--assert 'f = in ino1 'f
		--assert 's = in ino1 's
		--assert 'o = in ino1 'o
		--assert 'i = in ino1/o 'i
		--assert 'c = in ino1/o 'c
		--assert 'b = in ino1/o 'b
		--assert 'f = in ino1/o 'f
		--assert 's = in ino1/o 's
		--assert 'o = in ino1/o 'o
		--assert 'i = in ino1/o/o 'i
		--assert 'c = in ino1/o/o 'c
		--assert 'b = in ino1/o/o 'b
		--assert 'f = in ino1/o/o 'f
		--assert 's = in ino1/o/o 's
		--assert 'o = in ino1/o/o 'o

	--test-- "in4"
		ino1: make object! [
			i: 1
			c: #"a"
			f: 1.0
			b: [1 2 3 4]
			s: "abcdef"
			o: make object! [
				c: #"b"
				i: 2
				f: 2.0
				b: [5 6 7 8]
				s: "ghijkl"
				o: make object! [
					c: #"c"
					i: 3
					f: 3.0
					b: [9 10 11 12]
					s: "mnopqr"
					o: make object! [
						c: #"d"
						f: 4.0
						i: 4
						b: [13 14 15 16]
						s: "stuvwx"
					]
				]
			]
		]
		--assert 'i = in ino1 'i
		--assert 'c = in ino1 'c
		--assert 'b = in ino1 'b
		--assert 'f = in ino1 'f
		--assert 's = in ino1 's
		--assert 'o = in ino1 'o
		--assert 'i = in ino1/o 'i
		--assert 'c = in ino1/o 'c
		--assert 'b = in ino1/o 'b
		--assert 'f = in ino1/o 'f
		--assert 's = in ino1/o 's
		--assert 'o = in ino1/o 'o
		--assert 'i = in ino1/o/o 'i
		--assert 'c = in ino1/o/o 'c
		--assert 'b = in ino1/o/o 'b
		--assert 'f = in ino1/o/o 'f
		--assert 's = in ino1/o/o 's
		--assert 'o = in ino1/o/o 'o
		--assert 'i = in ino1/o/o/o 'i
		--assert 'c = in ino1/o/o/o 'c
		--assert 'b = in ino1/o/o/o 'b
		--assert 'f = in ino1/o/o/o 'f
		--assert 's = in ino1/o/o/o 's
		
	--test-- "in5"
		in5-f: func[] [make object! [a: 1]]
		--assert 1 = get in in5-f 'a	
	
===end-group===


===start-group=== "local objects"

	f-make-obj-1: func [/local z][
	    z: object [
	        a: 1
	        g: func [/with b /local q][q: 10 either with [a + b + 10][a * 2]]
	        j: func [i][i + 1]
	    ]
		z
	]

	f-make-obj-2: func [/alt][
		either alt [
			make object! [
				a: 10
				g: 123
			]
		][
			make object! [
				a: 1
				g: does [a]
			]
		]
	]

	so3-f: func [][0]

	local-obj-fun: function [/extern so3-f][

		--test-- "loc-basic-1"
			obj1: context []
			--assert "make object! []" = mold obj1

		--test-- "loc-basic-2"
			obj2: object []
			--assert "make object! []" = mold obj2
			
		--test-- "loc-basic-3"
			obj3: make object! []
			--assert "make object! []" = mold obj3
		
		--test-- "loc-basic-4"
			blk: []
			obj4: object blk
			--assert "make object! []" = mold obj4
		
		--test-- "loc-basic-5"
			obj5: object [
				a: 123
				show: does [a + 1]
				reset: does [a: none]
				--assert show = 124
				--assert a = 123
			]
			--assert obj5/show = 124
			obj5/reset
			--assert none? obj5/a

		--test-- "loc-basic-6"
			obj5/a: 456
			--assert obj5/a = 456

		--test-- "loc-basic-7"
			--assert find obj5 'a
			--assert not find obj5 'z
			--assert 456 = select obj5 'a
			--assert none? select obj5 'z

		--test-- "loc-basic-8"
			obj8: context [
				b: 123
				a: object [
					b: 456
					double: does [b * 2]
					set-b: does [b: 'hello]
				]
			]
			--assert obj8/b = 123
			--assert obj8/a/b = 456
			--assert obj8/a/double = 912
			obj8/a/set-b
			--assert obj8/a/b = 'hello

		--test-- "loc-basic-9"
			obj8/a/b: 'red
			--assert obj8/a/b = 'red

		--test-- "loc-basic-10"
			obj10: object [
				a: 1
				b: 2
				inc: func [i /with a][b: i + either with [a][b]]
				sub: context [
					a: 3
					b: 4
					inc: func [i /with a][b: i + either with [a][b]]
				]
			]
			--assert 12 = obj10/inc 10
			--assert obj10/b = 12

			--assert 14 = obj10/sub/inc 10
			--assert obj10/sub/b = 14

		--test-- "loc-basic-11"
			--assert 30 = obj10/inc/with 10 20
			--assert obj10/b = 30

			--assert 50 = obj10/sub/inc/with 10 40
			--assert obj10/sub/b = 50

		--test-- "loc-basic-12"
			blk: [a: 99]
			obj12: object blk
			--assert obj12/a = 99


		--test-- "loc-comp-1"  --assert 	(context [])	 = (context [])
		--test-- "loc-comp-2"  --assert not (context [a: 1]) = (context [])
		--test-- "loc-comp-3"  --assert 	(context [a: 1]) = (context [a: 1])
		--test-- "loc-comp-4"  --assert not (context [a: 1]) = (context [a: 2])
		--test-- "loc-comp-5"  --assert 	(context [a: 1]) < (context [a: 2])
		--test-- "loc-comp-6"  --assert not (context [a: 1]) >= (context [a: 2])
		--test-- "loc-comp-7"  --assert 	(context [a: 2]) < (context [a: 1 b: none])

		--test-- "loc-comp-8"
			obj:  context [a: 123]
			obj2: context [a: 123]
			--assert obj = obj2
			--assert not same? obj obj2
			--assert same? obj obj


		--test-- "loc-self-1"
			obj: context [
				--assert "make object! []" = mold/flat self
			]

		--test-- "loc-self-2"
			obj: context [
				a: 123
				--assert "make object! [a: 123 b: unset]" = mold/flat self
				b: 456
			]

		--test-- "loc-self-3"
			result: {make object! [b: 123 c: "hello" show: func [][--assert object? self] foo: unset]}
			
			obj: object [
				b: 123
				c: "hello"
				show: does [--assert object? self]
				--assert result = mold/flat self
				foo: does [--assert object? self c: none]
				foo
			]
			obj/show
			--assert none? obj/c

		--test-- "loc-self-4"
			p1: object [
			    a: 1
			    b: 2
			    e: does [self/b]
			    f: does [self/b: 789 self/e]
			    --assert self/e = 2
			]
			--assert p1/e = 2
			--assert p1/f = 789

		
		--test-- "loc-simple object 1"
			so1-a: 0
			so1-o: make object! [so1-a: 1]
			--assert so1-a = 0
			--assert so1-o/so1-a = 1
			
		--test-- "loc-simple object 2"
			so2-s: "0"
			so2-o: make object! [so2-s: "1"]
			--assert so2-s = "0"
			--assert so2-o/so2-s = "1"
			
		--test-- "loc-simple object 3"
			so3-s: "0"
			so3-i: 0
			so3-l: true
			so3-c: #"a"
			so3-b: [a b c]
			so3-bs: charset #"^(00)"
			so3-o: make object! [
				so3-s: "1"
				so3-i: 1
				so3-l: false
				so3-c: #"b"
				so3-b: [a b d]
				so3-f: func [][1]
				so3-bs: charset #"^(01)"
			]
			--assert so3-s = "0"
			--assert so3-o/so3-s = "1"
			--assert so3-i = 0
			--assert so3-o/so3-i = 1
			--assert so3-l = true
			--assert so3-o/so3-l = false
			--assert so3-c = #"a"
			--assert so3-o/so3-c = #"b"
			--assert so3-b = [a b c]
			--assert so3-o/so3-b = [a b d]
			--assert so3-f = 0
			--assert so3-o/so3-f = 1
			--assert "make bitset! #{80}" = mold so3-bs
			--assert "make bitset! #{40}" = mold so3-o/so3-bs
			

		--test-- "loc-no1"
			no1-o: make object! [o: make object! [i: 1] ]
			--assert no1-o/o/i = 1
			
		--test-- "loc-no2"
			no2-o1: make object! [
				o2: make object! [
					i: 1
				]
			]
			--assert no2-o1/o2/i = 1
			
		--test-- "loc-no3"
			no3-o1: make object! [
				o2: make object! [
				o3: make object! [
				o4: make object! [
					i: 1
				]]]
			]
			--assert no3-o1/o2/o3/o4/i = 1

		--test-- "loc-no4"
			no4-o1: make object! [
				o2: make object! [
				o3: make object! [
				o4: make object! [
				o5: make object! [
				o6: make object! [
				o7: make object! [
					i: 1
				]]]]]]
			]
			--assert no4-o1/o2/o3/o4/o5/o6/o7/i = 1
		
		--test-- "loc-no5"
			no5-o1: make object! [
				o2: make object! [
				o3: make object! [
				o4: make object! [
				o5: make object! [
				o6: make object! [
				o7: make object! [
				o8: make object! [
				o9: make object! [
				o10: make object! [
				o11: make object! [
				o12: make object! [
				o13: make object! [
				;o14: make object! [
				;o15: make object! [
					i: 1
				]]]]]]]]]]]]
			]
			--assert no5-o1/o2/o3/o4/o5/o6/o7/o8/o9/o10/o11/o12/o13/i = 1
			
		--test-- "loc-no6 issue #928"
			no6-o: make object! [
				a: 1
				o: make object! [
					b: 2
					f: does [a]
					]
				]
			--assert 1 = no6-o/o/f
		

		--test-- "loc-op1"
			op1-o1: make object! [i: 1]
			op1-o2: make op1-o1 []
			--assert op1-o2/i = 1
			
		--test-- "loc-op2"
			op2-o1: make object! [i: 1]
			op2-o2: make op2-o1 [i: 2]
			--assert op2-o2/i = 2
			--assert op2-o1/i = 1

		--test-- "loc-op3"
			op3-o1: make object! [i: 1]
			op3-o2: make op3-o1 [i: 2 j: 3]
			--assert op3-o2/i = 2
			--assert op3-o2/j = 3
			

		--test-- "loc-oip1"
			oip1-i: 1
			oip1-o: make object! [
				i: oip1-i
			]
			--assert 1 = oip1-o/i
			
		--test-- "loc-oip2"
			oip2-i: 1
			oip2-o: make object! [
				i: either oip2-i = 1 [2] [3]
			]
			--assert 2 = oip2-o/i
		
		--test-- "loc-oip3"
			oip3-i: 1
			oip3-o: make object! [
				i: 0
				set 'oip3-i 2
			]
			--assert 2 = oip3-i
			
		--test-- "loc-oip4"
			set 'oip4-i none
			oip4-o: make object! [
				i: 0
				set 'oip4-i 3
			]
			--assert 3 = oip4-i


		--test-- "loc-inherit-1"
			proto: context [
				a: 123
				get-a: does [a]
			]
			new: make proto [a: 99]
			--assert new/a = 99
			--assert new/get-a = 99
			--assert proto/a = 123
			--assert proto/get-a = 123

		--test-- "loc-inherit-2"
			new/a: 456
			--assert new/get-a = 456
			proto/a: 759
			--assert proto/a = 759
			--assert new/get-a = 456

		--test-- "loc-inherit-3"
			newnew: make new [
				reset: does [a: none]
			]
			--assert newnew/a = 456
			newnew/reset
			--assert none? newnew/a
			--assert new/a = 456
			--assert proto/a = 759

		--test-- "loc-inherit-4"
			base: context [
				v: 0
				foo: does [v]
			]

			i: 0
			list: []
			loop 2 [
				bb: make base [v: i]
				--assert bb/foo = i
				append list bb
				i: i + 1
			]
			--assert object? list/1
			--assert list/1/v = 0
			--assert list/2/v = 1

#if config/dev-mode? = no [							;-- libRed does not support multiple-inheritance
		--test-- "loc-inherit-5"
			base5: context [
				b: 123
				get-b: does [b]
				a: object [
					b: 456
					double: does [b * 2]
					set-b: func [/with v] [b: either with [v]['hello]]
				]
			]
			proto5: context [
				b: 999
				value: 71
				foo: does [b + value]
			]
			new: make base5 proto5
			--assert object? new
			--assert new/b = 999
			--assert new/value = 71
			--assert new/a/b = 456
			--assert base5/b = 123

		--test-- "loc-inherit-6"
			--assert new/get-b = 999
			--assert new/a/double = 912
			new/a/set-b/with 10
			--assert new/a/b = 10
			--assert new/b = 999
			--assert base5/b = 123
			--assert new/a/double = 20
			--assert base5/a/double = 20

		--test-- "loc-inherit-7"
			--assert same? new/a base5/a

		--test-- "loc-inherit-8"
			--assert new/foo = 1070
]
		--test-- "loc-inherit-9"
			base9: context [
				v: 123456
				show: does [v]
			]
			i: 100
			list: []
			loop 3 [
				new9: make base9 [v: i]
				--assert new9/v = i
				--assert new9/show = i
				append list new9
				i: i + 1
			]
			--assert base9/v = 123456
			--assert list/1/v = 100
			--assert list/2/v = 101
			--assert list/3/v = 102


		--test-- "loc-ext-1"
			p1: object [
			    a: 1
			    b: 2
			]

			p1/a: context [
				t: 99
				z: 128
				q: object [zz: 345 show: does [zz]]
			]
			--assert object? p1/a
			--assert p1/a/z = 128
			--assert p1/a/q/show = 345

		--test-- "loc-ext-2"
			p1/a/t: does [123]
			--assert p1/a/t = 123

		--test-- "loc-dyn-1"
			d: context [
				value: 998
			    f: does [value]
			]
			;h: :d/f
			;--assert h = 998
			;d/value: 123
			;--assert 123 = do [h]

		--test-- "loc-dyn-2"

			o: make f-make-obj-1 [a: 3]
			--assert 46 = do [o/j 45]			;@@ temporary workaround until dyn-stack branch
			--assert 101 = do [o/j 100]			;@@ temporary workaround until dyn-stack branch

		--test-- "loc-dyn-3"
			--assert 52 = do [o/j o/j 50]		;@@ temporary workaround until dyn-stack branch

		--test-- "loc-dyn-4"
			--assert 33 = do [o/g/with 20]		;@@ temporary workaround until dyn-stack branch
			--assert 59 = do [o/g/with o/j 45]	;@@ temporary workaround until dyn-stack branch

		--test-- "loc-dyn-5"
			z: none
			--assert 12 = do [o/j z: 5 + 6]		;@@ temporary workaround until dyn-stack branch
			--assert  z = 11

		--test-- "loc-dyn-6"
			--assert [17] = reduce [do [o/j o/j z: 5 + 10]] ;@@ temporary workaround until dyn-stack branch
			--assert z = 15

		--test-- "loc-dyn-7"
			repeat c 1 [
				if yes [
					--assert 52 = do [o/j o/j 50]
					--assert 59 = do [o/g/with o/j 45] ;@@ temporary workaround until dyn-stack branch
					--assert [22] = reduce [do [o/j o/j z: 5 + 15]] ;@@ temporary workaround until dyn-stack branch
					--assert z = 20
				]
			]

		--test-- "loc-dyn-8"
			o2: context [zz: none]				;-- test renaming a statically compiled object
			
			o2: f-make-obj-2
			--assert 1 = do [o2/g]				;@@ temporary workaround until dyn-stack branch

		--test-- "loc-dyn-9"
			o2: f-make-obj-2/alt
			--assert 123 = o2/g

		--test-- "loc-dyn-10"

			o: context [a: [123 789]]
			--assert if o/a [true]
			--assert if block? o/a [true]
			--assert if 123 = first o/a [true]

		--test-- "loc-dyn-11"
			--assert either o/a [true][false]
			--assert either block? o/a [true][false]
			--assert either 789 = second o/a [true][false]

		--test-- "loc-dyn-12"
			--assert block? all [o/a]
			--assert not 	all [false o/a]
			--assert not 	all [o/a false]
			--assert 456 = 	all [o/a 456]

		--test-- "loc-dyn-13"
			--assert block? any [o/a 0]
			--assert block? any [false o/a]
			--assert block? any [o/a false]
			--assert block? any [o/a 456]
			--assert 654 =  any [654 o/a]

		--test-- "loc-dyn-14"
			foreach p o/a [--assert any [p = 123 p = 789]]

		--test-- "loc-dyn-15"
			loop length? o/a [--assert any [p = 123 p = 789]]

		--test-- "loc-dyn-16"
			repeat c length? o/a [--assert any [c = 1 c = 2]]

		--test-- "loc-dyn-17"
			repeat c 125 - first o/a [--assert any [c = 1 c = 2]]

		--test-- "loc-dyn-18"
			switch/default first o/a [
				123 [
					--assert true
					switch/default second o/a [
						789 [--assert true]
					][--assert false]
				]
				789 [--assert false]
			][--assert false]

		--test-- "loc-dyn-19"
			 --assert 0 < first o/a

		--test-- "loc-dyn-20"
			case [
				first o/a  	[--assert true]
				'else 		[--assert false]
			]

		--test-- "loc-dyn-21"
			case [
				0 < first o/a [--assert true]
				'else	  	  [--assert false]
			]

		--test-- "loc-dyn-22"
			case [
				0 = first o/a 	  [--assert false]
				789 = second o/a  [--assert true]
			]

		--test-- "loc-dyn-23"
			c: context [
				x: 1
				f: func [o [object!]][x: do [o/a]]	;@@ temporary workaround until dyn-stack branch
			]

			c/f object [a: 123]
			--assert c/x = 123

			c/f object [a: does [99]]
			--assert c/x = 99

		--test-- "loc-dyn-24"					;; issue #965
			o: [a "hello" b " world"]
			--assert "hello" = o/a
			--assert "hello world" = append o/a o/b
			--assert "hello world123" = append o/a 123 o/b

		--test-- "loc-dyn-25"
			o: context [
				a: func [v][v * 2]
				b: 123
			]
			--assert 143 = add o/a 10 o/b
			--assert 256 = add o/a o/b 10

		--test-- "loc-copy-1"
			co1: make object! [a: 1]
			co2: copy co1
			co1/a: 2
			--assert 2 = co1/a
			--assert 1 = co2/a
		
		--test-- "loc-copy-2"
			co1: make object! [
				a: 1
				f: func[][a]
			]
			co2: copy co1
			co1/a: 2
			--assert 2 = co1/f
			--assert 1 = do [co2/f]		;@@ temporary workaround until dyn-stack branch
			
		--test-- "loc-copy-3"
			co1: make object! [
				a: 1
				b: 2
				blk: [1 2 3 4]
			]
			co2: copy co1
			co1/blk/1: 5
			--assert 5 = co1/blk/1 
			--assert 5 = do [co2/blk/1]	;@@ temporary workaround until dyn-stack branch
			
		--test-- "loc-copy-4"
			co1: make object! [
				a: 1
				b: 2
				blk: [1 2 3 4]
			]
			co2: copy/deep co1
			co1/blk/1: 5
			--assert 5 = co1/blk/1 
			--assert 1 = do [co2/blk/1]
			
		--test-- "loc-copy-5"
			co1: make object! [
				a: 1
				s: "Silly old string"
				f: func [][
					[s a]
				]
			]
			co2: copy co1
			co1/a: 5
			co1/s/2: #"h"
			co1/s/3: #"i"
			co1/s/4: #"n"
			--assert "Shiny old string" = co1/s
			--assert "Shiny old string" = co2/s
			
		--test-- "loc-copy-6"
			co1: make object! [
				a: 1
				s: "Silly old string"
			]
			co2: copy co1
			co1/a: 5
			co1/s/2: #"h"
			co1/s/3: #"i"
			co1/s/4: #"n"
			replace co1/s "old" "new"
			--assert "Shiny new string" = co1/s
			--assert "Shiny new string" = co2/s
			
		--test-- "loc-copy-7"
			co5: make object! [
				a: 1
				s: "Silly old string"
			]
			co6: copy/deep co5
			co5/a: 5
			co5/s/2: #"h"
			co5/s/3: #"i"
			co5/s/4: #"n"
			replace at co5/s 7 "old" "new"
			--assert "Shiny new string" = co5/s
			--assert "Silly old string" = co6/s
			
		--test-- "loc-copy-8"
			co1: make object! [
				s: "Silly old string"
				f: func[][s]
			]
			co2: copy co1
			co1/s/2: #"h"
			co1/s/3: #"i"
			co1/s/4: #"n"
			replace co1/s "old" "new"
			--assert "Shiny new string" = co1/f
			--assert "Shiny new string" = do [co2/f]	;@@ temporary workaround until dyn-stack branch
			
		--test-- "loc-copy-9"
			co1: make object! [
				s: "Silly old string"
				f: func[][s]
			]
			co2: copy/deep co1
			co1/s/2: #"h"
			co1/s/3: #"i"
			co1/s/4: #"n"
			replace co1/s "old" "new"
			--assert "Shiny new string" = co1/f
			--assert "Silly old string" = do [co2/f] ;@@ temporary workaround until dyn-stack branch
		
		--test-- "loc-copy-10"
			co1: make object! [
				a: 1
				f: func[][a]
			]
			co2: copy/deep co1
			co1/a: 2
			--assert 2 = co1/f
			--assert 1 = do [co2/f]				;@@ temporary workaround until dyn-stack branch
			
		--test-- "loc-copy-11"
			co1: make object! [
				a: 1
				oo: make object! [
					f: func[][a]
				]
			]
			co2: copy/deep co1
			co1/a: 2
			--assert 2 = co1/oo/f
			--assert 2 = do [co2/oo/f]			;@@ temporary workaround until dyn-stack branch
			
		--test-- "loc-copy-12"
			co1: make object! [
				a: 1
				oo: make object! [
					f: func[][a]
				]
			]
			co2: copy/deep co1
			co1/a: 2
			--assert 2 = co1/oo/f
			--assert 2 = do [co2/oo/f]			;@@ temporary workaround until dyn-stack branch

		--test-- "loc-in1"
			ino1: make object! [
				i: 1
				c: #"a"
				f: 1.0
				b: [1 2 3 4]
				s: "abcdef"
				o: make object! [
				]
			]
			--assert 'i = in ino1 'i
			--assert 'c = in ino1 'c
			--assert 'b = in ino1 'b
			--assert 'f = in ino1 'f
			--assert 's = in ino1 's
			--assert 'o = in ino1 'o
			

		--test-- "loc-in2"
			ino1: make object! [
				i: 1
				c: #"a"
				f: 1.0
				b: [1 2 3 4]
				s: "abcdef"
				o: make object! [
					c: #"b"
					i: 2
					f: 2.0
					b: [5 6 7 8]
					s: "ghijkl"
					o: make object! [
					]
				]
			]
			--assert 'i = in ino1 'i
			--assert 'c = in ino1 'c
			--assert 'b = in ino1 'b
			--assert 'f = in ino1 'f
			--assert 's = in ino1 's
			--assert 'o = in ino1 'o
			--assert 'i = in ino1/o 'i
			--assert 'c = in ino1/o 'c
			--assert 'b = in ino1/o 'b
			--assert 'f = in ino1/o 'f
			--assert 's = in ino1/o 's
			--assert 'o = in ino1/o 'o


		--test-- "loc-in3"
			ino1: make object! [
				i: 1
				c: #"a"
				f: 1.0
				b: [1 2 3 4]
				s: "abcdef"
				o: make object! [
					c: #"b"
					i: 2
					f: 2.0
					b: [5 6 7 8]
					s: "ghijkl"
					o: make object! [
						c: #"c"
						i: 3
						f: 3.0
						b: [9 10 11 12]
						s: "mnopqr"
						o: make object! [
						]
					]
				]
			]
			--assert 'i = in ino1 'i
			--assert 'c = in ino1 'c
			--assert 'b = in ino1 'b
			--assert 'f = in ino1 'f
			--assert 's = in ino1 's
			--assert 'o = in ino1 'o
			--assert 'i = in ino1/o 'i
			--assert 'c = in ino1/o 'c
			--assert 'b = in ino1/o 'b
			--assert 'f = in ino1/o 'f
			--assert 's = in ino1/o 's
			--assert 'o = in ino1/o 'o
			--assert 'i = in ino1/o/o 'i
			--assert 'c = in ino1/o/o 'c
			--assert 'b = in ino1/o/o 'b
			--assert 'f = in ino1/o/o 'f
			--assert 's = in ino1/o/o 's
			--assert 'o = in ino1/o/o 'o

		--test-- "loc-in4"
			ino1: make object! [
				i: 1
				c: #"a"
				f: 1.0
				b: [1 2 3 4]
				s: "abcdef"
				o: make object! [
					c: #"b"
					i: 2
					f: 2.0
					b: [5 6 7 8]
					s: "ghijkl"
					o: make object! [
						c: #"c"
						i: 3
						f: 3.0
						b: [9 10 11 12]
						s: "mnopqr"
						o: make object! [
							c: #"d"
							f: 4.0
							i: 4
							b: [13 14 15 16]
							s: "stuvwx"
						]
					]
				]
			]
			--assert 'i = in ino1 'i
			--assert 'c = in ino1 'c
			--assert 'b = in ino1 'b
			--assert 'f = in ino1 'f
			--assert 's = in ino1 's
			--assert 'o = in ino1 'o
			--assert 'i = in ino1/o 'i
			--assert 'c = in ino1/o 'c
			--assert 'b = in ino1/o 'b
			--assert 'f = in ino1/o 'f
			--assert 's = in ino1/o 's
			--assert 'o = in ino1/o 'o
			--assert 'i = in ino1/o/o 'i
			--assert 'c = in ino1/o/o 'c
			--assert 'b = in ino1/o/o 'b
			--assert 'f = in ino1/o/o 'f
			--assert 's = in ino1/o/o 's
			--assert 'o = in ino1/o/o 'o
			--assert 'i = in ino1/o/o/o 'i
			--assert 'c = in ino1/o/o/o 'c
			--assert 'b = in ino1/o/o/o 'b
			--assert 'f = in ino1/o/o/o 'f
			--assert 's = in ino1/o/o/o 's
		
		--test-- "loc-in5"
			in5-f: func[] [make object! [a: 1]]
			if system/state/interpreted? [
				--assert 1 = get in in5-f 'a	
			]
	]

	local-obj-fun

===end-group===

===start-group=== "objects within functions"

	--test-- "owf1 #946"
		owf1-o: make object! [
			a: 1
			f: func [/local o][
				o: make object! [
					a: 2
				]
				o/a
			]
		]
		--assert 2 = owf1-o/f
		
	--test-- "owf2 #956"
		owf2-o: make object! [
			a: 1
			f: func [/local o][
				o: make object! [
					a: 2
				]
				either o/a [o/a] [99]
			]
		]
		--assert 2 = owf2-o/f
		
	--test-- "owf3 - #957"
		owf3-f: func [
			o [object!]
		][
			switch o/a [
				0 [0]
				1 [1]
				2 [2]
			]		
		
		]
		owf3-o: make object! [
			a: 1
		]
		--assert 1 = owf3-f owf3-o
		
	--test-- "owf4 - #947"
		owf4-f: func [
			o [object!]
		][
			either o/a [o/a] [99]		
		]
		owf4-o: make object! [
			a: 1
		]
		--assert 1 = owf4-f owf4-o
		
	--test-- "owf5"
		owf5-o: make object! [
			a: 1
			f: func [][
				o: make object! [        	;-- in global context
					a: 2
				]
				o/a
			]
		]
		--assert 2 = owf5-o/f
		
	--test-- "owf6"
		owf6-o: make object! [
			a: 1
			f: func [][
				o: make object! [			;-- in global context
					a: 2
				]
				either o/a [o/a] [99]
			]
		]
		--assert 2 = owf6-o/f

	--test-- "owf7 - #959"
		owf7-o: make object! [
			owf7-x: none
			f: func [
				o [object!]
			][
				owf7-x: o/a
			]
		]
		owf7-oo: make object! [a: 1]
		--assert 1 = owf7-o/f owf7-oo
		
	--test-- "owf8 - #960"
		owf8-o: make object! [
			owf8-oo: make object! [a: 1]
		]
		owf8-f:  does [owf8-o/owf8-oo]
		;owf8-f2: func [o [object!]] [o/a]	;-- can be replaced once 'in is written
		--assert 1 = get in owf8-f 'a

	--test-- "owf9 - #962"
		owf9-f: func [
			o [object!]
			/local
				v	
		][
			v: none
			case [
				all [
					o/a = o/a
					o/a = o/a
				][
					o/a
				]
			]
		]
		owf9-o: make object! [a: 1]
		--assert 1 = owf9-f owf9-o

	--test-- "owf10 - #962"
		owf10-f: func [
			o [object!]
		][
			v: none							;-- in global context	
			case [
				all [
					o/a = o/a
					o/a = o/a
				][
					o/a
				]
			]
		]
		owf10-o: make object! [a: 1]
		--assert 1 = owf10-f owf10-o
											
	--test-- "owf11 - #962"
		owf11-f: func [
			o [object!]
			/local
				v	
		][
			v: none
			case [
				all [
					equal? o/a o/a
					equal? o/a o/a
				][
					o/a
				]
			]
		]
		owf11-o: make object! [a: 1]
		--assert 1 = owf11-f owf11-o
	
	--test-- "owf12 - #962"
		owf12-f: func [
			o [object!]
		][
			v: none							;-- in global context	
			case [
				all [
					equal? o/a o/a
					equal? o/a o/a
				][
					o/a
				]
			]
		]
		owf12-o: make object! [a: 1]
		--assert 1 = owf12-f owf12-o
		
	--test-- "owf13"
		owf13-f: func [
			o [object!]
			/local v
		][
			v: none
			either o/a = o/b [
 			    1234
			][
			    0
			]
		]
		owf13-o: make object! [a: 1 b: 1]
	    --assert 1234 = owf13-f owf13-o
		
===end-group===

===start-group=== "case sensitivity"

	--test-- "ocs1"
		ocs1-o: make object! [A: 1]
		--assert ocs1-o/A = 1
		--assert ocs1-o/A == 1
		--assert ocs1-o/a = 1
		--assert ocs1-o/a == 1
		
	--test-- "ocs2"
		ocs2-o: make object! [a: 1 A: 2]
		--assert ocs2-o/a = 2
	
	--test-- "ocs3"
		ocs3-o: make object! [a: 1 if true [A: 2]]
		--assert ocs3-o/a = 2
		
	--test-- "ocs3"
		ocs3-o: make object! [a: 1 if false [A: 2]]
		--assert ocs3-o/a = 1
		
	--test-- "ocs4"
		ocs4-o: make object! [a: 1]
		--assert 'A = in ocs4-o 'A
		--assert 'a = in ocs4-o 'A
		--assert 'A == in ocs4-o 'A

===end-group===



===start-group=== "absolute"
	--test-- "abs1" --assert 0 = absolute 0
	--test-- "abs2" --assert 1 = absolute 1
	--test-- "abs3" --assert 1 = absolute -1
	--test-- "abs4" --assert 2147483647 = absolute -2147483647
	--test-- "abs5" --assert 2147483647 = absolute 2147483647
===end-group===

===start-group=== "power"
	--test-- "pow1" --assert 3 	 = power  3 1
	--test-- "pow2" --assert 9 	 = power -3 2
	--test-- "pow3" --assert -27 = power -3 3
	--test-- "pow4" --assertf~= -0.3333333333333333 (power -3 -1) 1E-13
	--test-- "pow5" --assert -1  = power -1 3
	--test-- "pow6" --assert 1	 = power -1 -4
	;--test-- "pow7" --assert 0.0 = power 0 -1		;@@ return INF or 0.0
===end-group===

===start-group=== "max/min"
	--test-- "max1" --assert 3 	 = max  3 1
	--test-- "min1" --assert -3  = min -3 2
===end-group===

===start-group=== "negative?/positive?"
	--test-- "neg1" --assert true  = negative? -1
	--test-- "neg2" --assert false = negative? 0
	--test-- "neg3" --assert false = negative? 1
	--test-- "pos1" --assert true  = positive? 1
	--test-- "pos2" --assert false = positive? 0
	--test-- "pos3" --assert false = positive? -1
===end-group===

===start-group=== "complemented"
	--test-- "comp-1" --assert -2 = complement 1
	--test-- "comp-2" --assert -1 = complement 0
	--test-- "comp-3" --assert 0  = complement FFFFFFFFh
===end-group===

===start-group=== "shift"
	--test-- "shift-1" --assert 1  = shift 2 1
	--test-- "shift-2" --assert 16 = shift/left 2 3
	--test-- "shift-3" --assert FFFFFFFEh = shift FFFFFFFCh 1
	--test-- "shift-4" --assert 7FFFFFFEh = shift/logical FFFFFFFCh 1
===end-group===

===start-group=== "shift op!"
	--test-- "shift-op-1" --assert 2 >> 1 = 1
	--test-- "shift-op-2" --assert 2 << 3 = 16
	--test-- "shift-op-3" --assert FFFFFFFCh >> 1 = FFFFFFFEh
	--test-- "shift-op-4" --assert FFFFFFFCh >>> 1 = 7FFFFFFEh
===end-group===

===start-group=== "and"
	--test-- "and1" --assert 01h and 10h = 00h
	--test-- "and2" --assert 11h and 10h = 10h
	--test-- "and3" --assert 01h and 1Fh = 01h
===end-group===

===start-group=== "or"
	--test-- "or1" --assert  01h or 10h  = 11h
	--test-- "or2" --assert  11h or 10h  = 11h
	--test-- "or3" --assert  01h or 1Fh  = 1Fh
===end-group===

===start-group=== "xor"
	--test-- "xor1" --assert 01h xor 10h = 11h
	--test-- "xor2" --assert 11h xor 10h = 01h
	--test-- "xor3" --assert 01h xor 1Fh = 1Eh
===end-group===

===start-group=== "random"
	--test-- "random1" --assert 1 = random 1
	--test-- "random2" --assert 2 = random/only next [1 2]
	--test-- "random3" --assert not negative? random 1
===end-group===

===start-group=== "round"
	--test-- "round1" --assert  123904 = round/to  123'456 1024
	--test-- "round2" --assert -123904 = round/to -123'456 1024

	--test-- "round3" --assert  21 = round/down/to  23 3
	--test-- "round4" --assert -21 = round/down/to -23 3

	--test-- "round5" --assert  24 = round/even/to  23 3
	--test-- "round6" --assert -24 = round/even/to -23 3

	--test-- "round7" --assert  24 = round/half-down/to  23 3
	--test-- "round8" --assert -24 = round/half-down/to -23 3

	--test-- "round9" --assert  21 = round/floor/to  23 3
	--test-- "round10" --assert -24 = round/floor/to -23 3

	--test-- "round11" --assert  24 = round/ceiling/to  23 3
	--test-- "round12" --assert -21 = round/ceiling/to -23 3

	--test-- "round13" --assert  24 = round/half-ceiling/to  23 3
	--test-- "round14" --assert -24 = round/half-ceiling/to -23 3
===end-group===

===start-group=== "with other datatypes"
	--test-- "tuple1" --assert 3 * 1.4.8 = 3.12.24
	--test-- "tuple2" --assert 3 + 1.4.8 = 4.7.11
	--test-- "pair1"  --assert 3 + 2x3 = 5x6
	--test-- "pair1"  --assert 3 * 2x3 = 6x9
===end-group===

===start-group=== "add"
	--test-- "0 + 1"
		i: 0
		j: 1
		--assert strict-equal? 1 0 + 1
		--assert strict-equal? 1 add 0 1
		--assert strict-equal? 1 i + j
		--assert strict-equal? 1 add i j

	--test-- "0 + -1"
		i: 0
		j: -1
		--assert strict-equal? -1 0 + -1
		--assert strict-equal? -1 add 0 -1
		--assert strict-equal? -1 i + j
		--assert strict-equal? -1 add i j

	--test-- "0 + -2147483648"
		i: 0
		j: -2147483648
		--assert strict-equal? -2147483648 0 + -2147483648
		--assert strict-equal? -2147483648 add 0 -2147483648
		--assert strict-equal? -2147483648 i + j
		--assert strict-equal? -2147483648 add i j

	--test-- "0 + 2147483647"
		i: 0
		j: 2147483647
		--assert strict-equal? 2147483647 0 + 2147483647
		--assert strict-equal? 2147483647 add 0 2147483647
		--assert strict-equal? 2147483647 i + j
		--assert strict-equal? 2147483647 add i j

	--test-- "0 + 65536"
		i: 0
		j: 65536
		--assert strict-equal? 65536 0 + 65536
		--assert strict-equal? 65536 add 0 65536
		--assert strict-equal? 65536 i + j
		--assert strict-equal? 65536 add i j

	--test-- "0 + 256"
		i: 0
		j: 256
		--assert strict-equal? 256 0 + 256
		--assert strict-equal? 256 add 0 256
		--assert strict-equal? 256 i + j
		--assert strict-equal? 256 add i j

	--test-- "0 + 16777216"
		i: 0
		j: 16777216
		--assert strict-equal? 16777216 0 + 16777216
		--assert strict-equal? 16777216 add 0 16777216
		--assert strict-equal? 16777216 i + j
		--assert strict-equal? 16777216 add i j

	--test-- "1 + -1"
		i: 1
		j: -1
		--assert strict-equal? 0 1 + -1
		--assert strict-equal? 0 add 1 -1
		--assert strict-equal? 0 i + j
		--assert strict-equal? 0 add i j

	--test-- "1 + -2147483648"
		i: 1
		j: -2147483648
		--assert strict-equal? -2147483647 1 + -2147483648
		--assert strict-equal? -2147483647 add 1 -2147483648
		--assert strict-equal? -2147483647 i + j
		--assert strict-equal? -2147483647 add i j

	--test-- "1 + 2147483647"
		i: 1
		j: 2147483647
		--assert error? try [1 + 2147483647]
		--assert error? try [add 1 2147483647]
		--assert error? try [i + j]
		--assert error? try [add i j]

	--test-- "1 + 65536"
		i: 1
		j: 65536
		--assert strict-equal? 65537 1 + 65536
		--assert strict-equal? 65537 add 1 65536
		--assert strict-equal? 65537 i + j
		--assert strict-equal? 65537 add i j

	--test-- "1 + 256"
		i: 1
		j: 256
		--assert strict-equal? 257 1 + 256
		--assert strict-equal? 257 add 1 256
		--assert strict-equal? 257 i + j
		--assert strict-equal? 257 add i j

	--test-- "1 + 16777216"
		i: 1
		j: 16777216
		--assert strict-equal? 16777217 1 + 16777216
		--assert strict-equal? 16777217 add 1 16777216
		--assert strict-equal? 16777217 i + j
		--assert strict-equal? 16777217 add i j

	--test-- "-1 + -2147483648"
		i: -1
		j: -2147483648
		--assert error? try [-1 + -2147483648]
		--assert error? try [add -1 -2147483648]
		--assert error? try [i + j]
		--assert error? try [add i j]

	--test-- "-1 + 2147483647"
		i: -1
		j: 2147483647
		--assert strict-equal? 2147483646 -1 + 2147483647
		--assert strict-equal? 2147483646 add -1 2147483647
		--assert strict-equal? 2147483646 i + j
		--assert strict-equal? 2147483646 add i j

	--test-- "-1 + 65536"
		i: -1
		j: 65536
		--assert strict-equal? 65535 -1 + 65536
		--assert strict-equal? 65535 add -1 65536
		--assert strict-equal? 65535 i + j
		--assert strict-equal? 65535 add i j

	--test-- "-1 + 256"
		i: -1
		j: 256
		--assert strict-equal? 255 -1 + 256
		--assert strict-equal? 255 add -1 256
		--assert strict-equal? 255 i + j
		--assert strict-equal? 255 add i j

	--test-- "-1 + 16777216"
		i: -1
		j: 16777216
		--assert strict-equal? 16777215 -1 + 16777216
		--assert strict-equal? 16777215 add -1 16777216
		--assert strict-equal? 16777215 i + j
		--assert strict-equal? 16777215 add i j

	--test-- "-2147483648 + 2147483647"
		i: -2147483648
		j: 2147483647
		--assert strict-equal? -1 -2147483648 + 2147483647
		--assert strict-equal? -1 add -2147483648 2147483647
		--assert strict-equal? -1 i + j
		--assert strict-equal? -1 add i j

	--test-- "-2147483648 + 65536"
		i: -2147483648
		j: 65536
		--assert strict-equal? -2147418112 -2147483648 + 65536
		--assert strict-equal? -2147418112 add -2147483648 65536
		--assert strict-equal? -2147418112 i + j
		--assert strict-equal? -2147418112 add i j

	--test-- "-2147483648 + 256"
		i: -2147483648
		j: 256
		--assert strict-equal? -2147483392 -2147483648 + 256
		--assert strict-equal? -2147483392 add -2147483648 256
		--assert strict-equal? -2147483392 i + j
		--assert strict-equal? -2147483392 add i j

	--test-- "-2147483648 + 16777216"
		i: -2147483648
		j: 16777216
		--assert strict-equal? -2130706432 -2147483648 + 16777216
		--assert strict-equal? -2130706432 add -2147483648 16777216
		--assert strict-equal? -2130706432 i + j
		--assert strict-equal? -2130706432 add i j

	--test-- "2147483647 + 65536"
		i: 2147483647
		j: 65536
		--assert error? try [2147483647 + 65536]
		--assert error? try [add 2147483647 65536]
		--assert error? try [i + j]
		--assert error? try [add i j]

	--test-- "2147483647 + 256"
		i: 2147483647
		j: 256
		--assert error? try [2147483647 + 256]
		--assert error? try [add 2147483647 256]
		--assert error? try [i + j]
		--assert error? try [add i j]

	--test-- "2147483647 + 16777216"
		i: 2147483647
		j: 16777216
		--assert error? try [2147483647 + 16777216]
		--assert error? try [add 2147483647 16777216]
		--assert error? try [i + j]
		--assert error? try [add i j]

	--test-- "65536 + 256"
		i: 65536
		j: 256
		--assert strict-equal? 65792 65536 + 256
		--assert strict-equal? 65792 add 65536 256
		--assert strict-equal? 65792 i + j
		--assert strict-equal? 65792 add i j

	--test-- "65536 + 16777216"
		i: 65536
		j: 16777216
		--assert strict-equal? 16842752 65536 + 16777216
		--assert strict-equal? 16842752 add 65536 16777216
		--assert strict-equal? 16842752 i + j
		--assert strict-equal? 16842752 add i j

	--test-- "256 + 16777216"
		i: 256
		j: 16777216
		--assert strict-equal? 16777472 256 + 16777216
		--assert strict-equal? 16777472 add 256 16777216
		--assert strict-equal? 16777472 i + j
		--assert strict-equal? 16777472 add i j

===end-group===

===start-group=== "subtract"

	--test-- "0 - 1"
		i: 0
		j: 1
		--assert strict-equal? -1 0 - 1
		--assert strict-equal? -1 subtract 0 1
		--assert strict-equal? -1 i - j
		--assert strict-equal? -1 subtract i j

	--test-- "0 - -1"
		i: 0
		j: -1
		--assert strict-equal? 1 0 - -1
		--assert strict-equal? 1 subtract 0 -1
		--assert strict-equal? 1 i - j
		--assert strict-equal? 1 subtract i j

	--test-- "0 - -2147483648"
		i: 0
		j: -2147483648
		--assert error? try [0 - -2147483648]
		--assert error? try [subtract 0 -2147483648]
		--assert error? try [i - j]
		--assert error? try [subtract i j]

	--test-- "0 - 2147483647"
		i: 0
		j: 2147483647
		--assert strict-equal? -2147483647 0 - 2147483647
		--assert strict-equal? -2147483647 subtract 0 2147483647
		--assert strict-equal? -2147483647 i - j
		--assert strict-equal? -2147483647 subtract i j

	--test-- "0 - 65536"
		i: 0
		j: 65536
		--assert strict-equal? -65536 0 - 65536
		--assert strict-equal? -65536 subtract 0 65536
		--assert strict-equal? -65536 i - j
		--assert strict-equal? -65536 subtract i j

	--test-- "0 - 256"
		i: 0
		j: 256
		--assert strict-equal? -256 0 - 256
		--assert strict-equal? -256 subtract 0 256
		--assert strict-equal? -256 i - j
		--assert strict-equal? -256 subtract i j

	--test-- "0 - 16777216"
		i: 0
		j: 16777216
		--assert strict-equal? -16777216 0 - 16777216
		--assert strict-equal? -16777216 subtract 0 16777216
		--assert strict-equal? -16777216 i - j
		--assert strict-equal? -16777216 subtract i j

	--test-- "1 - 0"
		i: 1
		j: 0
		--assert strict-equal? 1 1 - 0
		--assert strict-equal? 1 subtract 1 0
		--assert strict-equal? 1 i - j
		--assert strict-equal? 1 subtract i j

	--test-- "1 - -1"
		i: 1
		j: -1
		--assert strict-equal? 2 1 - -1
		--assert strict-equal? 2 subtract 1 -1
		--assert strict-equal? 2 i - j
		--assert strict-equal? 2 subtract i j

	--test-- "1 - -2147483648"
		i: 1
		j: -2147483648
		--assert error? try [1 - -2147483648]
		--assert error? try [subtract 1 -2147483648]
		--assert error? try [i - j]
		--assert error? try [subtract i j]

	--test-- "1 - 2147483647"
		i: 1
		j: 2147483647
		--assert strict-equal? -2147483646 1 - 2147483647
		--assert strict-equal? -2147483646 subtract 1 2147483647
		--assert strict-equal? -2147483646 i - j
		--assert strict-equal? -2147483646 subtract i j

	--test-- "1 - 65536"
		i: 1
		j: 65536
		--assert strict-equal? -65535 1 - 65536
		--assert strict-equal? -65535 subtract 1 65536
		--assert strict-equal? -65535 i - j
		--assert strict-equal? -65535 subtract i j

	--test-- "1 - 256"
		i: 1
		j: 256
		--assert strict-equal? -255 1 - 256
		--assert strict-equal? -255 subtract 1 256
		--assert strict-equal? -255 i - j
		--assert strict-equal? -255 subtract i j

	--test-- "1 - 16777216"
		i: 1
		j: 16777216
		--assert strict-equal? -16777215 1 - 16777216
		--assert strict-equal? -16777215 subtract 1 16777216
		--assert strict-equal? -16777215 i - j
		--assert strict-equal? -16777215 subtract i j

	--test-- "-1 - 0"
		i: -1
		j: 0
		--assert strict-equal? -1 -1 - 0
		--assert strict-equal? -1 subtract -1 0
		--assert strict-equal? -1 i - j
		--assert strict-equal? -1 subtract i j

	--test-- "-1 - 1"
		i: -1
		j: 1
		--assert strict-equal? -2 -1 - 1
		--assert strict-equal? -2 subtract -1 1
		--assert strict-equal? -2 i - j
		--assert strict-equal? -2 subtract i j

	--test-- "-1 - -2147483648"
		i: -1
		j: -2147483648
		--assert strict-equal? 2147483647 -1 - -2147483648
		--assert strict-equal? 2147483647 subtract -1 -2147483648
		--assert strict-equal? 2147483647 i - j
		--assert strict-equal? 2147483647 subtract i j

	--test-- "-1 - 2147483647"
		i: -1
		j: 2147483647
		--assert strict-equal? -2147483648 -1 - 2147483647
		--assert strict-equal? -2147483648 subtract -1 2147483647
		--assert strict-equal? -2147483648 i - j
		--assert strict-equal? -2147483648 subtract i j

	--test-- "-1 - 65536"
		i: -1
		j: 65536
		--assert strict-equal? -65537 -1 - 65536
		--assert strict-equal? -65537 subtract -1 65536
		--assert strict-equal? -65537 i - j
		--assert strict-equal? -65537 subtract i j

	--test-- "-1 - 256"
		i: -1
		j: 256
		--assert strict-equal? -257 -1 - 256
		--assert strict-equal? -257 subtract -1 256
		--assert strict-equal? -257 i - j
		--assert strict-equal? -257 subtract i j

	--test-- "-1 - 16777216"
		i: -1
		j: 16777216
		--assert strict-equal? -16777217 -1 - 16777216
		--assert strict-equal? -16777217 subtract -1 16777216
		--assert strict-equal? -16777217 i - j
		--assert strict-equal? -16777217 subtract i j

	--test-- "-2147483648 - 0"
		i: -2147483648
		j: 0
		--assert strict-equal? -2147483648 -2147483648 - 0
		--assert strict-equal? -2147483648 subtract -2147483648 0
		--assert strict-equal? -2147483648 i - j
		--assert strict-equal? -2147483648 subtract i j

	--test-- "-2147483648 - 1"
		i: -2147483648
		j: 1
		--assert error? try [-2147483648 - 1]
		--assert error? try [subtract -2147483648 1]
		--assert error? try [i - j]
		--assert error? try [subtract i j]

	--test-- "-2147483648 - -1"
		i: -2147483648
		j: -1
		--assert strict-equal? -2147483647 -2147483648 - -1
		--assert strict-equal? -2147483647 subtract -2147483648 -1
		--assert strict-equal? -2147483647 i - j
		--assert strict-equal? -2147483647 subtract i j

	--test-- "-2147483648 - 2147483647"
		i: -2147483648
		j: 2147483647
		--assert error? try [-2147483648 - 2147483647]
		--assert error? try [subtract -2147483648 2147483647]
		--assert error? try [i - j]
		--assert error? try [subtract i j]

	--test-- "-2147483648 - 65536"
		i: -2147483648
		j: 65536
		--assert error? try [-2147483648 - 65536]
		--assert error? try [subtract -2147483648 65536]
		--assert error? try [i - j]
		--assert error? try [subtract i j]

	--test-- "-2147483648 - 256"
		i: -2147483648
		j: 256
		--assert error? try [-2147483648 - 256]
		--assert error? try [subtract -2147483648 256]
		--assert error? try [i - j]
		--assert error? try [subtract i j]

	--test-- "-2147483648 - 16777216"
		i: -2147483648
		j: 16777216
		--assert error? try [-2147483648 - 16777216]
		--assert error? try [subtract -2147483648 16777216]
		--assert error? try [i - j]
		--assert error? try [subtract i j]

	--test-- "2147483647 - 0"
		i: 2147483647
		j: 0
		--assert strict-equal? 2147483647 2147483647 - 0
		--assert strict-equal? 2147483647 subtract 2147483647 0
		--assert strict-equal? 2147483647 i - j
		--assert strict-equal? 2147483647 subtract i j

	--test-- "2147483647 - 1"
		i: 2147483647
		j: 1
		--assert strict-equal? 2147483646 2147483647 - 1
		--assert strict-equal? 2147483646 subtract 2147483647 1
		--assert strict-equal? 2147483646 i - j
		--assert strict-equal? 2147483646 subtract i j

	--test-- "2147483647 - -1"
		i: 2147483647
		j: -1
		--assert error? try [2147483647 - -1]
		--assert error? try [subtract 2147483647 -1]
		--assert error? try [i - j]
		--assert error? try [subtract i j]

	--test-- "2147483647 - -2147483648"
		i: 2147483647
		j: -2147483648
		--assert error? try [2147483647 - -2147483648]
		--assert error? try [subtract 2147483647 -2147483648]
		--assert error? try [i - j]
		--assert error? try [subtract i j]

	--test-- "2147483647 - 65536"
		i: 2147483647
		j: 65536
		--assert strict-equal? 2147418111 2147483647 - 65536
		--assert strict-equal? 2147418111 subtract 2147483647 65536
		--assert strict-equal? 2147418111 i - j
		--assert strict-equal? 2147418111 subtract i j

	--test-- "2147483647 - 256"
		i: 2147483647
		j: 256
		--assert strict-equal? 2147483391 2147483647 - 256
		--assert strict-equal? 2147483391 subtract 2147483647 256
		--assert strict-equal? 2147483391 i - j
		--assert strict-equal? 2147483391 subtract i j

	--test-- "2147483647 - 16777216"
		i: 2147483647
		j: 16777216
		--assert strict-equal? 2130706431 2147483647 - 16777216
		--assert strict-equal? 2130706431 subtract 2147483647 16777216
		--assert strict-equal? 2130706431 i - j
		--assert strict-equal? 2130706431 subtract i j

	--test-- "65536 - 0"
		i: 65536
		j: 0
		--assert strict-equal? 65536 65536 - 0
		--assert strict-equal? 65536 subtract 65536 0
		--assert strict-equal? 65536 i - j
		--assert strict-equal? 65536 subtract i j

	--test-- "65536 - 1"
		i: 65536
		j: 1
		--assert strict-equal? 65535 65536 - 1
		--assert strict-equal? 65535 subtract 65536 1
		--assert strict-equal? 65535 i - j
		--assert strict-equal? 65535 subtract i j

	--test-- "65536 - -1"
		i: 65536
		j: -1
		--assert strict-equal? 65537 65536 - -1
		--assert strict-equal? 65537 subtract 65536 -1
		--assert strict-equal? 65537 i - j
		--assert strict-equal? 65537 subtract i j

	--test-- "65536 - -2147483648"
		i: 65536
		j: -2147483648
		--assert error? try [65536 - -2147483648]
		--assert error? try [subtract 65536 -2147483648]
		--assert error? try [i - j]
		--assert error? try [subtract i j]

	--test-- "65536 - 2147483647"
		i: 65536
		j: 2147483647
		--assert strict-equal? -2147418111 65536 - 2147483647
		--assert strict-equal? -2147418111 subtract 65536 2147483647
		--assert strict-equal? -2147418111 i - j
		--assert strict-equal? -2147418111 subtract i j

	--test-- "65536 - 256"
		i: 65536
		j: 256
		--assert strict-equal? 65280 65536 - 256
		--assert strict-equal? 65280 subtract 65536 256
		--assert strict-equal? 65280 i - j
		--assert strict-equal? 65280 subtract i j

	--test-- "65536 - 16777216"
		i: 65536
		j: 16777216
		--assert strict-equal? -16711680 65536 - 16777216
		--assert strict-equal? -16711680 subtract 65536 16777216
		--assert strict-equal? -16711680 i - j
		--assert strict-equal? -16711680 subtract i j

	--test-- "256 - 0"
		i: 256
		j: 0
		--assert strict-equal? 256 256 - 0
		--assert strict-equal? 256 subtract 256 0
		--assert strict-equal? 256 i - j
		--assert strict-equal? 256 subtract i j

	--test-- "256 - 1"
		i: 256
		j: 1
		--assert strict-equal? 255 256 - 1
		--assert strict-equal? 255 subtract 256 1
		--assert strict-equal? 255 i - j
		--assert strict-equal? 255 subtract i j

	--test-- "256 - -1"
		i: 256
		j: -1
		--assert strict-equal? 257 256 - -1
		--assert strict-equal? 257 subtract 256 -1
		--assert strict-equal? 257 i - j
		--assert strict-equal? 257 subtract i j

	--test-- "256 - -2147483648"
		i: 256
		j: -2147483648
		--assert error? try [256 - -2147483648]
		--assert error? try [subtract 256 -2147483648]
		--assert error? try [i - j]
		--assert error? try [subtract i j]

	--test-- "256 - 2147483647"
		i: 256
		j: 2147483647
		--assert strict-equal? -2147483391 256 - 2147483647
		--assert strict-equal? -2147483391 subtract 256 2147483647
		--assert strict-equal? -2147483391 i - j
		--assert strict-equal? -2147483391 subtract i j

	--test-- "256 - 65536"
		i: 256
		j: 65536
		--assert strict-equal? -65280 256 - 65536
		--assert strict-equal? -65280 subtract 256 65536
		--assert strict-equal? -65280 i - j
		--assert strict-equal? -65280 subtract i j

	--test-- "256 - 16777216"
		i: 256
		j: 16777216
		--assert strict-equal? -16776960 256 - 16777216
		--assert strict-equal? -16776960 subtract 256 16777216
		--assert strict-equal? -16776960 i - j
		--assert strict-equal? -16776960 subtract i j

	--test-- "16777216 - 0"
		i: 16777216
		j: 0
		--assert strict-equal? 16777216 16777216 - 0
		--assert strict-equal? 16777216 subtract 16777216 0
		--assert strict-equal? 16777216 i - j
		--assert strict-equal? 16777216 subtract i j

	--test-- "16777216 - 1"
		i: 16777216
		j: 1
		--assert strict-equal? 16777215 16777216 - 1
		--assert strict-equal? 16777215 subtract 16777216 1
		--assert strict-equal? 16777215 i - j
		--assert strict-equal? 16777215 subtract i j

	--test-- "16777216 - -1"
		i: 16777216
		j: -1
		--assert strict-equal? 16777217 16777216 - -1
		--assert strict-equal? 16777217 subtract 16777216 -1
		--assert strict-equal? 16777217 i - j
		--assert strict-equal? 16777217 subtract i j

	--test-- "16777216 - -2147483648"
		i: 16777216
		j: -2147483648
		--assert error? try [16777216 - -2147483648]
		--assert error? try [subtract 16777216 -2147483648]
		--assert error? try [i - j]
		--assert error? try [subtract i j]

	--test-- "16777216 - 2147483647"
		i: 16777216
		j: 2147483647
		--assert strict-equal? -2130706431 16777216 - 2147483647
		--assert strict-equal? -2130706431 subtract 16777216 2147483647
		--assert strict-equal? -2130706431 i - j
		--assert strict-equal? -2130706431 subtract i j

	--test-- "16777216 - 65536"
		i: 16777216
		j: 65536
		--assert strict-equal? 16711680 16777216 - 65536
		--assert strict-equal? 16711680 subtract 16777216 65536
		--assert strict-equal? 16711680 i - j
		--assert strict-equal? 16711680 subtract i j

	--test-- "16777216 - 256"
		i: 16777216
		j: 256
		--assert strict-equal? 16776960 16777216 - 256
		--assert strict-equal? 16776960 subtract 16777216 256
		--assert strict-equal? 16776960 i - j
		--assert strict-equal? 16776960 subtract i j

===end-group===

===start-group=== "multiply"
	--test-- "0 * 1"
		i: 0
		j: 1
		--assert strict-equal? 0 0 * 1
		--assert strict-equal? 0 multiply 0 1
		--assert strict-equal? 0 i * j
		--assert strict-equal? 0 multiply i j

	--test-- "0 * -1"
		i: 0
		j: -1
		--assert strict-equal? 0 0 * -1
		--assert strict-equal? 0 multiply 0 -1
		--assert strict-equal? 0 i * j
		--assert strict-equal? 0 multiply i j

	--test-- "0 * -2147483648"
		i: 0
		j: -2147483648
		--assert strict-equal? 0 0 * -2147483648
		--assert strict-equal? 0 multiply 0 -2147483648
		--assert strict-equal? 0 i * j
		--assert strict-equal? 0 multiply i j

	--test-- "0 * 2147483647"
		i: 0
		j: 2147483647
		--assert strict-equal? 0 0 * 2147483647
		--assert strict-equal? 0 multiply 0 2147483647
		--assert strict-equal? 0 i * j
		--assert strict-equal? 0 multiply i j

	--test-- "0 * 65536"
		i: 0
		j: 65536
		--assert strict-equal? 0 0 * 65536
		--assert strict-equal? 0 multiply 0 65536
		--assert strict-equal? 0 i * j
		--assert strict-equal? 0 multiply i j

	--test-- "0 * 256"
		i: 0
		j: 256
		--assert strict-equal? 0 0 * 256
		--assert strict-equal? 0 multiply 0 256
		--assert strict-equal? 0 i * j
		--assert strict-equal? 0 multiply i j

	--test-- "0 * 16777216"
		i: 0
		j: 16777216
		--assert strict-equal? 0 0 * 16777216
		--assert strict-equal? 0 multiply 0 16777216
		--assert strict-equal? 0 i * j
		--assert strict-equal? 0 multiply i j

	--test-- "1 * -1"
		i: 1
		j: -1
		--assert strict-equal? -1 1 * -1
		--assert strict-equal? -1 multiply 1 -1
		--assert strict-equal? -1 i * j
		--assert strict-equal? -1 multiply i j

	--test-- "1 * -2147483648"
		i: 1
		j: -2147483648
		--assert strict-equal? -2147483648 1 * -2147483648
		--assert strict-equal? -2147483648 multiply 1 -2147483648
		--assert strict-equal? -2147483648 i * j
		--assert strict-equal? -2147483648 multiply i j

	--test-- "1 * 2147483647"
		i: 1
		j: 2147483647
		--assert strict-equal? 2147483647 1 * 2147483647
		--assert strict-equal? 2147483647 multiply 1 2147483647
		--assert strict-equal? 2147483647 i * j
		--assert strict-equal? 2147483647 multiply i j

	--test-- "1 * 65536"
		i: 1
		j: 65536
		--assert strict-equal? 65536 1 * 65536
		--assert strict-equal? 65536 multiply 1 65536
		--assert strict-equal? 65536 i * j
		--assert strict-equal? 65536 multiply i j

	--test-- "1 * 256"
		i: 1
		j: 256
		--assert strict-equal? 256 1 * 256
		--assert strict-equal? 256 multiply 1 256
		--assert strict-equal? 256 i * j
		--assert strict-equal? 256 multiply i j

	--test-- "1 * 16777216"
		i: 1
		j: 16777216
		--assert strict-equal? 16777216 1 * 16777216
		--assert strict-equal? 16777216 multiply 1 16777216
		--assert strict-equal? 16777216 i * j
		--assert strict-equal? 16777216 multiply i j

	--test-- "-1 * -2147483648"
		i: -1
		j: -2147483648
		--assert error? try [-1 * -2147483648]
		--assert error? try [multiply -1 -2147483648]
		--assert error? try [i * j]
		--assert error? try [multiply i j]

	--test-- "-1 * 2147483647"
		i: -1
		j: 2147483647
		--assert strict-equal? -2147483647 -1 * 2147483647
		--assert strict-equal? -2147483647 multiply -1 2147483647
		--assert strict-equal? -2147483647 i * j
		--assert strict-equal? -2147483647 multiply i j

	--test-- "-1 * 65536"
		i: -1
		j: 65536
		--assert strict-equal? -65536 -1 * 65536
		--assert strict-equal? -65536 multiply -1 65536
		--assert strict-equal? -65536 i * j
		--assert strict-equal? -65536 multiply i j

	--test-- "-1 * 256"
		i: -1
		j: 256
		--assert strict-equal? -256 -1 * 256
		--assert strict-equal? -256 multiply -1 256
		--assert strict-equal? -256 i * j
		--assert strict-equal? -256 multiply i j

	--test-- "-1 * 16777216"
		i: -1
		j: 16777216
		--assert strict-equal? -16777216 -1 * 16777216
		--assert strict-equal? -16777216 multiply -1 16777216
		--assert strict-equal? -16777216 i * j
		--assert strict-equal? -16777216 multiply i j

	--test-- "-2147483648 * 2147483647"
		i: -2147483648
		j: 2147483647
		--assert error? try [-2147483648 * 2147483647]
		--assert error? try [multiply -2147483648 2147483647]
		--assert error? try [i * j]
		--assert error? try [multiply i j]

	--test-- "-2147483648 * 65536"
		i: -2147483648
		j: 65536
		--assert error? try [-2147483648 * 65536]
		--assert error? try [multiply -2147483648 65536]
		--assert error? try [i * j]
		--assert error? try [multiply i j]

	--test-- "-2147483648 * 256"
		i: -2147483648
		j: 256
		--assert error? try [-2147483648 * 256]
		--assert error? try [multiply -2147483648 256]
		--assert error? try [i * j]
		--assert error? try [multiply i j]

	--test-- "-2147483648 * 16777216"
		i: -2147483648
		j: 16777216
		--assert error? try [-2147483648 * 16777216]
		--assert error? try [multiply -2147483648 16777216]
		--assert error? try [i * j]
		--assert error? try [multiply i j]

	--test-- "2147483647 * 65536"
		i: 2147483647
		j: 65536
		--assert error? try [2147483647 * 65536]
		--assert error? try [multiply 2147483647 65536]
		--assert error? try [i * j]
		--assert error? try [multiply i j]

	--test-- "2147483647 * 256"
		i: 2147483647
		j: 256
		--assert error? try [2147483647 * 256]
		--assert error? try [multiply 2147483647 256]
		--assert error? try [i * j]
		--assert error? try [multiply i j]

	--test-- "2147483647 * 16777216"
		i: 2147483647
		j: 16777216
		--assert error? try [2147483647 * 16777216]
		--assert error? try [multiply 2147483647 16777216]
		--assert error? try [i * j]
		--assert error? try [multiply i j]

	--test-- "65536 * 256"
		i: 65536
		j: 256
		--assert strict-equal? 16777216 65536 * 256
		--assert strict-equal? 16777216 multiply 65536 256
		--assert strict-equal? 16777216 i * j
		--assert strict-equal? 16777216 multiply i j

	--test-- "65536 * 16777216"
		i: 65536
		j: 16777216
		--assert error? try [65536 * 16777216]
		--assert error? try [multiply 65536 16777216]
		--assert error? try [i * j]
		--assert error? try [multiply i j]

	--test-- "256 * 16777216"
		i: 256
		j: 16777216
		--assert error? try [256 * 16777216]
		--assert error? try [multiply 256 16777216]
		--assert error? try [i * j]
		--assert error? try [multiply i j]

===end-group===

===start-group=== "divide"

		--test-- "0 / 1"
		i: 0
		j: 1
		--assert strict-equal? 0 0 / 1
		--assert strict-equal? 0 divide 0 1
		--assert strict-equal? 0 i / j
		--assert strict-equal? 0 divide i j

	--test-- "0 / -1"
		i: 0
		j: -1
		--assert strict-equal? 0 0 / -1
		--assert strict-equal? 0 divide 0 -1
		--assert strict-equal? 0 i / j
		--assert strict-equal? 0 divide i j

	--test-- "0 / -2147483648"
		i: 0
		j: -2147483648
		--assert strict-equal? 0 0 / -2147483648
		--assert strict-equal? 0 divide 0 -2147483648
		--assert strict-equal? 0 i / j
		--assert strict-equal? 0 divide i j

	--test-- "0 / 2147483647"
		i: 0
		j: 2147483647
		--assert strict-equal? 0 0 / 2147483647
		--assert strict-equal? 0 divide 0 2147483647
		--assert strict-equal? 0 i / j
		--assert strict-equal? 0 divide i j

	--test-- "0 / 65536"
		i: 0
		j: 65536
		--assert strict-equal? 0 0 / 65536
		--assert strict-equal? 0 divide 0 65536
		--assert strict-equal? 0 i / j
		--assert strict-equal? 0 divide i j

	--test-- "0 / 256"
		i: 0
		j: 256
		--assert strict-equal? 0 0 / 256
		--assert strict-equal? 0 divide 0 256
		--assert strict-equal? 0 i / j
		--assert strict-equal? 0 divide i j

	--test-- "0 / 16777216"
		i: 0
		j: 16777216
		--assert strict-equal? 0 0 / 16777216
		--assert strict-equal? 0 divide 0 16777216
		--assert strict-equal? 0 i / j
		--assert strict-equal? 0 divide i j

	--test-- "1 / 0"
		i: 1
		j: 0
		--assert error? try [1 / 0]
		--assert error? try [divide 1 0]
		--assert error? try [i / j]
		--assert error? try [divide i j]

	--test-- "1 / -1"
		i: 1
		j: -1
		--assert strict-equal? -1 1 / -1
		--assert strict-equal? -1 divide 1 -1
		--assert strict-equal? -1 i / j
		--assert strict-equal? -1 divide i j

	--test-- "1 / -2147483648"
		i: 1
		j: -2147483648
		--assert strict-equal? 0 1 / -2147483648
		--assert strict-equal? 0 divide 1 -2147483648
		--assert strict-equal? 0 i / j
		--assert strict-equal? 0 divide i j

	--test-- "1 / 2147483647"
		i: 1
		j: 2147483647
		--assert strict-equal? 0 1 / 2147483647
		--assert strict-equal? 0 divide 1 2147483647
		--assert strict-equal? 0 i / j
		--assert strict-equal? 0 divide i j

	--test-- "1 / 65536"
		i: 1
		j: 65536
		--assert strict-equal? 0 1 / 65536
		--assert strict-equal? 0 divide 1 65536
		--assert strict-equal? 0 i / j
		--assert strict-equal? 0 divide i j

	--test-- "1 / 256"
		i: 1
		j: 256
		--assert strict-equal? 0 1 / 256
		--assert strict-equal? 0 divide 1 256
		--assert strict-equal? 0 i / j
		--assert strict-equal? 0 divide i j

	--test-- "1 / 16777216"
		i: 1
		j: 16777216
		--assert strict-equal? 0 1 / 16777216
		--assert strict-equal? 0 divide 1 16777216
		--assert strict-equal? 0 i / j
		--assert strict-equal? 0 divide i j

	--test-- "-1 / 0"
		i: -1
		j: 0
		--assert error? try [-1 / 0]
		--assert error? try [divide -1 0]
		--assert error? try [i / j]
		--assert error? try [divide i j]

	--test-- "-1 / 1"
		i: -1
		j: 1
		--assert strict-equal? -1 -1 / 1
		--assert strict-equal? -1 divide -1 1
		--assert strict-equal? -1 i / j
		--assert strict-equal? -1 divide i j

	--test-- "-1 / -2147483648"
		i: -1
		j: -2147483648
		--assert strict-equal? 0 -1 / -2147483648
		--assert strict-equal? 0 divide -1 -2147483648
		--assert strict-equal? 0 i / j
		--assert strict-equal? 0 divide i j

	--test-- "-1 / 2147483647"
		i: -1
		j: 2147483647
		--assert strict-equal? 0 -1 / 2147483647
		--assert strict-equal? 0 divide -1 2147483647
		--assert strict-equal? 0 i / j
		--assert strict-equal? 0 divide i j

	--test-- "-1 / 65536"
		i: -1
		j: 65536
		--assert strict-equal? 0 -1 / 65536
		--assert strict-equal? 0 divide -1 65536
		--assert strict-equal? 0 i / j
		--assert strict-equal? 0 divide i j

	--test-- "-1 / 256"
		i: -1
		j: 256
		--assert strict-equal? 0 -1 / 256
		--assert strict-equal? 0 divide -1 256
		--assert strict-equal? 0 i / j
		--assert strict-equal? 0 divide i j

	--test-- "-1 / 16777216"
		i: -1
		j: 16777216
		--assert strict-equal? 0 -1 / 16777216
		--assert strict-equal? 0 divide -1 16777216
		--assert strict-equal? 0 i / j
		--assert strict-equal? 0 divide i j

	--test-- "-2147483648 / 0"
		i: -2147483648
		j: 0
		--assert error? try [-2147483648 / 0]
		--assert error? try [divide -2147483648 0]
		--assert error? try [i / j]
		--assert error? try [divide i j]

	--test-- "-2147483648 / 1"
		i: -2147483648
		j: 1
		--assert strict-equal? -2147483648 -2147483648 / 1
		--assert strict-equal? -2147483648 divide -2147483648 1
		--assert strict-equal? -2147483648 i / j
		--assert strict-equal? -2147483648 divide i j

	--test-- "-2147483648 / -1"
		i: -2147483648
		j: -1
		--assert error? try [-2147483648 / -1]
		--assert error? try [divide -2147483648 -1]
		--assert error? try [i / j]
		--assert error? try [divide i j]

	--test-- "-2147483648 / 2147483647"
		i: -2147483648
		j: 2147483647
		--assert strict-equal? -1 -2147483648 / 2147483647
		--assert strict-equal? -1 divide -2147483648 2147483647
		--assert strict-equal? -1 i / j
		--assert strict-equal? -1 divide i j

	--test-- "-2147483648 / 65536"
		i: -2147483648
		j: 65536
		--assert strict-equal? -32768 -2147483648 / 65536
		--assert strict-equal? -32768 divide -2147483648 65536
		--assert strict-equal? -32768 i / j
		--assert strict-equal? -32768 divide i j

	--test-- "-2147483648 / 256"
		i: -2147483648
		j: 256
		--assert strict-equal? -8388608 -2147483648 / 256
		--assert strict-equal? -8388608 divide -2147483648 256
		--assert strict-equal? -8388608 i / j
		--assert strict-equal? -8388608 divide i j

	--test-- "-2147483648 / 16777216"
		i: -2147483648
		j: 16777216
		--assert strict-equal? -128 -2147483648 / 16777216
		--assert strict-equal? -128 divide -2147483648 16777216
		--assert strict-equal? -128 i / j
		--assert strict-equal? -128 divide i j

	--test-- "2147483647 / 0"
		i: 2147483647
		j: 0
		--assert error? try [2147483647 / 0]
		--assert error? try [divide 2147483647 0]
		--assert error? try [i / j]
		--assert error? try [divide i j]

	--test-- "2147483647 / 1"
		i: 2147483647
		j: 1
		--assert strict-equal? 2147483647 2147483647 / 1
		--assert strict-equal? 2147483647 divide 2147483647 1
		--assert strict-equal? 2147483647 i / j
		--assert strict-equal? 2147483647 divide i j

	--test-- "2147483647 / -1"
		i: 2147483647
		j: -1
		--assert strict-equal? -2147483647 2147483647 / -1
		--assert strict-equal? -2147483647 divide 2147483647 -1
		--assert strict-equal? -2147483647 i / j
		--assert strict-equal? -2147483647 divide i j

	--test-- "2147483647 / -2147483648"
		i: 2147483647
		j: -2147483648
		--assert strict-equal? 0 2147483647 / -2147483648
		--assert strict-equal? 0 divide 2147483647 -2147483648
		--assert strict-equal? 0 i / j
		--assert strict-equal? 0 divide i j

	--test-- "2147483647 / 65536"
		i: 2147483647
		j: 65536
		--assert strict-equal? 32767 2147483647 / 65536
		--assert strict-equal? 32767 divide 2147483647 65536
		--assert strict-equal? 32767 i / j
		--assert strict-equal? 32767 divide i j

	--test-- "2147483647 / 256"
		i: 2147483647
		j: 256
		--assert strict-equal? 8388607 2147483647 / 256
		--assert strict-equal? 8388607 divide 2147483647 256
		--assert strict-equal? 8388607 i / j
		--assert strict-equal? 8388607 divide i j

	--test-- "2147483647 / 16777216"
		i: 2147483647
		j: 16777216
		--assert strict-equal? 127 2147483647 / 16777216
		--assert strict-equal? 127 divide 2147483647 16777216
		--assert strict-equal? 127 i / j
		--assert strict-equal? 127 divide i j

	--test-- "65536 / 0"
		i: 65536
		j: 0
		--assert error? try [65536 / 0]
		--assert error? try [divide 65536 0]
		--assert error? try [i / j]
		--assert error? try [divide i j]

	--test-- "65536 / 1"
		i: 65536
		j: 1
		--assert strict-equal? 65536 65536 / 1
		--assert strict-equal? 65536 divide 65536 1
		--assert strict-equal? 65536 i / j
		--assert strict-equal? 65536 divide i j

	--test-- "65536 / -1"
		i: 65536
		j: -1
		--assert strict-equal? -65536 65536 / -1
		--assert strict-equal? -65536 divide 65536 -1
		--assert strict-equal? -65536 i / j
		--assert strict-equal? -65536 divide i j

	--test-- "65536 / -2147483648"
		i: 65536
		j: -2147483648
		--assert strict-equal? 0 65536 / -2147483648
		--assert strict-equal? 0 divide 65536 -2147483648
		--assert strict-equal? 0 i / j
		--assert strict-equal? 0 divide i j

	--test-- "65536 / 2147483647"
		i: 65536
		j: 2147483647
		--assert strict-equal? 0 65536 / 2147483647
		--assert strict-equal? 0 divide 65536 2147483647
		--assert strict-equal? 0 i / j
		--assert strict-equal? 0 divide i j

	--test-- "65536 / 256"
		i: 65536
		j: 256
		--assert strict-equal? 256 65536 / 256
		--assert strict-equal? 256 divide 65536 256
		--assert strict-equal? 256 i / j
		--assert strict-equal? 256 divide i j

	--test-- "65536 / 16777216"
		i: 65536
		j: 16777216
		--assert strict-equal? 0 65536 / 16777216
		--assert strict-equal? 0 divide 65536 16777216
		--assert strict-equal? 0 i / j
		--assert strict-equal? 0 divide i j

	--test-- "256 / 0"
		i: 256
		j: 0
		--assert error? try [256 / 0]
		--assert error? try [divide 256 0]
		--assert error? try [i / j]
		--assert error? try [divide i j]

	--test-- "256 / 1"
		i: 256
		j: 1
		--assert strict-equal? 256 256 / 1
		--assert strict-equal? 256 divide 256 1
		--assert strict-equal? 256 i / j
		--assert strict-equal? 256 divide i j

	--test-- "256 / -1"
		i: 256
		j: -1
		--assert strict-equal? -256 256 / -1
		--assert strict-equal? -256 divide 256 -1
		--assert strict-equal? -256 i / j
		--assert strict-equal? -256 divide i j

	--test-- "256 / -2147483648"
		i: 256
		j: -2147483648
		--assert strict-equal? 0 256 / -2147483648
		--assert strict-equal? 0 divide 256 -2147483648
		--assert strict-equal? 0 i / j
		--assert strict-equal? 0 divide i j

	--test-- "256 / 2147483647"
		i: 256
		j: 2147483647
		--assert strict-equal? 0 256 / 2147483647
		--assert strict-equal? 0 divide 256 2147483647
		--assert strict-equal? 0 i / j
		--assert strict-equal? 0 divide i j

	--test-- "256 / 65536"
		i: 256
		j: 65536
		--assert strict-equal? 0 256 / 65536
		--assert strict-equal? 0 divide 256 65536
		--assert strict-equal? 0 i / j
		--assert strict-equal? 0 divide i j

	--test-- "256 / 16777216"
		i: 256
		j: 16777216
		--assert strict-equal? 0 256 / 16777216
		--assert strict-equal? 0 divide 256 16777216
		--assert strict-equal? 0 i / j
		--assert strict-equal? 0 divide i j

	--test-- "16777216 / 0"
		i: 16777216
		j: 0
		--assert error? try [16777216 / 0]
		--assert error? try [divide 16777216 0]
		--assert error? try [i / j]
		--assert error? try [divide i j]

	--test-- "16777216 / 1"
		i: 16777216
		j: 1
		--assert strict-equal? 16777216 16777216 / 1
		--assert strict-equal? 16777216 divide 16777216 1
		--assert strict-equal? 16777216 i / j
		--assert strict-equal? 16777216 divide i j

	--test-- "16777216 / -1"
		i: 16777216
		j: -1
		--assert strict-equal? -16777216 16777216 / -1
		--assert strict-equal? -16777216 divide 16777216 -1
		--assert strict-equal? -16777216 i / j
		--assert strict-equal? -16777216 divide i j

	--test-- "16777216 / -2147483648"
		i: 16777216
		j: -2147483648
		--assert strict-equal? 0 16777216 / -2147483648
		--assert strict-equal? 0 divide 16777216 -2147483648
		--assert strict-equal? 0 i / j
		--assert strict-equal? 0 divide i j

	--test-- "16777216 / 2147483647"
		i: 16777216
		j: 2147483647
		--assert strict-equal? 0 16777216 / 2147483647
		--assert strict-equal? 0 divide 16777216 2147483647
		--assert strict-equal? 0 i / j
		--assert strict-equal? 0 divide i j

	--test-- "16777216 / 65536"
		i: 16777216
		j: 65536
		--assert strict-equal? 256 16777216 / 65536
		--assert strict-equal? 256 divide 16777216 65536
		--assert strict-equal? 256 i / j
		--assert strict-equal? 256 divide i j

	--test-- "16777216 / 256"
		i: 16777216
		j: 256
		--assert strict-equal? 65536 16777216 / 256
		--assert strict-equal? 65536 divide 16777216 256
		--assert strict-equal? 65536 i / j
		--assert strict-equal? 65536 divide i j
		
===end-group===

===start-group=== "remainder"

	--test-- "0 % 1"
		i: 0
		j: 1
		--assert strict-equal? 0 0 % 1
		--assert strict-equal? 0 remainder 0 1
		--assert strict-equal? 0 i % j
		--assert strict-equal? 0 remainder i j

	--test-- "0 % -1"
		i: 0
		j: -1
		--assert strict-equal? 0 0 % -1
		--assert strict-equal? 0 remainder 0 -1
		--assert strict-equal? 0 i % j
		--assert strict-equal? 0 remainder i j

	--test-- "0 % -2147483648"
		i: 0
		j: -2147483648
		--assert strict-equal? 0 0 % -2147483648
		--assert strict-equal? 0 remainder 0 -2147483648
		--assert strict-equal? 0 i % j
		--assert strict-equal? 0 remainder i j

	--test-- "0 % 2147483647"
		i: 0
		j: 2147483647
		--assert strict-equal? 0 0 % 2147483647
		--assert strict-equal? 0 remainder 0 2147483647
		--assert strict-equal? 0 i % j
		--assert strict-equal? 0 remainder i j

	--test-- "0 % -7"
		i: 0
		j: -7
		--assert strict-equal? 0 0 % -7
		--assert strict-equal? 0 remainder 0 -7
		--assert strict-equal? 0 i % j
		--assert strict-equal? 0 remainder i j

	--test-- "0 % -8"
		i: 0
		j: -8
		--assert strict-equal? 0 0 % -8
		--assert strict-equal? 0 remainder 0 -8
		--assert strict-equal? 0 i % j
		--assert strict-equal? 0 remainder i j

	--test-- "0 % -10"
		i: 0
		j: -10
		--assert strict-equal? 0 0 % -10
		--assert strict-equal? 0 remainder 0 -10
		--assert strict-equal? 0 i % j
		--assert strict-equal? 0 remainder i j
	
	--test-- "1 % 0"
		i: 1
		j: 0
		--assert error? try [1 % 0]
		--assert error? try [remainder 1 0]
		--assert error? try [i % j]
		--assert error? try [remainder i j]

	--test-- "1 % -1"
		i: 1
		j: -1
		--assert strict-equal? 0 1 % -1
		--assert strict-equal? 0 remainder 1 -1
		--assert strict-equal? 0 i % j
		--assert strict-equal? 0 remainder i j

	--test-- "1 % -2147483648"
		i: 1
		j: -2147483648
		--assert strict-equal? 1 1 % -2147483648
		--assert strict-equal? 1 remainder 1 -2147483648
		--assert strict-equal? 1 i % j
		--assert strict-equal? 1 remainder i j

	--test-- "1 % 2147483647"
		i: 1
		j: 2147483647
		--assert strict-equal? 1 1 % 2147483647
		--assert strict-equal? 1 remainder 1 2147483647
		--assert strict-equal? 1 i % j
		--assert strict-equal? 1 remainder i j

	--test-- "1 % -7"
		i: 1
		j: -7
		--assert strict-equal? 1 1 % -7
		--assert strict-equal? 1 remainder 1 -7
		--assert strict-equal? 1 i % j
		--assert strict-equal? 1 remainder i j

	--test-- "1 % -8"
		i: 1
		j: -8
		--assert strict-equal? 1 1 % -8
		--assert strict-equal? 1 remainder 1 -8
		--assert strict-equal? 1 i % j
		--assert strict-equal? 1 remainder i j

	--test-- "1 % -10"
		i: 1
		j: -10
		--assert strict-equal? 1 1 % -10
		--assert strict-equal? 1 remainder 1 -10
		--assert strict-equal? 1 i % j
		--assert strict-equal? 1 remainder i j

	--test-- "-1 % 0"
		i: -1
		j: 0
		--assert error? try [-1 % 0]
		--assert error? try [remainder -1 0]
		--assert error? try [i % j]
		--assert error? try [remainder i j]

	--test-- "-1 % 1"
		i: -1
		j: 1
		--assert strict-equal? 0 -1 % 1
		--assert strict-equal? 0 remainder -1 1
		--assert strict-equal? 0 i % j
		--assert strict-equal? 0 remainder i j

	--test-- "-1 % -2147483648"
		i: -1
		j: -2147483648
		--assert strict-equal? -1 -1 % -2147483648
		--assert strict-equal? -1 remainder -1 -2147483648
		--assert strict-equal? -1 i % j
		--assert strict-equal? -1 remainder i j

	--test-- "-1 % 2147483647"
		i: -1
		j: 2147483647
		--assert strict-equal? -1 -1 % 2147483647
		--assert strict-equal? -1 remainder -1 2147483647
		--assert strict-equal? -1 i % j
		--assert strict-equal? -1 remainder i j

	--test-- "-1 % -7"
		i: -1
		j: -7
		--assert strict-equal? -1 -1 % -7
		--assert strict-equal? -1 remainder -1 -7
		--assert strict-equal? -1 i % j
		--assert strict-equal? -1 remainder i j

	--test-- "-1 % -8"
		i: -1
		j: -8
		--assert strict-equal? -1 -1 % -8
		--assert strict-equal? -1 remainder -1 -8
		--assert strict-equal? -1 i % j
		--assert strict-equal? -1 remainder i j

	--test-- "-1 % -10"
		i: -1
		j: -10
		--assert strict-equal? -1 -1 % -10
		--assert strict-equal? -1 remainder -1 -10
		--assert strict-equal? -1 i % j
		--assert strict-equal? -1 remainder i j

	--test-- "-2147483648 % 0"
		i: -2147483648
		j: 0
		--assert error? try [-2147483648 % 0]
		--assert error? try [remainder -2147483648 0]
		--assert error? try [i % j]
		--assert error? try [remainder i j]

	--test-- "-2147483648 % 1"
		i: -2147483648
		j: 1
		--assert strict-equal? 0 -2147483648 % 1
		--assert strict-equal? 0 remainder -2147483648 1
		--assert strict-equal? 0 i % j
		--assert strict-equal? 0 remainder i j

	--test-- "-2147483648 % -1"
		i: -2147483648
		j: -1
		;--assert error? try [-2147483648 % -1]
		;--assert error? try [remainder -2147483648 -1]
		;--assert error? try [i % j]
		;--assert error? try [remainder i j]

	--test-- "-2147483648 % 2147483647"
		i: -2147483648
		j: 2147483647
		--assert strict-equal? -1 -2147483648 % 2147483647
		--assert strict-equal? -1 remainder -2147483648 2147483647
		--assert strict-equal? -1 i % j
		--assert strict-equal? -1 remainder i j

	--test-- "-2147483648 % -7"
		i: -2147483648
		j: -7
		--assert strict-equal? -2 -2147483648 % -7
		--assert strict-equal? -2 remainder -2147483648 -7
		--assert strict-equal? -2 i % j
		--assert strict-equal? -2 remainder i j

	--test-- "-2147483648 % -8"
		i: -2147483648
		j: -8
		--assert strict-equal? 0 -2147483648 % -8
		--assert strict-equal? 0 remainder -2147483648 -8
		--assert strict-equal? 0 i % j
		--assert strict-equal? 0 remainder i j

	--test-- "-2147483648 % -10"
		i: -2147483648
		j: -10
		--assert strict-equal? -8 -2147483648 % -10
		--assert strict-equal? -8 remainder -2147483648 -10
		--assert strict-equal? -8 i % j
		--assert strict-equal? -8 remainder i j

	--test-- "2147483647 % 0"
		i: 2147483647
		j: 0
		--assert error? try [2147483647 % 0]
		--assert error? try [remainder 2147483647 0]
		--assert error? try [i % j]
		--assert error? try [remainder i j]

	--test-- "2147483647 % 1"
		i: 2147483647
		j: 1
		--assert strict-equal? 0 2147483647 % 1
		--assert strict-equal? 0 remainder 2147483647 1
		--assert strict-equal? 0 i % j
		--assert strict-equal? 0 remainder i j

	--test-- "2147483647 % -1"
		i: 2147483647
		j: -1
		--assert strict-equal? 0 2147483647 % -1
		--assert strict-equal? 0 remainder 2147483647 -1
		--assert strict-equal? 0 i % j
		--assert strict-equal? 0 remainder i j

	--test-- "2147483647 % -2147483648"
		i: 2147483647
		j: -2147483648
		--assert strict-equal? 2147483647 2147483647 % -2147483648
		--assert strict-equal? 2147483647 remainder 2147483647 -2147483648
		--assert strict-equal? 2147483647 i % j
		--assert strict-equal? 2147483647 remainder i j

	--test-- "2147483647 % -7"
		i: 2147483647
		j: -7
		--assert strict-equal? 1 2147483647 % -7
		--assert strict-equal? 1 remainder 2147483647 -7
		--assert strict-equal? 1 i % j
		--assert strict-equal? 1 remainder i j

	--test-- "2147483647 % -8"
		i: 2147483647
		j: -8
		--assert strict-equal? 7 2147483647 % -8
		--assert strict-equal? 7 remainder 2147483647 -8
		--assert strict-equal? 7 i % j
		--assert strict-equal? 7 remainder i j

	--test-- "2147483647 % -10"
		i: 2147483647
		j: -10
		--assert strict-equal? 7 2147483647 % -10
		--assert strict-equal? 7 remainder 2147483647 -10
		--assert strict-equal? 7 i % j
		--assert strict-equal? 7 remainder i j

	--test-- "-7 % 0"
		i: -7
		j: 0
		--assert error? try [-7 % 0]
		--assert error? try [remainder -7 0]
		--assert error? try [i % j]
		--assert error? try [remainder i j]

	--test-- "-7 % 1"
		i: -7
		j: 1
		--assert strict-equal? 0 -7 % 1
		--assert strict-equal? 0 remainder -7 1
		--assert strict-equal? 0 i % j
		--assert strict-equal? 0 remainder i j

	--test-- "-7 % -1"
		i: -7
		j: -1
		--assert strict-equal? 0 -7 % -1
		--assert strict-equal? 0 remainder -7 -1
		--assert strict-equal? 0 i % j
		--assert strict-equal? 0 remainder i j

	--test-- "-7 % -2147483648"
		i: -7
		j: -2147483648
		--assert strict-equal? -7 -7 % -2147483648
		--assert strict-equal? -7 remainder -7 -2147483648
		--assert strict-equal? -7 i % j
		--assert strict-equal? -7 remainder i j

	--test-- "-7 % 2147483647"
		i: -7
		j: 2147483647
		--assert strict-equal? -7 -7 % 2147483647
		--assert strict-equal? -7 remainder -7 2147483647
		--assert strict-equal? -7 i % j
		--assert strict-equal? -7 remainder i j

	--test-- "-7 % -8"
		i: -7
		j: -8
		--assert strict-equal? -7 -7 % -8
		--assert strict-equal? -7 remainder -7 -8
		--assert strict-equal? -7 i % j
		--assert strict-equal? -7 remainder i j

	--test-- "-7 % -10"
		i: -7
		j: -10
		--assert strict-equal? -7 -7 % -10
		--assert strict-equal? -7 remainder -7 -10
		--assert strict-equal? -7 i % j
		--assert strict-equal? -7 remainder i j

	--test-- "-8 % 0"
		i: -8
		j: 0
		--assert error? try [-8 % 0]
		--assert error? try [remainder -8 0]
		--assert error? try [i % j]
		--assert error? try [remainder i j]

	--test-- "-8 % 1"
		i: -8
		j: 1
		--assert strict-equal? 0 -8 % 1
		--assert strict-equal? 0 remainder -8 1
		--assert strict-equal? 0 i % j
		--assert strict-equal? 0 remainder i j

	--test-- "-8 % -1"
		i: -8
		j: -1
		--assert strict-equal? 0 -8 % -1
		--assert strict-equal? 0 remainder -8 -1
		--assert strict-equal? 0 i % j
		--assert strict-equal? 0 remainder i j

	--test-- "-8 % -2147483648"
		i: -8
		j: -2147483648
		--assert strict-equal? -8 -8 % -2147483648
		--assert strict-equal? -8 remainder -8 -2147483648
		--assert strict-equal? -8 i % j
		--assert strict-equal? -8 remainder i j

	--test-- "-8 % 2147483647"
		i: -8
		j: 2147483647
		--assert strict-equal? -8 -8 % 2147483647
		--assert strict-equal? -8 remainder -8 2147483647
		--assert strict-equal? -8 i % j
		--assert strict-equal? -8 remainder i j

	--test-- "-8 % -7"
		i: -8
		j: -7
		--assert strict-equal? -1 -8 % -7
		--assert strict-equal? -1 remainder -8 -7
		--assert strict-equal? -1 i % j
		--assert strict-equal? -1 remainder i j

	--test-- "-8 % -10"
		i: -8
		j: -10
		--assert strict-equal? -8 -8 % -10
		--assert strict-equal? -8 remainder -8 -10
		--assert strict-equal? -8 i % j
		--assert strict-equal? -8 remainder i j

	--test-- "-10 % 0"
		i: -10
		j: 0
		--assert error? try [-10 % 0]
		--assert error? try [remainder -10 0]
		--assert error? try [i % j]
		--assert error? try [remainder i j]

	--test-- "-10 % 1"
		i: -10
		j: 1
		--assert strict-equal? 0 -10 % 1
		--assert strict-equal? 0 remainder -10 1
		--assert strict-equal? 0 i % j
		--assert strict-equal? 0 remainder i j

	--test-- "-10 % -1"
		i: -10
		j: -1
		--assert strict-equal? 0 -10 % -1
		--assert strict-equal? 0 remainder -10 -1
		--assert strict-equal? 0 i % j
		--assert strict-equal? 0 remainder i j

	--test-- "-10 % -2147483648"
		i: -10
		j: -2147483648
		--assert strict-equal? -10 -10 % -2147483648
		--assert strict-equal? -10 remainder -10 -2147483648
		--assert strict-equal? -10 i % j
		--assert strict-equal? -10 remainder i j

	--test-- "-10 % 2147483647"
		i: -10
		j: 2147483647
		--assert strict-equal? -10 -10 % 2147483647
		--assert strict-equal? -10 remainder -10 2147483647
		--assert strict-equal? -10 i % j
		--assert strict-equal? -10 remainder i j

	--test-- "-10 % -7"
		i: -10
		j: -7
		--assert strict-equal? -3 -10 % -7
		--assert strict-equal? -3 remainder -10 -7
		--assert strict-equal? -3 i % j
		--assert strict-equal? -3 remainder i j

	--test-- "-10 % -8"
		i: -10
		j: -8
		--assert strict-equal? -2 -10 % -8
		--assert strict-equal? -2 remainder -10 -8
		--assert strict-equal? -2 i % j
		--assert strict-equal? -2 remainder i j

===end-group===

===start-group=== "modulo"

	--test-- "0 // 1"
		i: 0
		j: 1
		--assert strict-equal? 0 0 // 1
		--assert strict-equal? 0 modulo 0 1
		--assert strict-equal? 0 i // j
		--assert strict-equal? 0 modulo i j

	--test-- "0 // -1"
		i: 0
		j: -1
		--assert strict-equal? 0 0 // -1
		--assert strict-equal? 0 modulo 0 -1
		--assert strict-equal? 0 i // j
		--assert strict-equal? 0 modulo i j

	--test-- "0 // -2147483648"
		i: 0
		j: -2147483648
		;--assert strict-equal? 0 0 // -2147483648
		;--assert strict-equal? 0 modulo 0 -2147483648
		;--assert strict-equal? 0 i // j
		;--assert strict-equal? 0 modulo i j

	--test-- "0 // 2147483647"
		i: 0
		j: 2147483647
		;--assert strict-equal? 0 0 // 2147483647
		;--assert strict-equal? 0 modulo 0 2147483647
		;--assert strict-equal? 0 i // j
		;--assert strict-equal? 0 modulo i j

	--test-- "0 // -7"
		i: 0
		j: -7
		--assert strict-equal? 0 0 // -7
		--assert strict-equal? 0 modulo 0 -7
		--assert strict-equal? 0 i // j
		--assert strict-equal? 0 modulo i j

	--test-- "0 // -8"
		i: 0
		j: -8
		--assert strict-equal? 0 0 // -8
		--assert strict-equal? 0 modulo 0 -8
		--assert strict-equal? 0 i // j
		--assert strict-equal? 0 modulo i j

	--test-- "0 // -10"
		i: 0
		j: -10
		--assert strict-equal? 0 0 // -10
		--assert strict-equal? 0 modulo 0 -10
		--assert strict-equal? 0 i // j
		--assert strict-equal? 0 modulo i j

	--test-- "1 // 0"
		i: 1
		j: 0
		--assert error? try [1 // 0]
		--assert error? try [modulo 1 0]
		--assert error? try [i // j]
		--assert error? try [modulo i j]

	--test-- "1 // -1"
		i: 1
		j: -1
		--assert strict-equal? 0 1 // -1
		--assert strict-equal? 0 modulo 1 -1
		--assert strict-equal? 0 i // j
		--assert strict-equal? 0 modulo i j

	--test-- "1 // -2147483648"
		i: 1
		j: -2147483648
		;--assert strict-equal? 1 1 // -2147483648
		;--assert strict-equal? 1 modulo 1 -2147483648
		;--assert strict-equal? 1 i // j
		;--assert strict-equal? 1 modulo i j

	--test-- "1 // 2147483647"
		i: 1
		j: 2147483647
		;--assert strict-equal? 1 1 // 2147483647
		;--assert strict-equal? 1 modulo 1 2147483647
		;--assert strict-equal? 1 i // j
		;--assert strict-equal? 1 modulo i j

	--test-- "1 // -7"
		i: 1
		j: -7
		--assert strict-equal? 1 1 // -7
		--assert strict-equal? 1 modulo 1 -7
		--assert strict-equal? 1 i // j
		--assert strict-equal? 1 modulo i j

	--test-- "1 // -8"
		i: 1
		j: -8
		--assert strict-equal? 1 1 // -8
		--assert strict-equal? 1 modulo 1 -8
		--assert strict-equal? 1 i // j
		--assert strict-equal? 1 modulo i j

	--test-- "1 // -10"
		i: 1
		j: -10
		--assert strict-equal? 1 1 // -10
		--assert strict-equal? 1 modulo 1 -10
		--assert strict-equal? 1 i // j
		--assert strict-equal? 1 modulo i j

	--test-- "-1 // 0"
		i: -1
		j: 0
		--assert error? try [-1 // 0]
		--assert error? try [modulo -1 0]
		--assert error? try [i // j]
		--assert error? try [modulo i j]

	--test-- "-1 // 1"
		i: -1
		j: 1
		--assert strict-equal? 0 -1 // 1
		--assert strict-equal? 0 modulo -1 1
		--assert strict-equal? 0 i // j
		--assert strict-equal? 0 modulo i j

	--test-- "-1 // -2147483648"
		i: -1
		j: -2147483648
		;--assert strict-equal? 2147483647 -1 // -2147483648
		;--assert strict-equal? 2147483647 modulo -1 -2147483648
		;--assert strict-equal? 2147483647 i // j
		;--assert strict-equal? 2147483647 modulo i j

	--test-- "-1 // 2147483647"
		i: -1
		j: 2147483647
		;--assert strict-equal? 2147483646 -1 // 2147483647
		;--assert strict-equal? 2147483646 modulo -1 2147483647
		;--assert strict-equal? 2147483646 i // j
		;--assert strict-equal? 2147483646 modulo i j

	--test-- "-1 // -7"
		i: -1
		j: -7
		--assert strict-equal? 6 -1 // -7
		--assert strict-equal? 6 modulo -1 -7
		--assert strict-equal? 6 i // j
		--assert strict-equal? 6 modulo i j

	--test-- "-1 // -8"
		i: -1
		j: -8
		--assert strict-equal? 7 -1 // -8
		--assert strict-equal? 7 modulo -1 -8
		--assert strict-equal? 7 i // j
		--assert strict-equal? 7 modulo i j

	--test-- "-1 // -10"
		i: -1
		j: -10
		--assert strict-equal? 9 -1 // -10
		--assert strict-equal? 9 modulo -1 -10
		--assert strict-equal? 9 i // j
		--assert strict-equal? 9 modulo i j

	--test-- "-2147483648 // 0"
		i: -2147483648
		j: 0
		--assert error? try [-2147483648 // 0]
		--assert error? try [modulo -2147483648 0]
		--assert error? try [i // j]
		--assert error? try [modulo i j]

	--test-- "-2147483648 // 1"
		i: -2147483648
		j: 1
		;--assert strict-equal? 0 -2147483648 // 1
		;--assert strict-equal? 0 modulo -2147483648 1
		;--assert strict-equal? 0 i // j
		;--assert strict-equal? 0 modulo i j

	--test-- "-2147483648 // -1"
		i: -2147483648
		j: -1
		--assert error? try [-2147483648 // -1]
		--assert error? try [modulo -2147483648 -1]
		--assert error? try [i // j]
		--assert error? try [modulo i j]

	--test-- "-2147483648 // 2147483647"
		i: -2147483648
		j: 2147483647
		;--assert strict-equal? 2147483646 -2147483648 // 2147483647
		;--assert strict-equal? 2147483646 modulo -2147483648 2147483647
		;--assert strict-equal? 2147483646 i // j
		;--assert strict-equal? 2147483646 modulo i j

	--test-- "-2147483648 // -7"
		i: -2147483648
		j: -7
		;--assert strict-equal? 5 -2147483648 // -7
		;--assert strict-equal? 5 modulo -2147483648 -7
		;--assert strict-equal? 5 i // j
		;--assert strict-equal? 5 modulo i j

	--test-- "-2147483648 // -8"
		i: -2147483648
		j: -8
		;--assert strict-equal? 0 -2147483648 // -8
		;--assert strict-equal? 0 modulo -2147483648 -8
		;--assert strict-equal? 0 i // j
		;--assert strict-equal? 0 modulo i j

	--test-- "-2147483648 // -10"
		i: -2147483648
		j: -10
		;--assert strict-equal? 2 -2147483648 // -10
		;--assert strict-equal? 2 modulo -2147483648 -10
		;--assert strict-equal? 2 i // j
		;--assert strict-equal? 2 modulo i j

	--test-- "2147483647 // 0"
		i: 2147483647
		j: 0
		--assert error? try [2147483647 // 0]
		--assert error? try [modulo 2147483647 0]
		--assert error? try [i // j]
		--assert error? try [modulo i j]

	--test-- "2147483647 // 1"
		i: 2147483647
		j: 1
		;--assert strict-equal? 0 2147483647 // 1
		;--assert strict-equal? 0 modulo 2147483647 1
		;--assert strict-equal? 0 i // j
		;--assert strict-equal? 0 modulo i j

	--test-- "2147483647 // -1"
		i: 2147483647
		j: -1
		;--assert strict-equal? 0 2147483647 // -1
		;--assert strict-equal? 0 modulo 2147483647 -1
		;--assert strict-equal? 0 i // j
		;--assert strict-equal? 0 modulo i j

	--test-- "2147483647 // -2147483648"
		i: 2147483647
		j: -2147483648
		;--assert strict-equal? 2147483647 2147483647 // -2147483648
		;--assert strict-equal? 2147483647 modulo 2147483647 -2147483648
		;--assert strict-equal? 2147483647 i // j
		;--assert strict-equal? 2147483647 modulo i j

	--test-- "2147483647 // -7"
		i: 2147483647
		j: -7
		;--assert strict-equal? 1 2147483647 // -7
		;--assert strict-equal? 1 modulo 2147483647 -7
		;--assert strict-equal? 1 i // j
		;--assert strict-equal? 1 modulo i j

	--test-- "2147483647 // -8"
		i: 2147483647
		j: -8
		;--assert strict-equal? 7 2147483647 // -8
		;--assert strict-equal? 7 modulo 2147483647 -8
		;--assert strict-equal? 7 i // j
		;--assert strict-equal? 7 modulo i j

	--test-- "2147483647 // -10"
		i: 2147483647
		j: -10
		;--assert strict-equal? 7 2147483647 // -10
		;--assert strict-equal? 7 modulo 2147483647 -10
		;--assert strict-equal? 7 i // j
		;--assert strict-equal? 7 modulo i j

	--test-- "-7 // 0"
		i: -7
		j: 0
		--assert error? try [-7 // 0]
		--assert error? try [modulo -7 0]
		--assert error? try [i // j]
		--assert error? try [modulo i j]

	--test-- "-7 // 1"
		i: -7
		j: 1
		--assert strict-equal? 0 -7 // 1
		--assert strict-equal? 0 modulo -7 1
		--assert strict-equal? 0 i // j
		--assert strict-equal? 0 modulo i j

	--test-- "-7 // -1"
		i: -7
		j: -1
		--assert strict-equal? 0 -7 // -1
		--assert strict-equal? 0 modulo -7 -1
		--assert strict-equal? 0 i // j
		--assert strict-equal? 0 modulo i j

	--test-- "-7 // -2147483648"
		i: -7
		j: -2147483648
		;--assert strict-equal? 2147483641 -7 // -2147483648
		;--assert strict-equal? 2147483641 modulo -7 -2147483648
		;--assert strict-equal? 2147483641 i // j
		;--assert strict-equal? 2147483641 modulo i j

	--test-- "-7 // 2147483647"
		i: -7
		j: 2147483647
		;--assert strict-equal? 2147483640 -7 // 2147483647
		;--assert strict-equal? 2147483640 modulo -7 2147483647
		;--assert strict-equal? 2147483640 i // j
		;--assert strict-equal? 2147483640 modulo i j

	--test-- "-7 // -8"
		i: -7
		j: -8
		--assert strict-equal? 1 -7 // -8
		--assert strict-equal? 1 modulo -7 -8
		--assert strict-equal? 1 i // j
		--assert strict-equal? 1 modulo i j

	--test-- "-7 // -10"
		i: -7
		j: -10
		--assert strict-equal? 3 -7 // -10
		--assert strict-equal? 3 modulo -7 -10
		--assert strict-equal? 3 i // j
		--assert strict-equal? 3 modulo i j

	--test-- "-8 // 0"
		i: -8
		j: 0
		--assert error? try [-8 // 0]
		--assert error? try [modulo -8 0]
		--assert error? try [i // j]
		--assert error? try [modulo i j]

	--test-- "-8 // 1"
		i: -8
		j: 1
		--assert strict-equal? 0 -8 // 1
		--assert strict-equal? 0 modulo -8 1
		--assert strict-equal? 0 i // j
		--assert strict-equal? 0 modulo i j

	--test-- "-8 // -1"
		i: -8
		j: -1
		--assert strict-equal? 0 -8 // -1
		--assert strict-equal? 0 modulo -8 -1
		--assert strict-equal? 0 i // j
		--assert strict-equal? 0 modulo i j

	--test-- "-8 // -2147483648"
		i: -8
		j: -2147483648
		;--assert strict-equal? 2147483640 -8 // -2147483648
		;--assert strict-equal? 2147483640 modulo -8 -2147483648
		;--assert strict-equal? 2147483640 i // j
		;--assert strict-equal? 2147483640 modulo i j

	--test-- "-8 // 2147483647"
		i: -8
		j: 2147483647
		;--assert strict-equal? 2147483639 -8 // 2147483647
		;--assert strict-equal? 2147483639 modulo -8 2147483647
		;--assert strict-equal? 2147483639 i // j
		;--assert strict-equal? 2147483639 modulo i j

	--test-- "-8 // -7"
		i: -8
		j: -7
		--assert strict-equal? 6 -8 // -7
		--assert strict-equal? 6 modulo -8 -7
		--assert strict-equal? 6 i // j
		--assert strict-equal? 6 modulo i j

	--test-- "-8 // -10"
		i: -8
		j: -10
		--assert strict-equal? 2 -8 // -10
		--assert strict-equal? 2 modulo -8 -10
		--assert strict-equal? 2 i // j
		--assert strict-equal? 2 modulo i j

	--test-- "-10 // 0"
		i: -10
		j: 0
		--assert error? try [-10 // 0]
		--assert error? try [modulo -10 0]
		--assert error? try [i // j]
		--assert error? try [modulo i j]

	--test-- "-10 // 1"
		i: -10
		j: 1
		--assert strict-equal? 0 -10 // 1
		--assert strict-equal? 0 modulo -10 1
		--assert strict-equal? 0 i // j
		--assert strict-equal? 0 modulo i j

	--test-- "-10 // -1"
		i: -10
		j: -1
		--assert strict-equal? 0 -10 // -1
		--assert strict-equal? 0 modulo -10 -1
		--assert strict-equal? 0 i // j
		--assert strict-equal? 0 modulo i j

	--test-- "-10 // -2147483648"
		i: -10
		j: -2147483648
		;--assert strict-equal? 2147483638 -10 // -2147483648
		;--assert strict-equal? 2147483638 modulo -10 -2147483648
		;--assert strict-equal? 2147483638 i // j
		;--assert strict-equal? 2147483638 modulo i j

	--test-- "-10 // 2147483647"
		i: -10
		j: 2147483647
		;--assert strict-equal? 2147483637 -10 // 2147483647
		;--assert strict-equal? 2147483637 modulo -10 2147483647
		;--assert strict-equal? 2147483637 i // j
		;--assert strict-equal? 2147483637 modulo i j

	--test-- "-10 // -7"
		i: -10
		j: -7
		--assert strict-equal? 4 -10 // -7
		--assert strict-equal? 4 modulo -10 -7
		--assert strict-equal? 4 i // j
		--assert strict-equal? 4 modulo i j

	--test-- "-10 // -8"
		i: -10
		j: -8
		--assert strict-equal? 6 -10 // -8
		--assert strict-equal? 6 modulo -10 -8
		--assert strict-equal? 6 i // j
		--assert strict-equal? 6 modulo i j

===end-group===

===start-group=== "integer or"

	--test-- "0 or 1"
		i: 0
		j: 1
		--assert strict-equal? 1 0 or 1
		--assert strict-equal? 1 or~ 0 1
		--assert strict-equal? 1 i or j
		--assert strict-equal? 1 or~ i j

	--test-- "0 or -1"
		i: 0
		j: -1
		--assert strict-equal? -1 0 or -1
		--assert strict-equal? -1 or~ 0 -1
		--assert strict-equal? -1 i or j
		--assert strict-equal? -1 or~ i j

	--test-- "0 or -2147483648"
		i: 0
		j: -2147483648
		--assert strict-equal? -2147483648 0 or -2147483648
		--assert strict-equal? -2147483648 or~ 0 -2147483648
		--assert strict-equal? -2147483648 i or j
		--assert strict-equal? -2147483648 or~ i j

	--test-- "0 or 2147483647"
		i: 0
		j: 2147483647
		--assert strict-equal? 2147483647 0 or 2147483647
		--assert strict-equal? 2147483647 or~ 0 2147483647
		--assert strict-equal? 2147483647 i or j
		--assert strict-equal? 2147483647 or~ i j

	--test-- "0 or -7"
		i: 0
		j: -7
		--assert strict-equal? -7 0 or -7
		--assert strict-equal? -7 or~ 0 -7
		--assert strict-equal? -7 i or j
		--assert strict-equal? -7 or~ i j

	--test-- "0 or -8"
		i: 0
		j: -8
		--assert strict-equal? -8 0 or -8
		--assert strict-equal? -8 or~ 0 -8
		--assert strict-equal? -8 i or j
		--assert strict-equal? -8 or~ i j

	--test-- "0 or -10"
		i: 0
		j: -10
		--assert strict-equal? -10 0 or -10
		--assert strict-equal? -10 or~ 0 -10
		--assert strict-equal? -10 i or j
		--assert strict-equal? -10 or~ i j

	--test-- "1 or 0"
		i: 1
		j: 0
		--assert strict-equal? 1 1 or 0
		--assert strict-equal? 1 or~ 1 0
		--assert strict-equal? 1 i or j
		--assert strict-equal? 1 or~ i j

	--test-- "1 or -1"
		i: 1
		j: -1
		--assert strict-equal? -1 1 or -1
		--assert strict-equal? -1 or~ 1 -1
		--assert strict-equal? -1 i or j
		--assert strict-equal? -1 or~ i j

	--test-- "1 or -2147483648"
		i: 1
		j: -2147483648
		--assert strict-equal? -2147483647 1 or -2147483648
		--assert strict-equal? -2147483647 or~ 1 -2147483648
		--assert strict-equal? -2147483647 i or j
		--assert strict-equal? -2147483647 or~ i j

	--test-- "1 or 2147483647"
		i: 1
		j: 2147483647
		--assert strict-equal? 2147483647 1 or 2147483647
		--assert strict-equal? 2147483647 or~ 1 2147483647
		--assert strict-equal? 2147483647 i or j
		--assert strict-equal? 2147483647 or~ i j

	--test-- "1 or -7"
		i: 1
		j: -7
		--assert strict-equal? -7 1 or -7
		--assert strict-equal? -7 or~ 1 -7
		--assert strict-equal? -7 i or j
		--assert strict-equal? -7 or~ i j

	--test-- "1 or -8"
		i: 1
		j: -8
		--assert strict-equal? -7 1 or -8
		--assert strict-equal? -7 or~ 1 -8
		--assert strict-equal? -7 i or j
		--assert strict-equal? -7 or~ i j

	--test-- "1 or -10"
		i: 1
		j: -10
		--assert strict-equal? -9 1 or -10
		--assert strict-equal? -9 or~ 1 -10
		--assert strict-equal? -9 i or j
		--assert strict-equal? -9 or~ i j

	--test-- "-1 or 0"
		i: -1
		j: 0
		--assert strict-equal? -1 -1 or 0
		--assert strict-equal? -1 or~ -1 0
		--assert strict-equal? -1 i or j
		--assert strict-equal? -1 or~ i j

	--test-- "-1 or 1"
		i: -1
		j: 1
		--assert strict-equal? -1 -1 or 1
		--assert strict-equal? -1 or~ -1 1
		--assert strict-equal? -1 i or j
		--assert strict-equal? -1 or~ i j

	--test-- "-1 or -2147483648"
		i: -1
		j: -2147483648
		--assert strict-equal? -1 -1 or -2147483648
		--assert strict-equal? -1 or~ -1 -2147483648
		--assert strict-equal? -1 i or j
		--assert strict-equal? -1 or~ i j

	--test-- "-1 or 2147483647"
		i: -1
		j: 2147483647
		--assert strict-equal? -1 -1 or 2147483647
		--assert strict-equal? -1 or~ -1 2147483647
		--assert strict-equal? -1 i or j
		--assert strict-equal? -1 or~ i j

	--test-- "-1 or -7"
		i: -1
		j: -7
		--assert strict-equal? -1 -1 or -7
		--assert strict-equal? -1 or~ -1 -7
		--assert strict-equal? -1 i or j
		--assert strict-equal? -1 or~ i j

	--test-- "-1 or -8"
		i: -1
		j: -8
		--assert strict-equal? -1 -1 or -8
		--assert strict-equal? -1 or~ -1 -8
		--assert strict-equal? -1 i or j
		--assert strict-equal? -1 or~ i j

	--test-- "-1 or -10"
		i: -1
		j: -10
		--assert strict-equal? -1 -1 or -10
		--assert strict-equal? -1 or~ -1 -10
		--assert strict-equal? -1 i or j
		--assert strict-equal? -1 or~ i j

	--test-- "-2147483648 or 0"
		i: -2147483648
		j: 0
		--assert strict-equal? -2147483648 -2147483648 or 0
		--assert strict-equal? -2147483648 or~ -2147483648 0
		--assert strict-equal? -2147483648 i or j
		--assert strict-equal? -2147483648 or~ i j

	--test-- "-2147483648 or 1"
		i: -2147483648
		j: 1
		--assert strict-equal? -2147483647 -2147483648 or 1
		--assert strict-equal? -2147483647 or~ -2147483648 1
		--assert strict-equal? -2147483647 i or j
		--assert strict-equal? -2147483647 or~ i j

	--test-- "-2147483648 or -1"
		i: -2147483648
		j: -1
		--assert strict-equal? -1 -2147483648 or -1
		--assert strict-equal? -1 or~ -2147483648 -1
		--assert strict-equal? -1 i or j
		--assert strict-equal? -1 or~ i j

	--test-- "-2147483648 or 2147483647"
		i: -2147483648
		j: 2147483647
		--assert strict-equal? -1 -2147483648 or 2147483647
		--assert strict-equal? -1 or~ -2147483648 2147483647
		--assert strict-equal? -1 i or j
		--assert strict-equal? -1 or~ i j

	--test-- "-2147483648 or -7"
		i: -2147483648
		j: -7
		--assert strict-equal? -7 -2147483648 or -7
		--assert strict-equal? -7 or~ -2147483648 -7
		--assert strict-equal? -7 i or j
		--assert strict-equal? -7 or~ i j

	--test-- "-2147483648 or -8"
		i: -2147483648
		j: -8
		--assert strict-equal? -8 -2147483648 or -8
		--assert strict-equal? -8 or~ -2147483648 -8
		--assert strict-equal? -8 i or j
		--assert strict-equal? -8 or~ i j

	--test-- "-2147483648 or -10"
		i: -2147483648
		j: -10
		--assert strict-equal? -10 -2147483648 or -10
		--assert strict-equal? -10 or~ -2147483648 -10
		--assert strict-equal? -10 i or j
		--assert strict-equal? -10 or~ i j

	--test-- "2147483647 or 0"
		i: 2147483647
		j: 0
		--assert strict-equal? 2147483647 2147483647 or 0
		--assert strict-equal? 2147483647 or~ 2147483647 0
		--assert strict-equal? 2147483647 i or j
		--assert strict-equal? 2147483647 or~ i j

	--test-- "2147483647 or 1"
		i: 2147483647
		j: 1
		--assert strict-equal? 2147483647 2147483647 or 1
		--assert strict-equal? 2147483647 or~ 2147483647 1
		--assert strict-equal? 2147483647 i or j
		--assert strict-equal? 2147483647 or~ i j

	--test-- "2147483647 or -1"
		i: 2147483647
		j: -1
		--assert strict-equal? -1 2147483647 or -1
		--assert strict-equal? -1 or~ 2147483647 -1
		--assert strict-equal? -1 i or j
		--assert strict-equal? -1 or~ i j

	--test-- "2147483647 or -2147483648"
		i: 2147483647
		j: -2147483648
		--assert strict-equal? -1 2147483647 or -2147483648
		--assert strict-equal? -1 or~ 2147483647 -2147483648
		--assert strict-equal? -1 i or j
		--assert strict-equal? -1 or~ i j

	--test-- "2147483647 or -7"
		i: 2147483647
		j: -7
		--assert strict-equal? -1 2147483647 or -7
		--assert strict-equal? -1 or~ 2147483647 -7
		--assert strict-equal? -1 i or j
		--assert strict-equal? -1 or~ i j

	--test-- "2147483647 or -8"
		i: 2147483647
		j: -8
		--assert strict-equal? -1 2147483647 or -8
		--assert strict-equal? -1 or~ 2147483647 -8
		--assert strict-equal? -1 i or j
		--assert strict-equal? -1 or~ i j

	--test-- "2147483647 or -10"
		i: 2147483647
		j: -10
		--assert strict-equal? -1 2147483647 or -10
		--assert strict-equal? -1 or~ 2147483647 -10
		--assert strict-equal? -1 i or j
		--assert strict-equal? -1 or~ i j

	--test-- "-7 or 0"
		i: -7
		j: 0
		--assert strict-equal? -7 -7 or 0
		--assert strict-equal? -7 or~ -7 0
		--assert strict-equal? -7 i or j
		--assert strict-equal? -7 or~ i j

	--test-- "-7 or 1"
		i: -7
		j: 1
		--assert strict-equal? -7 -7 or 1
		--assert strict-equal? -7 or~ -7 1
		--assert strict-equal? -7 i or j
		--assert strict-equal? -7 or~ i j

	--test-- "-7 or -1"
		i: -7
		j: -1
		--assert strict-equal? -1 -7 or -1
		--assert strict-equal? -1 or~ -7 -1
		--assert strict-equal? -1 i or j
		--assert strict-equal? -1 or~ i j

	--test-- "-7 or -2147483648"
		i: -7
		j: -2147483648
		--assert strict-equal? -7 -7 or -2147483648
		--assert strict-equal? -7 or~ -7 -2147483648
		--assert strict-equal? -7 i or j
		--assert strict-equal? -7 or~ i j

	--test-- "-7 or 2147483647"
		i: -7
		j: 2147483647
		--assert strict-equal? -1 -7 or 2147483647
		--assert strict-equal? -1 or~ -7 2147483647
		--assert strict-equal? -1 i or j
		--assert strict-equal? -1 or~ i j

	--test-- "-7 or -8"
		i: -7
		j: -8
		--assert strict-equal? -7 -7 or -8
		--assert strict-equal? -7 or~ -7 -8
		--assert strict-equal? -7 i or j
		--assert strict-equal? -7 or~ i j

	--test-- "-7 or -10"
		i: -7
		j: -10
		--assert strict-equal? -1 -7 or -10
		--assert strict-equal? -1 or~ -7 -10
		--assert strict-equal? -1 i or j
		--assert strict-equal? -1 or~ i j

	--test-- "-8 or 0"
		i: -8
		j: 0
		--assert strict-equal? -8 -8 or 0
		--assert strict-equal? -8 or~ -8 0
		--assert strict-equal? -8 i or j
		--assert strict-equal? -8 or~ i j

	--test-- "-8 or 1"
		i: -8
		j: 1
		--assert strict-equal? -7 -8 or 1
		--assert strict-equal? -7 or~ -8 1
		--assert strict-equal? -7 i or j
		--assert strict-equal? -7 or~ i j

	--test-- "-8 or -1"
		i: -8
		j: -1
		--assert strict-equal? -1 -8 or -1
		--assert strict-equal? -1 or~ -8 -1
		--assert strict-equal? -1 i or j
		--assert strict-equal? -1 or~ i j

	--test-- "-8 or -2147483648"
		i: -8
		j: -2147483648
		--assert strict-equal? -8 -8 or -2147483648
		--assert strict-equal? -8 or~ -8 -2147483648
		--assert strict-equal? -8 i or j
		--assert strict-equal? -8 or~ i j

	--test-- "-8 or 2147483647"
		i: -8
		j: 2147483647
		--assert strict-equal? -1 -8 or 2147483647
		--assert strict-equal? -1 or~ -8 2147483647
		--assert strict-equal? -1 i or j
		--assert strict-equal? -1 or~ i j

	--test-- "-8 or -7"
		i: -8
		j: -7
		--assert strict-equal? -7 -8 or -7
		--assert strict-equal? -7 or~ -8 -7
		--assert strict-equal? -7 i or j
		--assert strict-equal? -7 or~ i j

	--test-- "-8 or -10"
		i: -8
		j: -10
		--assert strict-equal? -2 -8 or -10
		--assert strict-equal? -2 or~ -8 -10
		--assert strict-equal? -2 i or j
		--assert strict-equal? -2 or~ i j

	--test-- "-10 or 0"
		i: -10
		j: 0
		--assert strict-equal? -10 -10 or 0
		--assert strict-equal? -10 or~ -10 0
		--assert strict-equal? -10 i or j
		--assert strict-equal? -10 or~ i j

	--test-- "-10 or 1"
		i: -10
		j: 1
		--assert strict-equal? -9 -10 or 1
		--assert strict-equal? -9 or~ -10 1
		--assert strict-equal? -9 i or j
		--assert strict-equal? -9 or~ i j

	--test-- "-10 or -1"
		i: -10
		j: -1
		--assert strict-equal? -1 -10 or -1
		--assert strict-equal? -1 or~ -10 -1
		--assert strict-equal? -1 i or j
		--assert strict-equal? -1 or~ i j

	--test-- "-10 or -2147483648"
		i: -10
		j: -2147483648
		--assert strict-equal? -10 -10 or -2147483648
		--assert strict-equal? -10 or~ -10 -2147483648
		--assert strict-equal? -10 i or j
		--assert strict-equal? -10 or~ i j

	--test-- "-10 or 2147483647"
		i: -10
		j: 2147483647
		--assert strict-equal? -1 -10 or 2147483647
		--assert strict-equal? -1 or~ -10 2147483647
		--assert strict-equal? -1 i or j
		--assert strict-equal? -1 or~ i j

	--test-- "-10 or -7"
		i: -10
		j: -7
		--assert strict-equal? -1 -10 or -7
		--assert strict-equal? -1 or~ -10 -7
		--assert strict-equal? -1 i or j
		--assert strict-equal? -1 or~ i j

	--test-- "-10 or -8"
		i: -10
		j: -8
		--assert strict-equal? -2 -10 or -8
		--assert strict-equal? -2 or~ -10 -8
		--assert strict-equal? -2 i or j
		--assert strict-equal? -2 or~ i j


===end-group===

===start-group=== "and"

	--test-- "0 and 1"
		i: 0
		j: 1
		--assert strict-equal? 0 0 and 1
		--assert strict-equal? 0 and~ 0 1
		--assert strict-equal? 0 i and j
		--assert strict-equal? 0 and~ i j

	--test-- "0 and -1"
		i: 0
		j: -1
		--assert strict-equal? 0 0 and -1
		--assert strict-equal? 0 and~ 0 -1
		--assert strict-equal? 0 i and j
		--assert strict-equal? 0 and~ i j

	--test-- "0 and -2147483648"
		i: 0
		j: -2147483648
		--assert strict-equal? 0 0 and -2147483648
		--assert strict-equal? 0 and~ 0 -2147483648
		--assert strict-equal? 0 i and j
		--assert strict-equal? 0 and~ i j

	--test-- "0 and 2147483647"
		i: 0
		j: 2147483647
		--assert strict-equal? 0 0 and 2147483647
		--assert strict-equal? 0 and~ 0 2147483647
		--assert strict-equal? 0 i and j
		--assert strict-equal? 0 and~ i j

	--test-- "0 and -7"
		i: 0
		j: -7
		--assert strict-equal? 0 0 and -7
		--assert strict-equal? 0 and~ 0 -7
		--assert strict-equal? 0 i and j
		--assert strict-equal? 0 and~ i j

	--test-- "0 and -8"
		i: 0
		j: -8
		--assert strict-equal? 0 0 and -8
		--assert strict-equal? 0 and~ 0 -8
		--assert strict-equal? 0 i and j
		--assert strict-equal? 0 and~ i j

	--test-- "0 and -10"
		i: 0
		j: -10
		--assert strict-equal? 0 0 and -10
		--assert strict-equal? 0 and~ 0 -10
		--assert strict-equal? 0 i and j
		--assert strict-equal? 0 and~ i j

	--test-- "1 and 0"
		i: 1
		j: 0
		--assert strict-equal? 0 1 and 0
		--assert strict-equal? 0 and~ 1 0
		--assert strict-equal? 0 i and j
		--assert strict-equal? 0 and~ i j

	--test-- "1 and -1"
		i: 1
		j: -1
		--assert strict-equal? 1 1 and -1
		--assert strict-equal? 1 and~ 1 -1
		--assert strict-equal? 1 i and j
		--assert strict-equal? 1 and~ i j

	--test-- "1 and -2147483648"
		i: 1
		j: -2147483648
		--assert strict-equal? 0 1 and -2147483648
		--assert strict-equal? 0 and~ 1 -2147483648
		--assert strict-equal? 0 i and j
		--assert strict-equal? 0 and~ i j

	--test-- "1 and 2147483647"
		i: 1
		j: 2147483647
		--assert strict-equal? 1 1 and 2147483647
		--assert strict-equal? 1 and~ 1 2147483647
		--assert strict-equal? 1 i and j
		--assert strict-equal? 1 and~ i j

	--test-- "1 and -7"
		i: 1
		j: -7
		--assert strict-equal? 1 1 and -7
		--assert strict-equal? 1 and~ 1 -7
		--assert strict-equal? 1 i and j
		--assert strict-equal? 1 and~ i j

	--test-- "1 and -8"
		i: 1
		j: -8
		--assert strict-equal? 0 1 and -8
		--assert strict-equal? 0 and~ 1 -8
		--assert strict-equal? 0 i and j
		--assert strict-equal? 0 and~ i j

	--test-- "1 and -10"
		i: 1
		j: -10
		--assert strict-equal? 0 1 and -10
		--assert strict-equal? 0 and~ 1 -10
		--assert strict-equal? 0 i and j
		--assert strict-equal? 0 and~ i j

	--test-- "-1 and 0"
		i: -1
		j: 0
		--assert strict-equal? 0 -1 and 0
		--assert strict-equal? 0 and~ -1 0
		--assert strict-equal? 0 i and j
		--assert strict-equal? 0 and~ i j

	--test-- "-1 and 1"
		i: -1
		j: 1
		--assert strict-equal? 1 -1 and 1
		--assert strict-equal? 1 and~ -1 1
		--assert strict-equal? 1 i and j
		--assert strict-equal? 1 and~ i j

	--test-- "-1 and -2147483648"
		i: -1
		j: -2147483648
		--assert strict-equal? -2147483648 -1 and -2147483648
		--assert strict-equal? -2147483648 and~ -1 -2147483648
		--assert strict-equal? -2147483648 i and j
		--assert strict-equal? -2147483648 and~ i j

	--test-- "-1 and 2147483647"
		i: -1
		j: 2147483647
		--assert strict-equal? 2147483647 -1 and 2147483647
		--assert strict-equal? 2147483647 and~ -1 2147483647
		--assert strict-equal? 2147483647 i and j
		--assert strict-equal? 2147483647 and~ i j

	--test-- "-1 and -7"
		i: -1
		j: -7
		--assert strict-equal? -7 -1 and -7
		--assert strict-equal? -7 and~ -1 -7
		--assert strict-equal? -7 i and j
		--assert strict-equal? -7 and~ i j

	--test-- "-1 and -8"
		i: -1
		j: -8
		--assert strict-equal? -8 -1 and -8
		--assert strict-equal? -8 and~ -1 -8
		--assert strict-equal? -8 i and j
		--assert strict-equal? -8 and~ i j

	--test-- "-1 and -10"
		i: -1
		j: -10
		--assert strict-equal? -10 -1 and -10
		--assert strict-equal? -10 and~ -1 -10
		--assert strict-equal? -10 i and j
		--assert strict-equal? -10 and~ i j

	--test-- "-2147483648 and 0"
		i: -2147483648
		j: 0
		--assert strict-equal? 0 -2147483648 and 0
		--assert strict-equal? 0 and~ -2147483648 0
		--assert strict-equal? 0 i and j
		--assert strict-equal? 0 and~ i j

	--test-- "-2147483648 and 1"
		i: -2147483648
		j: 1
		--assert strict-equal? 0 -2147483648 and 1
		--assert strict-equal? 0 and~ -2147483648 1
		--assert strict-equal? 0 i and j
		--assert strict-equal? 0 and~ i j

	--test-- "-2147483648 and -1"
		i: -2147483648
		j: -1
		--assert strict-equal? -2147483648 -2147483648 and -1
		--assert strict-equal? -2147483648 and~ -2147483648 -1
		--assert strict-equal? -2147483648 i and j
		--assert strict-equal? -2147483648 and~ i j

	--test-- "-2147483648 and 2147483647"
		i: -2147483648
		j: 2147483647
		--assert strict-equal? 0 -2147483648 and 2147483647
		--assert strict-equal? 0 and~ -2147483648 2147483647
		--assert strict-equal? 0 i and j
		--assert strict-equal? 0 and~ i j

	--test-- "-2147483648 and -7"
		i: -2147483648
		j: -7
		--assert strict-equal? -2147483648 -2147483648 and -7
		--assert strict-equal? -2147483648 and~ -2147483648 -7
		--assert strict-equal? -2147483648 i and j
		--assert strict-equal? -2147483648 and~ i j

	--test-- "-2147483648 and -8"
		i: -2147483648
		j: -8
		--assert strict-equal? -2147483648 -2147483648 and -8
		--assert strict-equal? -2147483648 and~ -2147483648 -8
		--assert strict-equal? -2147483648 i and j
		--assert strict-equal? -2147483648 and~ i j

	--test-- "-2147483648 and -10"
		i: -2147483648
		j: -10
		--assert strict-equal? -2147483648 -2147483648 and -10
		--assert strict-equal? -2147483648 and~ -2147483648 -10
		--assert strict-equal? -2147483648 i and j
		--assert strict-equal? -2147483648 and~ i j

	--test-- "2147483647 and 0"
		i: 2147483647
		j: 0
		--assert strict-equal? 0 2147483647 and 0
		--assert strict-equal? 0 and~ 2147483647 0
		--assert strict-equal? 0 i and j
		--assert strict-equal? 0 and~ i j

	--test-- "2147483647 and 1"
		i: 2147483647
		j: 1
		--assert strict-equal? 1 2147483647 and 1
		--assert strict-equal? 1 and~ 2147483647 1
		--assert strict-equal? 1 i and j
		--assert strict-equal? 1 and~ i j

	--test-- "2147483647 and -1"
		i: 2147483647
		j: -1
		--assert strict-equal? 2147483647 2147483647 and -1
		--assert strict-equal? 2147483647 and~ 2147483647 -1
		--assert strict-equal? 2147483647 i and j
		--assert strict-equal? 2147483647 and~ i j

	--test-- "2147483647 and -2147483648"
		i: 2147483647
		j: -2147483648
		--assert strict-equal? 0 2147483647 and -2147483648
		--assert strict-equal? 0 and~ 2147483647 -2147483648
		--assert strict-equal? 0 i and j
		--assert strict-equal? 0 and~ i j

	--test-- "2147483647 and -7"
		i: 2147483647
		j: -7
		--assert strict-equal? 2147483641 2147483647 and -7
		--assert strict-equal? 2147483641 and~ 2147483647 -7
		--assert strict-equal? 2147483641 i and j
		--assert strict-equal? 2147483641 and~ i j

	--test-- "2147483647 and -8"
		i: 2147483647
		j: -8
		--assert strict-equal? 2147483640 2147483647 and -8
		--assert strict-equal? 2147483640 and~ 2147483647 -8
		--assert strict-equal? 2147483640 i and j
		--assert strict-equal? 2147483640 and~ i j

	--test-- "2147483647 and -10"
		i: 2147483647
		j: -10
		--assert strict-equal? 2147483638 2147483647 and -10
		--assert strict-equal? 2147483638 and~ 2147483647 -10
		--assert strict-equal? 2147483638 i and j
		--assert strict-equal? 2147483638 and~ i j

	--test-- "-7 and 0"
		i: -7
		j: 0
		--assert strict-equal? 0 -7 and 0
		--assert strict-equal? 0 and~ -7 0
		--assert strict-equal? 0 i and j
		--assert strict-equal? 0 and~ i j

	--test-- "-7 and 1"
		i: -7
		j: 1
		--assert strict-equal? 1 -7 and 1
		--assert strict-equal? 1 and~ -7 1
		--assert strict-equal? 1 i and j
		--assert strict-equal? 1 and~ i j

	--test-- "-7 and -1"
		i: -7
		j: -1
		--assert strict-equal? -7 -7 and -1
		--assert strict-equal? -7 and~ -7 -1
		--assert strict-equal? -7 i and j
		--assert strict-equal? -7 and~ i j

	--test-- "-7 and -2147483648"
		i: -7
		j: -2147483648
		--assert strict-equal? -2147483648 -7 and -2147483648
		--assert strict-equal? -2147483648 and~ -7 -2147483648
		--assert strict-equal? -2147483648 i and j
		--assert strict-equal? -2147483648 and~ i j

	--test-- "-7 and 2147483647"
		i: -7
		j: 2147483647
		--assert strict-equal? 2147483641 -7 and 2147483647
		--assert strict-equal? 2147483641 and~ -7 2147483647
		--assert strict-equal? 2147483641 i and j
		--assert strict-equal? 2147483641 and~ i j

	--test-- "-7 and -8"
		i: -7
		j: -8
		--assert strict-equal? -8 -7 and -8
		--assert strict-equal? -8 and~ -7 -8
		--assert strict-equal? -8 i and j
		--assert strict-equal? -8 and~ i j

	--test-- "-7 and -10"
		i: -7
		j: -10
		--assert strict-equal? -16 -7 and -10
		--assert strict-equal? -16 and~ -7 -10
		--assert strict-equal? -16 i and j
		--assert strict-equal? -16 and~ i j

	--test-- "-8 and 0"
		i: -8
		j: 0
		--assert strict-equal? 0 -8 and 0
		--assert strict-equal? 0 and~ -8 0
		--assert strict-equal? 0 i and j
		--assert strict-equal? 0 and~ i j

	--test-- "-8 and 1"
		i: -8
		j: 1
		--assert strict-equal? 0 -8 and 1
		--assert strict-equal? 0 and~ -8 1
		--assert strict-equal? 0 i and j
		--assert strict-equal? 0 and~ i j

	--test-- "-8 and -1"
		i: -8
		j: -1
		--assert strict-equal? -8 -8 and -1
		--assert strict-equal? -8 and~ -8 -1
		--assert strict-equal? -8 i and j
		--assert strict-equal? -8 and~ i j

	--test-- "-8 and -2147483648"
		i: -8
		j: -2147483648
		--assert strict-equal? -2147483648 -8 and -2147483648
		--assert strict-equal? -2147483648 and~ -8 -2147483648
		--assert strict-equal? -2147483648 i and j
		--assert strict-equal? -2147483648 and~ i j

	--test-- "-8 and 2147483647"
		i: -8
		j: 2147483647
		--assert strict-equal? 2147483640 -8 and 2147483647
		--assert strict-equal? 2147483640 and~ -8 2147483647
		--assert strict-equal? 2147483640 i and j
		--assert strict-equal? 2147483640 and~ i j

	--test-- "-8 and -7"
		i: -8
		j: -7
		--assert strict-equal? -8 -8 and -7
		--assert strict-equal? -8 and~ -8 -7
		--assert strict-equal? -8 i and j
		--assert strict-equal? -8 and~ i j

	--test-- "-8 and -10"
		i: -8
		j: -10
		--assert strict-equal? -16 -8 and -10
		--assert strict-equal? -16 and~ -8 -10
		--assert strict-equal? -16 i and j
		--assert strict-equal? -16 and~ i j

	--test-- "-10 and 0"
		i: -10
		j: 0
		--assert strict-equal? 0 -10 and 0
		--assert strict-equal? 0 and~ -10 0
		--assert strict-equal? 0 i and j
		--assert strict-equal? 0 and~ i j

	--test-- "-10 and 1"
		i: -10
		j: 1
		--assert strict-equal? 0 -10 and 1
		--assert strict-equal? 0 and~ -10 1
		--assert strict-equal? 0 i and j
		--assert strict-equal? 0 and~ i j

	--test-- "-10 and -1"
		i: -10
		j: -1
		--assert strict-equal? -10 -10 and -1
		--assert strict-equal? -10 and~ -10 -1
		--assert strict-equal? -10 i and j
		--assert strict-equal? -10 and~ i j

	--test-- "-10 and -2147483648"
		i: -10
		j: -2147483648
		--assert strict-equal? -2147483648 -10 and -2147483648
		--assert strict-equal? -2147483648 and~ -10 -2147483648
		--assert strict-equal? -2147483648 i and j
		--assert strict-equal? -2147483648 and~ i j

	--test-- "-10 and 2147483647"
		i: -10
		j: 2147483647
		--assert strict-equal? 2147483638 -10 and 2147483647
		--assert strict-equal? 2147483638 and~ -10 2147483647
		--assert strict-equal? 2147483638 i and j
		--assert strict-equal? 2147483638 and~ i j

	--test-- "-10 and -7"
		i: -10
		j: -7
		--assert strict-equal? -16 -10 and -7
		--assert strict-equal? -16 and~ -10 -7
		--assert strict-equal? -16 i and j
		--assert strict-equal? -16 and~ i j

	--test-- "-10 and -8"
		i: -10
		j: -8
		--assert strict-equal? -16 -10 and -8
		--assert strict-equal? -16 and~ -10 -8
		--assert strict-equal? -16 i and j
		--assert strict-equal? -16 and~ i j

===end-group===

===start-group=== "xor"

	--test-- "0 xor 1"
		i: 0
		j: 1
		--assert strict-equal? 1 0 xor 1
		--assert strict-equal? 1 xor~ 0 1
		--assert strict-equal? 1 i xor j
		--assert strict-equal? 1 xor~ i j

	--test-- "0 xor -1"
		i: 0
		j: -1
		--assert strict-equal? -1 0 xor -1
		--assert strict-equal? -1 xor~ 0 -1
		--assert strict-equal? -1 i xor j
		--assert strict-equal? -1 xor~ i j

	--test-- "0 xor -2147483648"
		i: 0
		j: -2147483648
		--assert strict-equal? -2147483648 0 xor -2147483648
		--assert strict-equal? -2147483648 xor~ 0 -2147483648
		--assert strict-equal? -2147483648 i xor j
		--assert strict-equal? -2147483648 xor~ i j

	--test-- "0 xor 2147483647"
		i: 0
		j: 2147483647
		--assert strict-equal? 2147483647 0 xor 2147483647
		--assert strict-equal? 2147483647 xor~ 0 2147483647
		--assert strict-equal? 2147483647 i xor j
		--assert strict-equal? 2147483647 xor~ i j

	--test-- "0 xor -7"
		i: 0
		j: -7
		--assert strict-equal? -7 0 xor -7
		--assert strict-equal? -7 xor~ 0 -7
		--assert strict-equal? -7 i xor j
		--assert strict-equal? -7 xor~ i j

	--test-- "0 xor -8"
		i: 0
		j: -8
		--assert strict-equal? -8 0 xor -8
		--assert strict-equal? -8 xor~ 0 -8
		--assert strict-equal? -8 i xor j
		--assert strict-equal? -8 xor~ i j

	--test-- "0 xor -10"
		i: 0
		j: -10
		--assert strict-equal? -10 0 xor -10
		--assert strict-equal? -10 xor~ 0 -10
		--assert strict-equal? -10 i xor j
		--assert strict-equal? -10 xor~ i j

	--test-- "1 xor 0"
		i: 1
		j: 0
		--assert strict-equal? 1 1 xor 0
		--assert strict-equal? 1 xor~ 1 0
		--assert strict-equal? 1 i xor j
		--assert strict-equal? 1 xor~ i j

	--test-- "1 xor -1"
		i: 1
		j: -1
		--assert strict-equal? -2 1 xor -1
		--assert strict-equal? -2 xor~ 1 -1
		--assert strict-equal? -2 i xor j
		--assert strict-equal? -2 xor~ i j

	--test-- "1 xor -2147483648"
		i: 1
		j: -2147483648
		--assert strict-equal? -2147483647 1 xor -2147483648
		--assert strict-equal? -2147483647 xor~ 1 -2147483648
		--assert strict-equal? -2147483647 i xor j
		--assert strict-equal? -2147483647 xor~ i j

	--test-- "1 xor 2147483647"
		i: 1
		j: 2147483647
		--assert strict-equal? 2147483646 1 xor 2147483647
		--assert strict-equal? 2147483646 xor~ 1 2147483647
		--assert strict-equal? 2147483646 i xor j
		--assert strict-equal? 2147483646 xor~ i j

	--test-- "1 xor -7"
		i: 1
		j: -7
		--assert strict-equal? -8 1 xor -7
		--assert strict-equal? -8 xor~ 1 -7
		--assert strict-equal? -8 i xor j
		--assert strict-equal? -8 xor~ i j

	--test-- "1 xor -8"
		i: 1
		j: -8
		--assert strict-equal? -7 1 xor -8
		--assert strict-equal? -7 xor~ 1 -8
		--assert strict-equal? -7 i xor j
		--assert strict-equal? -7 xor~ i j

	--test-- "1 xor -10"
		i: 1
		j: -10
		--assert strict-equal? -9 1 xor -10
		--assert strict-equal? -9 xor~ 1 -10
		--assert strict-equal? -9 i xor j
		--assert strict-equal? -9 xor~ i j

	--test-- "-1 xor 0"
		i: -1
		j: 0
		--assert strict-equal? -1 -1 xor 0
		--assert strict-equal? -1 xor~ -1 0
		--assert strict-equal? -1 i xor j
		--assert strict-equal? -1 xor~ i j

	--test-- "-1 xor 1"
		i: -1
		j: 1
		--assert strict-equal? -2 -1 xor 1
		--assert strict-equal? -2 xor~ -1 1
		--assert strict-equal? -2 i xor j
		--assert strict-equal? -2 xor~ i j

	--test-- "-1 xor -2147483648"
		i: -1
		j: -2147483648
		--assert strict-equal? 2147483647 -1 xor -2147483648
		--assert strict-equal? 2147483647 xor~ -1 -2147483648
		--assert strict-equal? 2147483647 i xor j
		--assert strict-equal? 2147483647 xor~ i j

	--test-- "-1 xor 2147483647"
		i: -1
		j: 2147483647
		--assert strict-equal? -2147483648 -1 xor 2147483647
		--assert strict-equal? -2147483648 xor~ -1 2147483647
		--assert strict-equal? -2147483648 i xor j
		--assert strict-equal? -2147483648 xor~ i j

	--test-- "-1 xor -7"
		i: -1
		j: -7
		--assert strict-equal? 6 -1 xor -7
		--assert strict-equal? 6 xor~ -1 -7
		--assert strict-equal? 6 i xor j
		--assert strict-equal? 6 xor~ i j

	--test-- "-1 xor -8"
		i: -1
		j: -8
		--assert strict-equal? 7 -1 xor -8
		--assert strict-equal? 7 xor~ -1 -8
		--assert strict-equal? 7 i xor j
		--assert strict-equal? 7 xor~ i j

	--test-- "-1 xor -10"
		i: -1
		j: -10
		--assert strict-equal? 9 -1 xor -10
		--assert strict-equal? 9 xor~ -1 -10
		--assert strict-equal? 9 i xor j
		--assert strict-equal? 9 xor~ i j

	--test-- "-2147483648 xor 0"
		i: -2147483648
		j: 0
		--assert strict-equal? -2147483648 -2147483648 xor 0
		--assert strict-equal? -2147483648 xor~ -2147483648 0
		--assert strict-equal? -2147483648 i xor j
		--assert strict-equal? -2147483648 xor~ i j

	--test-- "-2147483648 xor 1"
		i: -2147483648
		j: 1
		--assert strict-equal? -2147483647 -2147483648 xor 1
		--assert strict-equal? -2147483647 xor~ -2147483648 1
		--assert strict-equal? -2147483647 i xor j
		--assert strict-equal? -2147483647 xor~ i j

	--test-- "-2147483648 xor -1"
		i: -2147483648
		j: -1
		--assert strict-equal? 2147483647 -2147483648 xor -1
		--assert strict-equal? 2147483647 xor~ -2147483648 -1
		--assert strict-equal? 2147483647 i xor j
		--assert strict-equal? 2147483647 xor~ i j

	--test-- "-2147483648 xor 2147483647"
		i: -2147483648
		j: 2147483647
		--assert strict-equal? -1 -2147483648 xor 2147483647
		--assert strict-equal? -1 xor~ -2147483648 2147483647
		--assert strict-equal? -1 i xor j
		--assert strict-equal? -1 xor~ i j

	--test-- "-2147483648 xor -7"
		i: -2147483648
		j: -7
		--assert strict-equal? 2147483641 -2147483648 xor -7
		--assert strict-equal? 2147483641 xor~ -2147483648 -7
		--assert strict-equal? 2147483641 i xor j
		--assert strict-equal? 2147483641 xor~ i j

	--test-- "-2147483648 xor -8"
		i: -2147483648
		j: -8
		--assert strict-equal? 2147483640 -2147483648 xor -8
		--assert strict-equal? 2147483640 xor~ -2147483648 -8
		--assert strict-equal? 2147483640 i xor j
		--assert strict-equal? 2147483640 xor~ i j

	--test-- "-2147483648 xor -10"
		i: -2147483648
		j: -10
		--assert strict-equal? 2147483638 -2147483648 xor -10
		--assert strict-equal? 2147483638 xor~ -2147483648 -10
		--assert strict-equal? 2147483638 i xor j
		--assert strict-equal? 2147483638 xor~ i j

	--test-- "2147483647 xor 0"
		i: 2147483647
		j: 0
		--assert strict-equal? 2147483647 2147483647 xor 0
		--assert strict-equal? 2147483647 xor~ 2147483647 0
		--assert strict-equal? 2147483647 i xor j
		--assert strict-equal? 2147483647 xor~ i j

	--test-- "2147483647 xor 1"
		i: 2147483647
		j: 1
		--assert strict-equal? 2147483646 2147483647 xor 1
		--assert strict-equal? 2147483646 xor~ 2147483647 1
		--assert strict-equal? 2147483646 i xor j
		--assert strict-equal? 2147483646 xor~ i j

	--test-- "2147483647 xor -1"
		i: 2147483647
		j: -1
		--assert strict-equal? -2147483648 2147483647 xor -1
		--assert strict-equal? -2147483648 xor~ 2147483647 -1
		--assert strict-equal? -2147483648 i xor j
		--assert strict-equal? -2147483648 xor~ i j

	--test-- "2147483647 xor -2147483648"
		i: 2147483647
		j: -2147483648
		--assert strict-equal? -1 2147483647 xor -2147483648
		--assert strict-equal? -1 xor~ 2147483647 -2147483648
		--assert strict-equal? -1 i xor j
		--assert strict-equal? -1 xor~ i j

	--test-- "2147483647 xor -7"
		i: 2147483647
		j: -7
		--assert strict-equal? -2147483642 2147483647 xor -7
		--assert strict-equal? -2147483642 xor~ 2147483647 -7
		--assert strict-equal? -2147483642 i xor j
		--assert strict-equal? -2147483642 xor~ i j

	--test-- "2147483647 xor -8"
		i: 2147483647
		j: -8
		--assert strict-equal? -2147483641 2147483647 xor -8
		--assert strict-equal? -2147483641 xor~ 2147483647 -8
		--assert strict-equal? -2147483641 i xor j
		--assert strict-equal? -2147483641 xor~ i j

	--test-- "2147483647 xor -10"
		i: 2147483647
		j: -10
		--assert strict-equal? -2147483639 2147483647 xor -10
		--assert strict-equal? -2147483639 xor~ 2147483647 -10
		--assert strict-equal? -2147483639 i xor j
		--assert strict-equal? -2147483639 xor~ i j

	--test-- "-7 xor 0"
		i: -7
		j: 0
		--assert strict-equal? -7 -7 xor 0
		--assert strict-equal? -7 xor~ -7 0
		--assert strict-equal? -7 i xor j
		--assert strict-equal? -7 xor~ i j

	--test-- "-7 xor 1"
		i: -7
		j: 1
		--assert strict-equal? -8 -7 xor 1
		--assert strict-equal? -8 xor~ -7 1
		--assert strict-equal? -8 i xor j
		--assert strict-equal? -8 xor~ i j

	--test-- "-7 xor -1"
		i: -7
		j: -1
		--assert strict-equal? 6 -7 xor -1
		--assert strict-equal? 6 xor~ -7 -1
		--assert strict-equal? 6 i xor j
		--assert strict-equal? 6 xor~ i j

	--test-- "-7 xor -2147483648"
		i: -7
		j: -2147483648
		--assert strict-equal? 2147483641 -7 xor -2147483648
		--assert strict-equal? 2147483641 xor~ -7 -2147483648
		--assert strict-equal? 2147483641 i xor j
		--assert strict-equal? 2147483641 xor~ i j

	--test-- "-7 xor 2147483647"
		i: -7
		j: 2147483647
		--assert strict-equal? -2147483642 -7 xor 2147483647
		--assert strict-equal? -2147483642 xor~ -7 2147483647
		--assert strict-equal? -2147483642 i xor j
		--assert strict-equal? -2147483642 xor~ i j

	--test-- "-7 xor -8"
		i: -7
		j: -8
		--assert strict-equal? 1 -7 xor -8
		--assert strict-equal? 1 xor~ -7 -8
		--assert strict-equal? 1 i xor j
		--assert strict-equal? 1 xor~ i j

	--test-- "-7 xor -10"
		i: -7
		j: -10
		--assert strict-equal? 15 -7 xor -10
		--assert strict-equal? 15 xor~ -7 -10
		--assert strict-equal? 15 i xor j
		--assert strict-equal? 15 xor~ i j

	--test-- "-8 xor 0"
		i: -8
		j: 0
		--assert strict-equal? -8 -8 xor 0
		--assert strict-equal? -8 xor~ -8 0
		--assert strict-equal? -8 i xor j
		--assert strict-equal? -8 xor~ i j

	--test-- "-8 xor 1"
		i: -8
		j: 1
		--assert strict-equal? -7 -8 xor 1
		--assert strict-equal? -7 xor~ -8 1
		--assert strict-equal? -7 i xor j
		--assert strict-equal? -7 xor~ i j

	--test-- "-8 xor -1"
		i: -8
		j: -1
		--assert strict-equal? 7 -8 xor -1
		--assert strict-equal? 7 xor~ -8 -1
		--assert strict-equal? 7 i xor j
		--assert strict-equal? 7 xor~ i j

	--test-- "-8 xor -2147483648"
		i: -8
		j: -2147483648
		--assert strict-equal? 2147483640 -8 xor -2147483648
		--assert strict-equal? 2147483640 xor~ -8 -2147483648
		--assert strict-equal? 2147483640 i xor j
		--assert strict-equal? 2147483640 xor~ i j

	--test-- "-8 xor 2147483647"
		i: -8
		j: 2147483647
		--assert strict-equal? -2147483641 -8 xor 2147483647
		--assert strict-equal? -2147483641 xor~ -8 2147483647
		--assert strict-equal? -2147483641 i xor j
		--assert strict-equal? -2147483641 xor~ i j

	--test-- "-8 xor -7"
		i: -8
		j: -7
		--assert strict-equal? 1 -8 xor -7
		--assert strict-equal? 1 xor~ -8 -7
		--assert strict-equal? 1 i xor j
		--assert strict-equal? 1 xor~ i j

	--test-- "-8 xor -10"
		i: -8
		j: -10
		--assert strict-equal? 14 -8 xor -10
		--assert strict-equal? 14 xor~ -8 -10
		--assert strict-equal? 14 i xor j
		--assert strict-equal? 14 xor~ i j

	--test-- "-10 xor 0"
		i: -10
		j: 0
		--assert strict-equal? -10 -10 xor 0
		--assert strict-equal? -10 xor~ -10 0
		--assert strict-equal? -10 i xor j
		--assert strict-equal? -10 xor~ i j

	--test-- "-10 xor 1"
		i: -10
		j: 1
		--assert strict-equal? -9 -10 xor 1
		--assert strict-equal? -9 xor~ -10 1
		--assert strict-equal? -9 i xor j
		--assert strict-equal? -9 xor~ i j

	--test-- "-10 xor -1"
		i: -10
		j: -1
		--assert strict-equal? 9 -10 xor -1
		--assert strict-equal? 9 xor~ -10 -1
		--assert strict-equal? 9 i xor j
		--assert strict-equal? 9 xor~ i j

	--test-- "-10 xor -2147483648"
		i: -10
		j: -2147483648
		--assert strict-equal? 2147483638 -10 xor -2147483648
		--assert strict-equal? 2147483638 xor~ -10 -2147483648
		--assert strict-equal? 2147483638 i xor j
		--assert strict-equal? 2147483638 xor~ i j

	--test-- "-10 xor 2147483647"
		i: -10
		j: 2147483647
		--assert strict-equal? -2147483639 -10 xor 2147483647
		--assert strict-equal? -2147483639 xor~ -10 2147483647
		--assert strict-equal? -2147483639 i xor j
		--assert strict-equal? -2147483639 xor~ i j

	--test-- "-10 xor -7"
		i: -10
		j: -7
		--assert strict-equal? 15 -10 xor -7
		--assert strict-equal? 15 xor~ -10 -7
		--assert strict-equal? 15 i xor j
		--assert strict-equal? 15 xor~ i j

	--test-- "-10 xor -8"
		i: -10
		j: -8
		--assert strict-equal? 14 -10 xor -8
		--assert strict-equal? 14 xor~ -10 -8
		--assert strict-equal? 14 i xor j
		--assert strict-equal? 14 xor~ i j

===end-group===

===start-group=== "comparisons"

	--test-- "= 1"					--assert 0 = 0
	--test-- "= 2"					--assert not 1 = 0
	--test-- "= 3"					--assert not -1 = 0
	--test-- "= 4"					--assert not 2147483647 = -2147483648
	--test-- "= 5"					--assert 2147483647 = 2147483647
	--test-- "= 6"					--assert -2147483648 = -2147483648
	--test-- "equal? 1"				--assert equal? 0 0
	--test-- "equal? 2"				--assert not equal? 1 0
	--test-- "equal? 3"				--assert not equal? -1 0
	--test-- "equal? 4"				--assert not equal? 2147483647 -2147483648
	--test-- "<> 1"					--assert not 0 <> 0
	--test-- "<> 2"					--assert 1 <> 0
	--test-- "<> 3"					--assert -1 <> 0
	--test-- "<> 4"					--assert 2147483647 <> -2147483648
	--test-- "not equal? 1"			--assert not not-equal? 0  0
	--test-- "not equal? 2"			--assert not-equal? 1 0
	--test-- "not equal? 3"			--assert not-equal? -1 0
	--test-- "not equal? 4"			--assert not-equal? 2147483647 <> -2147483648
	--test-- "> 1"					--assert not 0 > 0
	--test-- "> 2"					--assert 1 > 0
	--test-- "> 3"					--assert 0 > -1
	--test-- "> 4"					--assert 2147483647 > -2147483648
	--test-- "greater? 1"			--assert not greater? 0 0
	--test-- "greater? 2"			--assert greater? 1 0
	--test-- "greater? 3"			--assert greater? 0 -1
	--test-- "greater? 4"			--assert greater? 2147483647 -2147483648
	--test-- "< 1"					--assert not 0 < 0
	--test-- "< 2"					--assert 0 < 1
	--test-- "< 3"					--assert -1 < 0
	--test-- "< 4"					--assert -2147483648 < 2147483647
	--test-- "lesser? 1"			--assert not lesser? 0 0
	--test-- "lesser? 2"			--assert lesser? 0 1
	--test-- "lesser? 3"			--assert lesser? -1 0
	--test-- "lesser? 4"			--assert lesser? -2147483648 2147483647
	--test-- ">= 1"					--assert 0 >= 0
	--test-- ">= 2"					--assert 1 >= 0
	--test-- ">= 3"					--assert 0 >= -1
	--test-- ">= 4"					--assert 2147483647 >= -2147483648
	--test-- " greater-or-equal? 1"	--assert greater-or-equal? 0 0
	--test-- " greater-or-equal? 2"	--assert greater-or-equal? 1 0
	--test-- " greater-or-equal? 3"	--assert greater-or-equal? 0 -1
	--test-- " greater-or-equal? 4"	--assert greater-or-equal? 2147483647 -2147483648
	--test-- "<= 1"					--assert 0 <= 0
	--test-- "<= 2"					--assert 0 <= 1
	--test-- "<= 3"					--assert -1 <= 0
	--test-- "<= 4"					--assert -2147483648 <= 2147483647
	--test-- " lesser-or-equal? 1"	--assert lesser-or-equal? 0 0
	--test-- " lesser-or-equal? 2"	--assert lesser-or-equal? 0 1
	--test-- " lesser-or-equal? 3"	--assert lesser-or-equal? -1 0
	--test-- " lesser-or-equal? 4"	--assert lesser-or-equal? -2147483648 2147483647
		
===end-group===


===start-group=== "float assignment"
	--test-- "float-1"
		ff: 100.0
		--assert ff = 100.0
	--test-- "float-2"
		ff: 1.222090944E+33
		--assert ff = 1.222090944E+33
	--test-- "float-3"
		ff: 9.99999E-45
		--assert ff = 9.99999E-45
	--test-- "float-4"
		ff: 1.0
		f1: ff
		--assert f1 = 1.0
===end-group===

===start-group=== "trigonometric function"

	--test-- "float-cosine-1"
		--assert -1.0 = cosine/radians pi

	--test-- "float-cosine-2"
		--assert 0.0 = cosine 90

	--test-- "float-cosine-3"
		--assert 0.0 = cosine/radians pi / 2

	--test-- "float-sine-1"
		--assertf~= 0.0 sine/radians pi 1E-13

	--test-- "float-sine-2"
		--assert 1 = sine 90

	--test-- "float-tangent-1"
		--assert 0.0 = tangent/radians 0

	--test-- "float-tangent-2"
		--assert -1 = tangent 135

	--test-- "float-arcsine-1"
		--assertf~= -1.5707963267949 arcsine/radians -1 1E-13

	--test-- "float-arcsine-2"
		--assert 90 = arcsine 1

	--test-- "float-arccosine-1"
		--assertf~= 1.5707963267949 arccosine/radians 0 1E-13

	--test-- "float-arccosine-2"
		--assert 90 = arccosine 0

	--test-- "float-arctangent-1"
		--assertf~= -0.785398163397448 arctangent/radians -1 1E-13

	--test-- "float-arctangent-2"
		--assert 45 = arctangent 1

	--test-- "float-arctangent2"
		--assertf~=  3.1415926535898  arctangent2 0 -1 1E-13
		--assertf~=  3.1415926535898  arctangent2 0.0 -1.0 1E-13
		--assertf~= -1.5707963267949  arctangent2 -1 0 1E-13
		--assertf~= -0.78539816339745 arctangent2 -1 1 1E-13
		--assertf~= -0.78539816339745 arctangent2 -1.5 1.5 1E-13

===end-group===

===start-group=== "float function arguments"
	ff: func [
		fff		[float!]
		ffg		[float!]
		return: [integer!]
		/local
			ffl [float!]
	][
		ffl: fff
		if ffl <> fff [return 1]
		ffl: ffg
		if ffl <> ffg [return 2]
		1
	]

	--test-- "float-func-args-1"
		--assert 1 = ff 1.0 2.0

	--test-- "float-func-args-2"
		--assert 1 = ff 1.222090944E+33 9.99999E-45

===end-group===

===start-group=== "float locals"

	local-float: func [n [float!] return: [float!] /local p][p: n p]

	--test-- "float-loc-1"
		pi: local-float 3.14159265358979
		--assert pi = 3.14159265358979
		--assert -1.0 = cos pi
		--assert -1.0 = local-float cos pi

	--test-- "float-loc-2"
		ff: local-float pi
		--assert pi = local-float ff

	--test-- "float-loc-3"
		local-float2: func [n [float!] return: [float!] /local p][p: n local-float p]

		pi: local-float2 3.14159265358979
		--assert -1.0 = local-float2 cos pi
		ff: local-float2 pi
		--assert pi = local-float2 ff

	--test-- "float-loc-4"
		local-float3: func [n [float!] return: [float!] /local p [float!]][p: n local-float p]

		pi: local-float3 3.14159265358979
		--assert -1.0 = local-float3 cos pi
		ff: local-float3 pi
		--assert pi = local-float3 ff

	--test-- "float-loc-5"
		local-float4: func [n [float!] return: [float!] /local r p][p: n p]
		--assert -1.0 = local-float4 cos pi
		ff: local-float4 pi
		--assert pi = local-float4 ff

	--test-- "float-loc-6"
		local-float5: func [n [float!] return: [float!] /local r p][p: n local-float p]
		--assert -1.0 = local-float5 cos pi
		ff: local-float5 pi
		--assert pi = local-float5 ff

===end-group===

===start-group=== "float function return"

	ff1: func [
		ff1i	[integer!]
		return: [float!]
	][
		switch ff1i [
			1 [1.0]
			2 [1.222090944E+33]
			3 [9.99999E-45]
		]
	]
	--test-- "float return 1"
		--assert 1.0 = ff1 1
	--test-- "float return 2"
		--assert 1.222090944E+33 = ff1 2
	--test-- "float return 3"
		--assert 9.99999E-45 = ff1 3

===end-group===

===start-group=== "float members in object!"

	--test-- "float-object-1"
		sf1: make object! [
			a: 0.0
		]
		--assert 0.0 = sf1/a

	--test-- "float-object-2"
		sf2: make object! [
			a: 0.0
		]
		sf1/a: 1.222090944E+33
		--assert 1.222090944E+33 = sf1/a

	--test-- "float-object-3"
		sf3: make object! [
			a: 0.0
			b: 0.0
		]
		sf3/a: 1.222090944E+33
		sf3/b: 9.99999E-45

		--assert 1.222090944E+33 = sf3/a
		--assert 9.99999E-45 = sf3/b

	--test-- "float-object-4"
		sf4: make object! [
			c: none
			a: 0.0
			l: false
			b: 0.0
		]
		sf4/a: 1.222090944E+33
		sf4/b: 9.99999E-45
		--assert 1.222090944E+33 = sf4/a
		--assert 9.99999E-45 = sf4/b

	--test-- "float-object-5"
		sf5: make object! [f: 0.0 i: 0]

		sf5/i: 1234567890
		sf5/f: 3.14159265358979
		--assert sf5/i = 1234567890
		--assert sf5/f = pi

	--test-- "float-object-6"
		sf6: make object! [i: 0 f: 0.0]

		sf6/i: 1234567890
		sf6/f: 3.14159265358979
		--assert sf6/i = 1234567890
		--assert sf6/f = pi

===end-group===

===start-group=== "expressions with returned float values"

	fe1: function [
		return: [float!]
	][
		1.0
	]
	fe2: function [
		return: [float!]
	][
		2.0
	]

	--test-- "ewrfv0"
		--assert 1.0 = (fe1 * 1.0)

	--test-- "ewrfv1"
		--assert 1.0 = (1.0 * fe1)

	--test-- "ewrfv2"
		--assert 0.5 = (fe1 / fe2)

===end-group===

===start-group=== "calculations"

	fcfoo: func [a [float!] return: [float!]][a]

	fcobj: make object! [a: 3.0]

	fc2: 3.0

	--test-- "fc-1"
		fc1: 2.0
		fc1: fc1 / (fc1 - 1.0)
		--assert 2.0 = fc1

	--test-- "fc-2"
		--assert 5.0 - 3.0 = 2.0

	--test-- "fc-3"
		--assert 5.0 - fc2 = 2.0

	--test-- "fc-4"
		--assert 5.0 - (fcfoo 3.0) = 2.0

	--test-- "fc-5"
		--assertf~= 5.0 - fcobj/a 2.0 1E-10

	--test-- "fc-6"
		--assert fc2 - 5.0 = -2.0

	--test-- "fc-7"
		--assert fc2 - (fcfoo 5.0) = -2.0

	--test-- "fc-8"
		--assert fc2 - fcobj/a = 0.0						

	--test-- "fc-9"
		--assert (fcfoo 5.0) - 3.0 = 2.0

	--test-- "fc-10"
		--assert (fcfoo 5.0) - (fcfoo 3.0) = 2.0

	--test-- "fc-11"
		--assert (fcfoo 5.0) - fcobj/a = 2.0

	--test-- "fc-12"
		--assert fcobj/a - (fcfoo 5.0) = -2.0

===end-group===

===start-group=== "absolute"
	--test-- "abs1" --assert 0.0 = absolute -0.0
	--test-- "abs2" --assert 1.2 = absolute 1.2
	--test-- "abs3" --assert 1.2 = absolute -1.2
	--test-- "abs4" --assert 2.2E-308 = absolute -2.2E-308
	--test-- "abs5" --assert 2147483647 = absolute 2147483647.0
===end-group===

===start-group=== "power"
	--test-- "pow1" --assert 2.25 = power 1.5 2
	--test-- "pow2" --assert 9 	 = power -3.0 2.0
	--test-- "pow3" --assertf~= -0.3333333333333333 (power -3.0 -1) 1E-13
	--test-- "pow4" --assertf~= 11.211578456539659 (power 3 2.2) 1E-13
	;--test-- "pow5" --assert 0.0 = power 0.0 -1		;@@ return INF or 0.0 ?
	;--test-- "pow6" --assert 0.0 = power -0.0 -1		;@@ return -INF or 0.0 ?
===end-group===

===start-group=== "max/min"
	--test-- "max1"
		--assert 3 	 = max  3 1.0
		--assert integer! = type? max 3 1.0
	--test-- "max2"
		--assert 3.0 = max  1.0 3.0
		--assert float! = type? max 1.0 3.0

	--test-- "min1"
		--assert -3  = min -3 2
		--assert integer! = type? min -3 2.0
	--test-- "min2"
		--assert -2.0 = min 3.0 -2.0
		--assert float! = type? min 3.0 -2.0

===end-group===

===start-group=== "negative?/positive?"
	--test-- "neg1" --assert true  = negative? -1.0
	--test-- "neg2" --assert false = negative? 0.0
	--test-- "neg3" --assert false = negative? 1.0
	--test-- "pos1" --assert true  = positive? 1.0
	--test-- "pos2" --assert false = positive? 0.0
	--test-- "pos3" --assert false = positive? -1.0
===end-group===

===start-group=== "round"
	--test-- "round1"  --assert 1.375 = round/to 1.333 .125
	--test-- "round2"  --assert 1.33  = round/to 1.333 .01

	--test-- "round3"  --assert  1 = round/down  1.999
	--test-- "round4"  --assert -1 = round/down -1.999

	--test-- "round5"  --assert  2 = round/even  1.5
	--test-- "round6"  --assert -2 = round/even -1.5

	--test-- "round7"  --assert  1 = round/half-down  1.5
	--test-- "round8"  --assert -1 = round/half-down -1.5

	--test-- "round9"  --assert  1 = round/floor  1.999
	--test-- "round10" --assert -2 = round/floor -1.0000001

	--test-- "round11" --assert  2 = round/ceiling  1.0000001
	--test-- "round12" --assert -1 = round/ceiling -1.999

	--test-- "round13" --assert  2 = round/half-ceiling  1.5
	--test-- "round14" --assert -1 = round/half-ceiling -1.5

	--test-- "round15" --assert  1 = round  1.4999
	--test-- "round16" --assert  2 = round  1.5
	--test-- "round17" --assert -2 = round -1.5
===end-group===

===start-group=== "various regression tests from bugtracker"

	;--test-- "issue #227 for Red/System"
	;	t: 2.2
	;	ss: make object! [v: [float!]]
	;	ss/v: 2.0
	;	--assertf~= t - ss/v 0.2 1E-10

	--test-- "issue #221"
		x: -1.0
		y: either x < 0.0 [0.0 - x][x]
		--assert y = 1.0

		fabs: func [x [float!] return: [float!] ][
			either x < 0.0 [0.0 - x][x]
		]
		--assert 3.14 = fabs -3.14

===end-group===

===start-group=== "almost equal"
	--test-- "almost-equal1"  --assert 1.000000000000001 = 1.000000000000002
	--test-- "almost-equal2"  --assert not 1.000000000000001 <> 1.000000000000003

	--test-- "almost-equal3"  --assert -1.999999999999999 = -1.999999999999999
	--test-- "almost-equal4"  --assert 1.732050807568876 = 1.732050807568877

	--test-- "almost-equal5"  --assert  0.4E-323 = -0.4E-323
	--test-- "almost-equal6"  --assert 1.7976931348623157e308 = 1.#INF
	--test-- "almost-equal7"  --assert 4.94065645841247E-324 = 0
===end-group===

===start-group=== "special value arithmetic (NaNs and INF)"

	--test-- "special-arithmetic-1"  --assert "0.0"     = to string! 1.0 / 1.#INF
	--test-- "special-arithmetic-5"  --assert "1.#INF"  = to string! 9999999.9 + 1.#INF
	--test-- "special-arithmetic-6"  --assert "-1.#INF" = to string! 9999999.9 - 1.#INF
	--test-- "special-arithmetic-7"  --assert "1.#INF"  = to string! 1.#INF + 1.#INF
	--test-- "special-arithmetic-8"  --assert "1.#INF"  = to string! 1.#INF * 1.#INF
	--test-- "special-arithmetic-2"  --assert "1.#INF"  = to string! 1.0 / 0.0
	--test-- "special-arithmetic-3"  --assert "-1.#INF" = to string! -1.0 / 0.0
	--test-- "special-arithmetic-4"  --assert "1.#INF"  = to string! 0.0 / 0.0
	--test-- "special-arithmetic-9"  --assert "1.#NaN"  = to string! 1.#INF - 1.#INF
	--test-- "special-arithmetic-10" --assert "1.#NaN"  = to string! 1.#INF / 1.#INF
	--test-- "special-arithmetic-11" --assert "1.#NaN"  = to string! 0.0 * 1.#INF
	--test-- "special-arithmetic-12" --assert "1.#INF"  = to string! 1e308 + 1e308
===end-group===

===start-group=== "special value equality (NaNs and INF)"

	--test-- "special-equality-1"  --assert NaN? 1.#NaN
	--test-- "special-equality-2"  --assert not NaN? 1.23
	--test-- "special-equality-3"  --assert 1.#INF = 1.#INF
	--test-- "special-equality-4"  --assert not 1.#INF = 1.23
	--test-- "special-equality-5"  --assert 1.#INF > 1e308
	--test-- "special-equality-6"  --assert -1.#INF < -1e308
	--test-- "special-equality-7"  --assert -1.#INF = -1.#INF
	--test-- "special-equality-8"  --assert -1.#INF < 1.#INF
	--test-- "special-equality-9"  --assert -0.0 = 0.0

	; Issue #2001
	;--test-- "special-equality-10"  --assert 1.#NaN = 1.#NaN			= false
	;--test-- "special-equality-11"  --assert 1.#NaN <> 1.#NaN			= true
	;--test-- "special-equality-12"  --assert [1 1.#NaN] = [1 1.#NaN]	= false
	;--test-- "special-equality-13"  --assert 1.#INF = 1.#NaN			= false
	;--test-- "special-equality-14"  --assert 1.23 = 1.#NaN				= false
===end-group===

===start-group=== "other math functions"

	--test-- "log-2-1"			--assert 5.0 = log-2 32
	--test-- "log-10-1"			--assert 2.0 = log-10 100
	--test-- "log-e-1"			--assert 4.812184355372417 = log-e 123
	--test-- "exp-1"			--assert 2.6195173187490456e53 = exp 123
	--test-- "square-root-1"	--assert 2.0 = square-root 4

===end-group===

===start-group=== "float-add"
	--test-- "float-add 1"
		i: 0.0
		j: 1.0
		--assert strict-equal? 1.0 0.0 + 1.0
		--assert strict-equal? 1.0 add 0.0 1.0
		--assert strict-equal? 1.0 i + j
		--assert strict-equal? 1.0 add i j

	--test-- "float-add 2"
		i: 0.0
		j: -1.0
		--assert strict-equal? -1.0 0.0 + -1.0
		--assert strict-equal? -1.0 add 0.0 -1.0
		--assert strict-equal? -1.0 i + j
		--assert strict-equal? -1.0 add i j

	--test-- "float-add 3"
		i: 0.0
		j: 2.2250738585072014e-308
		--assert strict-equal? 2.2250738585072014e-308 0.0 + 2.2250738585072014e-308
		--assert strict-equal? 2.2250738585072014e-308 add 0.0 2.2250738585072014e-308
		--assert strict-equal? 2.2250738585072014e-308 i + j
		--assert strict-equal? 2.2250738585072014e-308 add i j

	--test-- "float-add 4"
		i: 0.0
		j: -2.2250738585072014e-308
		--assert strict-equal? -2.2250738585072014e-308 0.0 + -2.2250738585072014e-308
		--assert strict-equal? -2.2250738585072014e-308 add 0.0 -2.2250738585072014e-308
		--assert strict-equal? -2.2250738585072014e-308 i + j
		--assert strict-equal? -2.2250738585072014e-308 add i j

	--test-- "float-add 5"
		i: 0.0
		j: 1.7976931348623157e+308
		--assert strict-equal? 1.7976931348623157e+308 0.0 + 1.7976931348623157e+308
		--assert strict-equal? 1.7976931348623157e+308 add 0.0 1.7976931348623157e+308
		--assert strict-equal? 1.7976931348623157e+308 i + j
		--assert strict-equal? 1.7976931348623157e+308 add i j

	--test-- "float-add 6"
		i: 0.0
		j: -1.7976931348623157e+308
		--assert strict-equal? -1.7976931348623157e+308 0.0 + -1.7976931348623157e+308
		--assert strict-equal? -1.7976931348623157e+308 add 0.0 -1.7976931348623157e+308
		--assert strict-equal? -1.7976931348623157e+308 i + j
		--assert strict-equal? -1.7976931348623157e+308 add i j

	--test-- "float-add 7"
		i: 0.0
		j: 1.1
		--assert strict-equal? 1.1 0.0 + 1.1
		--assert strict-equal? 1.1 add 0.0 1.1
		--assert strict-equal? 1.1 i + j
		--assert strict-equal? 1.1 add i j

	--test-- "float-add 8"
		i: 0.0
		j: -1.1
		--assert strict-equal? -1.1 0.0 + -1.1
		--assert strict-equal? -1.1 add 0.0 -1.1
		--assert strict-equal? -1.1 i + j
		--assert strict-equal? -1.1 add i j

	--test-- "float-add 9"
		i: 0.0
		j: 1.7976931348623157e+308
		--assert strict-equal? 1.7976931348623157e+308 0.0 + 1.7976931348623157e+308
		--assert strict-equal? 1.7976931348623157e+308 add 0.0 1.7976931348623157e+308
		--assert strict-equal? 1.7976931348623157e+308 i + j
		--assert strict-equal? 1.7976931348623157e+308 add i j

	--test-- "float-add 10"
		i: 0.0
		j: -1.7976931348623157e+308
		--assert strict-equal? -1.7976931348623157e+308 0.0 + -1.7976931348623157e+308
		--assert strict-equal? -1.7976931348623157e+308 add 0.0 -1.7976931348623157e+308
		--assert strict-equal? -1.7976931348623157e+308 i + j
		--assert strict-equal? -1.7976931348623157e+308 add i j

	--test-- "float-add 11"
		i: 1.0
		j: -1.0
		--assert strict-equal? 0.0 1.0 + -1.0
		--assert strict-equal? 0.0 add 1.0 -1.0
		--assert strict-equal? 0.0 i + j
		--assert strict-equal? 0.0 add i j

	--test-- "float-add 12"
		i: 1.0
		j: 2.2250738585072014e-308
		--assert strict-equal? 1.0 1.0 + 2.2250738585072014e-308
		--assert strict-equal? 1.0 add 1.0 2.2250738585072014e-308
		--assert strict-equal? 1.0 i + j
		--assert strict-equal? 1.0 add i j

	--test-- "float-add 13"
		i: 1.0
		j: -2.2250738585072014e-308
		--assert strict-equal? 1.0 1.0 + -2.2250738585072014e-308
		--assert strict-equal? 1.0 add 1.0 -2.2250738585072014e-308
		--assert strict-equal? 1.0 i + j
		--assert strict-equal? 1.0 add i j

	--test-- "float-add 14"
		i: 1.0
		j: 1.7976931348623157e+308
		--assert strict-equal? 1.7976931348623157e+308 1.0 + 1.7976931348623157e+308
		--assert strict-equal? 1.7976931348623157e+308 add 1.0 1.7976931348623157e+308
		--assert strict-equal? 1.7976931348623157e+308 i + j
		--assert strict-equal? 1.7976931348623157e+308 add i j

	--test-- "float-add 15"
		i: 1.0
		j: -1.7976931348623157e+308
		--assert strict-equal? -1.7976931348623157e+308 1.0 + -1.7976931348623157e+308
		--assert strict-equal? -1.7976931348623157e+308 add 1.0 -1.7976931348623157e+308
		--assert strict-equal? -1.7976931348623157e+308 i + j
		--assert strict-equal? -1.7976931348623157e+308 add i j

	--test-- "float-add 16"
		i: 1.0
		j: 1.1
		--assert strict-equal? 2.1 1.0 + 1.1
		--assert strict-equal? 2.1 add 1.0 1.1
		--assert strict-equal? 2.1 i + j
		--assert strict-equal? 2.1 add i j

	--test-- "float-add 17"
		i: 1.0
		j: -1.1
		--assert strict-equal? -0.10000000000000009 1.0 + -1.1
		--assert strict-equal? -0.10000000000000009 add 1.0 -1.1
		--assert strict-equal? -0.10000000000000009 i + j
		--assert strict-equal? -0.10000000000000009 add i j

	--test-- "float-add 18"
		i: 1.0
		j: 1.7976931348623157e+308
		--assert strict-equal? 1.7976931348623157e+308 1.0 + 1.7976931348623157e+308
		--assert strict-equal? 1.7976931348623157e+308 add 1.0 1.7976931348623157e+308
		--assert strict-equal? 1.7976931348623157e+308 i + j
		--assert strict-equal? 1.7976931348623157e+308 add i j

	--test-- "float-add 19"
		i: 1.0
		j: -1.7976931348623157e+308
		--assert strict-equal? -1.7976931348623157e+308 1.0 + -1.7976931348623157e+308
		--assert strict-equal? -1.7976931348623157e+308 add 1.0 -1.7976931348623157e+308
		--assert strict-equal? -1.7976931348623157e+308 i + j
		--assert strict-equal? -1.7976931348623157e+308 add i j

	--test-- "float-add 20"
		i: -1.0
		j: 2.2250738585072014e-308
		--assert strict-equal? -1.0 -1.0 + 2.2250738585072014e-308
		--assert strict-equal? -1.0 add -1.0 2.2250738585072014e-308
		--assert strict-equal? -1.0 i + j
		--assert strict-equal? -1.0 add i j

	--test-- "float-add 21"
		i: -1.0
		j: -2.2250738585072014e-308
		--assert strict-equal? -1.0 -1.0 + -2.2250738585072014e-308
		--assert strict-equal? -1.0 add -1.0 -2.2250738585072014e-308
		--assert strict-equal? -1.0 i + j
		--assert strict-equal? -1.0 add i j

	--test-- "float-add 22"
		i: -1.0
		j: 1.7976931348623157e+308
		--assert strict-equal? 1.7976931348623157e+308 -1.0 + 1.7976931348623157e+308
		--assert strict-equal? 1.7976931348623157e+308 add -1.0 1.7976931348623157e+308
		--assert strict-equal? 1.7976931348623157e+308 i + j
		--assert strict-equal? 1.7976931348623157e+308 add i j

	--test-- "float-add 23"
		i: -1.0
		j: -1.7976931348623157e+308
		--assert strict-equal? -1.7976931348623157e+308 -1.0 + -1.7976931348623157e+308
		--assert strict-equal? -1.7976931348623157e+308 add -1.0 -1.7976931348623157e+308
		--assert strict-equal? -1.7976931348623157e+308 i + j
		--assert strict-equal? -1.7976931348623157e+308 add i j

	--test-- "float-add 24"
		i: -1.0
		j: 1.1
		--assert strict-equal? 0.10000000000000009 -1.0 + 1.1
		--assert strict-equal? 0.10000000000000009 add -1.0 1.1
		--assert strict-equal? 0.10000000000000009 i + j
		--assert strict-equal? 0.10000000000000009 add i j

	--test-- "float-add 25"
		i: -1.0
		j: -1.1
		--assert strict-equal? -2.1 -1.0 + -1.1
		--assert strict-equal? -2.1 add -1.0 -1.1
		--assert strict-equal? -2.1 i + j
		--assert strict-equal? -2.1 add i j

	--test-- "float-add 26"
		i: -1.0
		j: 1.7976931348623157e+308
		--assert strict-equal? 1.7976931348623157e+308 -1.0 + 1.7976931348623157e+308
		--assert strict-equal? 1.7976931348623157e+308 add -1.0 1.7976931348623157e+308
		--assert strict-equal? 1.7976931348623157e+308 i + j
		--assert strict-equal? 1.7976931348623157e+308 add i j

	--test-- "float-add 27"
		i: -1.0
		j: -1.7976931348623157e+308
		--assert strict-equal? -1.7976931348623157e+308 -1.0 + -1.7976931348623157e+308
		--assert strict-equal? -1.7976931348623157e+308 add -1.0 -1.7976931348623157e+308
		--assert strict-equal? -1.7976931348623157e+308 i + j
		--assert strict-equal? -1.7976931348623157e+308 add i j

	--test-- "float-add 28"
		i: 2.2250738585072014e-308
		j: -2.2250738585072014e-308
		--assert strict-equal? 0.0 2.2250738585072014e-308 + -2.2250738585072014e-308
		--assert strict-equal? 0.0 add 2.2250738585072014e-308 -2.2250738585072014e-308
		--assert strict-equal? 0.0 i + j
		--assert strict-equal? 0.0 add i j

	--test-- "float-add 29"
		i: 2.2250738585072014e-308
		j: 1.7976931348623157e+308
		--assert strict-equal? 1.7976931348623157e+308 2.2250738585072014e-308 + 1.7976931348623157e+308
		--assert strict-equal? 1.7976931348623157e+308 add 2.2250738585072014e-308 1.7976931348623157e+308
		--assert strict-equal? 1.7976931348623157e+308 i + j
		--assert strict-equal? 1.7976931348623157e+308 add i j

	--test-- "float-add 30"
		i: 2.2250738585072014e-308
		j: -1.7976931348623157e+308
		--assert strict-equal? -1.7976931348623157e+308 2.2250738585072014e-308 + -1.7976931348623157e+308
		--assert strict-equal? -1.7976931348623157e+308 add 2.2250738585072014e-308 -1.7976931348623157e+308
		--assert strict-equal? -1.7976931348623157e+308 i + j
		--assert strict-equal? -1.7976931348623157e+308 add i j

	--test-- "float-add 31"
		i: 2.2250738585072014e-308
		j: 1.1
		--assert strict-equal? 1.1 2.2250738585072014e-308 + 1.1
		--assert strict-equal? 1.1 add 2.2250738585072014e-308 1.1
		--assert strict-equal? 1.1 i + j
		--assert strict-equal? 1.1 add i j

	--test-- "float-add 32"
		i: 2.2250738585072014e-308
		j: -1.1
		--assert strict-equal? -1.1 2.2250738585072014e-308 + -1.1
		--assert strict-equal? -1.1 add 2.2250738585072014e-308 -1.1
		--assert strict-equal? -1.1 i + j
		--assert strict-equal? -1.1 add i j

	--test-- "float-add 33"
		i: 2.2250738585072014e-308
		j: 1.7976931348623157e+308
		--assert strict-equal? 1.7976931348623157e+308 2.2250738585072014e-308 + 1.7976931348623157e+308
		--assert strict-equal? 1.7976931348623157e+308 add 2.2250738585072014e-308 1.7976931348623157e+308
		--assert strict-equal? 1.7976931348623157e+308 i + j
		--assert strict-equal? 1.7976931348623157e+308 add i j

	--test-- "float-add 34"
		i: 2.2250738585072014e-308
		j: -1.7976931348623157e+308
		--assert strict-equal? -1.7976931348623157e+308 2.2250738585072014e-308 + -1.7976931348623157e+308
		--assert strict-equal? -1.7976931348623157e+308 add 2.2250738585072014e-308 -1.7976931348623157e+308
		--assert strict-equal? -1.7976931348623157e+308 i + j
		--assert strict-equal? -1.7976931348623157e+308 add i j

	--test-- "float-add 35"
		i: -2.2250738585072014e-308
		j: 1.7976931348623157e+308
		--assert strict-equal? 1.7976931348623157e+308 -2.2250738585072014e-308 + 1.7976931348623157e+308
		--assert strict-equal? 1.7976931348623157e+308 add -2.2250738585072014e-308 1.7976931348623157e+308
		--assert strict-equal? 1.7976931348623157e+308 i + j
		--assert strict-equal? 1.7976931348623157e+308 add i j

	--test-- "float-add 36"
		i: -2.2250738585072014e-308
		j: -1.7976931348623157e+308
		--assert strict-equal? -1.7976931348623157e+308 -2.2250738585072014e-308 + -1.7976931348623157e+308
		--assert strict-equal? -1.7976931348623157e+308 add -2.2250738585072014e-308 -1.7976931348623157e+308
		--assert strict-equal? -1.7976931348623157e+308 i + j
		--assert strict-equal? -1.7976931348623157e+308 add i j

	--test-- "float-add 37"
		i: -2.2250738585072014e-308
		j: 1.1
		--assert strict-equal? 1.1 -2.2250738585072014e-308 + 1.1
		--assert strict-equal? 1.1 add -2.2250738585072014e-308 1.1
		--assert strict-equal? 1.1 i + j
		--assert strict-equal? 1.1 add i j

	--test-- "float-add 38"
		i: -2.2250738585072014e-308
		j: -1.1
		--assert strict-equal? -1.1 -2.2250738585072014e-308 + -1.1
		--assert strict-equal? -1.1 add -2.2250738585072014e-308 -1.1
		--assert strict-equal? -1.1 i + j
		--assert strict-equal? -1.1 add i j

	--test-- "float-add 39"
		i: -2.2250738585072014e-308
		j: 1.7976931348623157e+308
		--assert strict-equal? 1.7976931348623157e+308 -2.2250738585072014e-308 + 1.7976931348623157e+308
		--assert strict-equal? 1.7976931348623157e+308 add -2.2250738585072014e-308 1.7976931348623157e+308
		--assert strict-equal? 1.7976931348623157e+308 i + j
		--assert strict-equal? 1.7976931348623157e+308 add i j

	--test-- "float-add 40"
		i: -2.2250738585072014e-308
		j: -1.7976931348623157e+308
		--assert strict-equal? -1.7976931348623157e+308 -2.2250738585072014e-308 + -1.7976931348623157e+308
		--assert strict-equal? -1.7976931348623157e+308 add -2.2250738585072014e-308 -1.7976931348623157e+308
		--assert strict-equal? -1.7976931348623157e+308 i + j
		--assert strict-equal? -1.7976931348623157e+308 add i j

	--test-- "float-add 41"
		i: 1.7976931348623157e+308
		j: -1.7976931348623157e+308
		--assert strict-equal? 0.0 1.7976931348623157e+308 + -1.7976931348623157e+308
		--assert strict-equal? 0.0 add 1.7976931348623157e+308 -1.7976931348623157e+308
		--assert strict-equal? 0.0 i + j
		--assert strict-equal? 0.0 add i j

	--test-- "float-add 42"
		i: 1.7976931348623157e+308
		j: 1.1
		--assert strict-equal? 1.7976931348623157e+308 1.7976931348623157e+308 + 1.1
		--assert strict-equal? 1.7976931348623157e+308 add 1.7976931348623157e+308 1.1
		--assert strict-equal? 1.7976931348623157e+308 i + j
		--assert strict-equal? 1.7976931348623157e+308 add i j

	--test-- "float-add 43"
		i: 1.7976931348623157e+308
		j: -1.1
		--assert strict-equal? 1.7976931348623157e+308 1.7976931348623157e+308 + -1.1
		--assert strict-equal? 1.7976931348623157e+308 add 1.7976931348623157e+308 -1.1
		--assert strict-equal? 1.7976931348623157e+308 i + j
		--assert strict-equal? 1.7976931348623157e+308 add i j

	--test-- "float-add 44"
		i: 1.7976931348623157e+308
		j: 1.7976931348623157e+308
		--assert strict-equal? 1.#INF 1.7976931348623157e+308 + 1.7976931348623157e+308
		--assert strict-equal? 1.#INF add 1.7976931348623157e+308 1.7976931348623157e+308
		--assert strict-equal? 1.#INF i + j
		--assert strict-equal? 1.#INF add i j

	--test-- "float-add 45"
		i: 1.7976931348623157e+308
		j: -1.7976931348623157e+308
		--assert strict-equal? 0.0 1.7976931348623157e+308 + -1.7976931348623157e+308
		--assert strict-equal? 0.0 add 1.7976931348623157e+308 -1.7976931348623157e+308
		--assert strict-equal? 0.0 i + j
		--assert strict-equal? 0.0 add i j

	--test-- "float-add 46"
		i: -1.7976931348623157e+308
		j: 1.1
		--assert strict-equal? -1.7976931348623157e+308 -1.7976931348623157e+308 + 1.1
		--assert strict-equal? -1.7976931348623157e+308 add -1.7976931348623157e+308 1.1
		--assert strict-equal? -1.7976931348623157e+308 i + j
		--assert strict-equal? -1.7976931348623157e+308 add i j

	--test-- "float-add 47"
		i: -1.7976931348623157e+308
		j: -1.1
		--assert strict-equal? -1.7976931348623157e+308 -1.7976931348623157e+308 + -1.1
		--assert strict-equal? -1.7976931348623157e+308 add -1.7976931348623157e+308 -1.1
		--assert strict-equal? -1.7976931348623157e+308 i + j
		--assert strict-equal? -1.7976931348623157e+308 add i j

	--test-- "float-add 48"
		i: -1.7976931348623157e+308
		j: 1.7976931348623157e+308
		--assert strict-equal? 0.0 -1.7976931348623157e+308 + 1.7976931348623157e+308
		--assert strict-equal? 0.0 add -1.7976931348623157e+308 1.7976931348623157e+308
		--assert strict-equal? 0.0 i + j
		--assert strict-equal? 0.0 add i j

	--test-- "float-add 49"
		i: -1.7976931348623157e+308
		j: -1.7976931348623157e+308
		--assert strict-equal? -1.#INF -1.7976931348623157e+308 + -1.7976931348623157e+308
		--assert strict-equal? -1.#INF add -1.7976931348623157e+308 -1.7976931348623157e+308
		--assert strict-equal? -1.#INF i + j
		--assert strict-equal? -1.#INF add i j

	--test-- "float-add 50"
		i: 1.1
		j: -1.1
		--assert strict-equal? 0.0 1.1 + -1.1
		--assert strict-equal? 0.0 add 1.1 -1.1
		--assert strict-equal? 0.0 i + j
		--assert strict-equal? 0.0 add i j

	--test-- "float-add 51"
		i: 1.1
		j: 1.7976931348623157e+308
		--assert strict-equal? 1.7976931348623157e+308 1.1 + 1.7976931348623157e+308
		--assert strict-equal? 1.7976931348623157e+308 add 1.1 1.7976931348623157e+308
		--assert strict-equal? 1.7976931348623157e+308 i + j
		--assert strict-equal? 1.7976931348623157e+308 add i j

	--test-- "float-add 52"
		i: 1.1
		j: -1.7976931348623157e+308
		--assert strict-equal? -1.7976931348623157e+308 1.1 + -1.7976931348623157e+308
		--assert strict-equal? -1.7976931348623157e+308 add 1.1 -1.7976931348623157e+308
		--assert strict-equal? -1.7976931348623157e+308 i + j
		--assert strict-equal? -1.7976931348623157e+308 add i j

	--test-- "float-add 53"
		i: -1.1
		j: 1.7976931348623157e+308
		--assert strict-equal? 1.7976931348623157e+308 -1.1 + 1.7976931348623157e+308
		--assert strict-equal? 1.7976931348623157e+308 add -1.1 1.7976931348623157e+308
		--assert strict-equal? 1.7976931348623157e+308 i + j
		--assert strict-equal? 1.7976931348623157e+308 add i j

	--test-- "float-add 54"
		i: -1.1
		j: -1.7976931348623157e+308
		--assert strict-equal? -1.7976931348623157e+308 -1.1 + -1.7976931348623157e+308
		--assert strict-equal? -1.7976931348623157e+308 add -1.1 -1.7976931348623157e+308
		--assert strict-equal? -1.7976931348623157e+308 i + j
		--assert strict-equal? -1.7976931348623157e+308 add i j

	--test-- "float-add 55"
		i: 1.7976931348623157e+308
		j: -1.7976931348623157e+308
		--assert strict-equal? 0.0 1.7976931348623157e+308 + -1.7976931348623157e+308
		--assert strict-equal? 0.0 add 1.7976931348623157e+308 -1.7976931348623157e+308
		--assert strict-equal? 0.0 i + j
		--assert strict-equal? 0.0 add i j

	--test-- "float-add 56"
		i: 0.0
		j: 0.0
		--assert strict-equal? 0.0 0.0 + 0.0
		--assert strict-equal? 0.0 add 0.0 0.0
		--assert strict-equal? 0.0 i + j
		--assert strict-equal? 0.0 add i j

	--test-- "float-add 57"
		i: 1.0
		j: 1.0
		--assert strict-equal? 2.0 1.0 + 1.0
		--assert strict-equal? 2.0 add 1.0 1.0
		--assert strict-equal? 2.0 i + j
		--assert strict-equal? 2.0 add i j

	--test-- "float-add 58"
		i: -1.0
		j: -1.0
		--assert strict-equal? -2.0 -1.0 + -1.0
		--assert strict-equal? -2.0 add -1.0 -1.0
		--assert strict-equal? -2.0 i + j
		--assert strict-equal? -2.0 add i j

	--test-- "float-add 59"
		i: 2.2250738585072014e-308
		j: 2.2250738585072014e-308
		--assert strict-equal? 4.450147717014403e-308 2.2250738585072014e-308 + 2.2250738585072014e-308
		--assert strict-equal? 4.450147717014403e-308 add 2.2250738585072014e-308 2.2250738585072014e-308
		--assert strict-equal? 4.450147717014403e-308 i + j
		--assert strict-equal? 4.450147717014403e-308 add i j

	--test-- "float-add 60"
		i: -2.2250738585072014e-308
		j: -2.2250738585072014e-308
		--assert strict-equal? -4.450147717014403e-308 -2.2250738585072014e-308 + -2.2250738585072014e-308
		--assert strict-equal? -4.450147717014403e-308 add -2.2250738585072014e-308 -2.2250738585072014e-308
		--assert strict-equal? -4.450147717014403e-308 i + j
		--assert strict-equal? -4.450147717014403e-308 add i j

	--test-- "float-add 61"
		i: 1.7976931348623157e+308
		j: 1.7976931348623157e+308
		--assert strict-equal? 1.#INF 1.7976931348623157e+308 + 1.7976931348623157e+308
		--assert strict-equal? 1.#INF add 1.7976931348623157e+308 1.7976931348623157e+308
		--assert strict-equal? 1.#INF i + j
		--assert strict-equal? 1.#INF add i j

	--test-- "float-add 62"
		i: -1.7976931348623157e+308
		j: -1.7976931348623157e+308
		--assert strict-equal? -1.#INF -1.7976931348623157e+308 + -1.7976931348623157e+308
		--assert strict-equal? -1.#INF add -1.7976931348623157e+308 -1.7976931348623157e+308
		--assert strict-equal? -1.#INF i + j
		--assert strict-equal? -1.#INF add i j

	--test-- "float-add 63"
		i: 1.1
		j: 1.1
		--assert strict-equal? 2.2 1.1 + 1.1
		--assert strict-equal? 2.2 add 1.1 1.1
		--assert strict-equal? 2.2 i + j
		--assert strict-equal? 2.2 add i j

	--test-- "float-add 64"
		i: -1.1
		j: -1.1
		--assert strict-equal? -2.2 -1.1 + -1.1
		--assert strict-equal? -2.2 add -1.1 -1.1
		--assert strict-equal? -2.2 i + j
		--assert strict-equal? -2.2 add i j

	--test-- "float-add 65"
		i: 1.7976931348623157e+308
		j: 1.7976931348623157e+308
		--assert strict-equal? 1.#INF 1.7976931348623157e+308 + 1.7976931348623157e+308
		--assert strict-equal? 1.#INF add 1.7976931348623157e+308 1.7976931348623157e+308
		--assert strict-equal? 1.#INF i + j
		--assert strict-equal? 1.#INF add i j

	--test-- "float-add 66"
		i: -1.7976931348623157e+308
		j: -1.7976931348623157e+308
		--assert strict-equal? -1.#INF -1.7976931348623157e+308 + -1.7976931348623157e+308
		--assert strict-equal? -1.#INF add -1.7976931348623157e+308 -1.7976931348623157e+308
		--assert strict-equal? -1.#INF i + j
		--assert strict-equal? -1.#INF add i j

===end-group===
===start-group=== "float-subtract"
	--test-- "float-subtract 1"
		i: 0.0
		j: 1.0
		--assert strict-equal? -1.0 0.0 - 1.0
		--assert strict-equal? -1.0 subtract 0.0 1.0
		--assert strict-equal? -1.0 i - j
		--assert strict-equal? -1.0 subtract i j

	--test-- "float-subtract 2"
		i: 0.0
		j: -1.0
		--assert strict-equal? 1.0 0.0 - -1.0
		--assert strict-equal? 1.0 subtract 0.0 -1.0
		--assert strict-equal? 1.0 i - j
		--assert strict-equal? 1.0 subtract i j

	--test-- "float-subtract 3"
		i: 0.0
		j: 2.2250738585072014e-308
		--assert strict-equal? -2.2250738585072014e-308 0.0 - 2.2250738585072014e-308
		--assert strict-equal? -2.2250738585072014e-308 subtract 0.0 2.2250738585072014e-308
		--assert strict-equal? -2.2250738585072014e-308 i - j
		--assert strict-equal? -2.2250738585072014e-308 subtract i j

	--test-- "float-subtract 4"
		i: 0.0
		j: -2.2250738585072014e-308
		--assert strict-equal? 2.2250738585072014e-308 0.0 - -2.2250738585072014e-308
		--assert strict-equal? 2.2250738585072014e-308 subtract 0.0 -2.2250738585072014e-308
		--assert strict-equal? 2.2250738585072014e-308 i - j
		--assert strict-equal? 2.2250738585072014e-308 subtract i j

	--test-- "float-subtract 5"
		i: 0.0
		j: 1.7976931348623157e+308
		--assert strict-equal? -1.7976931348623157e+308 0.0 - 1.7976931348623157e+308
		--assert strict-equal? -1.7976931348623157e+308 subtract 0.0 1.7976931348623157e+308
		--assert strict-equal? -1.7976931348623157e+308 i - j
		--assert strict-equal? -1.7976931348623157e+308 subtract i j

	--test-- "float-subtract 6"
		i: 0.0
		j: -1.7976931348623157e+308
		--assert strict-equal? 1.7976931348623157e+308 0.0 - -1.7976931348623157e+308
		--assert strict-equal? 1.7976931348623157e+308 subtract 0.0 -1.7976931348623157e+308
		--assert strict-equal? 1.7976931348623157e+308 i - j
		--assert strict-equal? 1.7976931348623157e+308 subtract i j

	--test-- "float-subtract 7"
		i: 0.0
		j: 1.1
		--assert strict-equal? -1.1 0.0 - 1.1
		--assert strict-equal? -1.1 subtract 0.0 1.1
		--assert strict-equal? -1.1 i - j
		--assert strict-equal? -1.1 subtract i j

	--test-- "float-subtract 8"
		i: 0.0
		j: -1.1
		--assert strict-equal? 1.1 0.0 - -1.1
		--assert strict-equal? 1.1 subtract 0.0 -1.1
		--assert strict-equal? 1.1 i - j
		--assert strict-equal? 1.1 subtract i j

	--test-- "float-subtract 9"
		i: 0.0
		j: 1.7976931348623157e+308
		--assert strict-equal? -1.7976931348623157e+308 0.0 - 1.7976931348623157e+308
		--assert strict-equal? -1.7976931348623157e+308 subtract 0.0 1.7976931348623157e+308
		--assert strict-equal? -1.7976931348623157e+308 i - j
		--assert strict-equal? -1.7976931348623157e+308 subtract i j

	--test-- "float-subtract 10"
		i: 0.0
		j: -1.7976931348623157e+308
		--assert strict-equal? 1.7976931348623157e+308 0.0 - -1.7976931348623157e+308
		--assert strict-equal? 1.7976931348623157e+308 subtract 0.0 -1.7976931348623157e+308
		--assert strict-equal? 1.7976931348623157e+308 i - j
		--assert strict-equal? 1.7976931348623157e+308 subtract i j

	--test-- "float-subtract 11"
		i: 1.0
		j: 0.0
		--assert strict-equal? 1.0 1.0 - 0.0
		--assert strict-equal? 1.0 subtract 1.0 0.0
		--assert strict-equal? 1.0 i - j
		--assert strict-equal? 1.0 subtract i j

	--test-- "float-subtract 12"
		i: 1.0
		j: -1.0
		--assert strict-equal? 2.0 1.0 - -1.0
		--assert strict-equal? 2.0 subtract 1.0 -1.0
		--assert strict-equal? 2.0 i - j
		--assert strict-equal? 2.0 subtract i j

	--test-- "float-subtract 13"
		i: 1.0
		j: 2.2250738585072014e-308
		--assert strict-equal? 1.0 1.0 - 2.2250738585072014e-308
		--assert strict-equal? 1.0 subtract 1.0 2.2250738585072014e-308
		--assert strict-equal? 1.0 i - j
		--assert strict-equal? 1.0 subtract i j

	--test-- "float-subtract 14"
		i: 1.0
		j: -2.2250738585072014e-308
		--assert strict-equal? 1.0 1.0 - -2.2250738585072014e-308
		--assert strict-equal? 1.0 subtract 1.0 -2.2250738585072014e-308
		--assert strict-equal? 1.0 i - j
		--assert strict-equal? 1.0 subtract i j

	--test-- "float-subtract 15"
		i: 1.0
		j: 1.7976931348623157e+308
		--assert strict-equal? -1.7976931348623157e+308 1.0 - 1.7976931348623157e+308
		--assert strict-equal? -1.7976931348623157e+308 subtract 1.0 1.7976931348623157e+308
		--assert strict-equal? -1.7976931348623157e+308 i - j
		--assert strict-equal? -1.7976931348623157e+308 subtract i j

	--test-- "float-subtract 16"
		i: 1.0
		j: -1.7976931348623157e+308
		--assert strict-equal? 1.7976931348623157e+308 1.0 - -1.7976931348623157e+308
		--assert strict-equal? 1.7976931348623157e+308 subtract 1.0 -1.7976931348623157e+308
		--assert strict-equal? 1.7976931348623157e+308 i - j
		--assert strict-equal? 1.7976931348623157e+308 subtract i j

	--test-- "float-subtract 17"
		i: 1.0
		j: 1.1
		--assert strict-equal? -0.10000000000000009 1.0 - 1.1
		--assert strict-equal? -0.10000000000000009 subtract 1.0 1.1
		--assert strict-equal? -0.10000000000000009 i - j
		--assert strict-equal? -0.10000000000000009 subtract i j

	--test-- "float-subtract 18"
		i: 1.0
		j: -1.1
		--assert strict-equal? 2.1 1.0 - -1.1
		--assert strict-equal? 2.1 subtract 1.0 -1.1
		--assert strict-equal? 2.1 i - j
		--assert strict-equal? 2.1 subtract i j

	--test-- "float-subtract 19"
		i: 1.0
		j: 1.7976931348623157e+308
		--assert strict-equal? -1.7976931348623157e+308 1.0 - 1.7976931348623157e+308
		--assert strict-equal? -1.7976931348623157e+308 subtract 1.0 1.7976931348623157e+308
		--assert strict-equal? -1.7976931348623157e+308 i - j
		--assert strict-equal? -1.7976931348623157e+308 subtract i j

	--test-- "float-subtract 20"
		i: 1.0
		j: -1.7976931348623157e+308
		--assert strict-equal? 1.7976931348623157e+308 1.0 - -1.7976931348623157e+308
		--assert strict-equal? 1.7976931348623157e+308 subtract 1.0 -1.7976931348623157e+308
		--assert strict-equal? 1.7976931348623157e+308 i - j
		--assert strict-equal? 1.7976931348623157e+308 subtract i j

	--test-- "float-subtract 21"
		i: -1.0
		j: 0.0
		--assert strict-equal? -1.0 -1.0 - 0.0
		--assert strict-equal? -1.0 subtract -1.0 0.0
		--assert strict-equal? -1.0 i - j
		--assert strict-equal? -1.0 subtract i j

	--test-- "float-subtract 22"
		i: -1.0
		j: 1.0
		--assert strict-equal? -2.0 -1.0 - 1.0
		--assert strict-equal? -2.0 subtract -1.0 1.0
		--assert strict-equal? -2.0 i - j
		--assert strict-equal? -2.0 subtract i j

	--test-- "float-subtract 23"
		i: -1.0
		j: 2.2250738585072014e-308
		--assert strict-equal? -1.0 -1.0 - 2.2250738585072014e-308
		--assert strict-equal? -1.0 subtract -1.0 2.2250738585072014e-308
		--assert strict-equal? -1.0 i - j
		--assert strict-equal? -1.0 subtract i j

	--test-- "float-subtract 24"
		i: -1.0
		j: -2.2250738585072014e-308
		--assert strict-equal? -1.0 -1.0 - -2.2250738585072014e-308
		--assert strict-equal? -1.0 subtract -1.0 -2.2250738585072014e-308
		--assert strict-equal? -1.0 i - j
		--assert strict-equal? -1.0 subtract i j

	--test-- "float-subtract 25"
		i: -1.0
		j: 1.7976931348623157e+308
		--assert strict-equal? -1.7976931348623157e+308 -1.0 - 1.7976931348623157e+308
		--assert strict-equal? -1.7976931348623157e+308 subtract -1.0 1.7976931348623157e+308
		--assert strict-equal? -1.7976931348623157e+308 i - j
		--assert strict-equal? -1.7976931348623157e+308 subtract i j

	--test-- "float-subtract 26"
		i: -1.0
		j: -1.7976931348623157e+308
		--assert strict-equal? 1.7976931348623157e+308 -1.0 - -1.7976931348623157e+308
		--assert strict-equal? 1.7976931348623157e+308 subtract -1.0 -1.7976931348623157e+308
		--assert strict-equal? 1.7976931348623157e+308 i - j
		--assert strict-equal? 1.7976931348623157e+308 subtract i j

	--test-- "float-subtract 27"
		i: -1.0
		j: 1.1
		--assert strict-equal? -2.1 -1.0 - 1.1
		--assert strict-equal? -2.1 subtract -1.0 1.1
		--assert strict-equal? -2.1 i - j
		--assert strict-equal? -2.1 subtract i j

	--test-- "float-subtract 28"
		i: -1.0
		j: -1.1
		--assert strict-equal? 0.10000000000000009 -1.0 - -1.1
		--assert strict-equal? 0.10000000000000009 subtract -1.0 -1.1
		--assert strict-equal? 0.10000000000000009 i - j
		--assert strict-equal? 0.10000000000000009 subtract i j

	--test-- "float-subtract 29"
		i: -1.0
		j: 1.7976931348623157e+308
		--assert strict-equal? -1.7976931348623157e+308 -1.0 - 1.7976931348623157e+308
		--assert strict-equal? -1.7976931348623157e+308 subtract -1.0 1.7976931348623157e+308
		--assert strict-equal? -1.7976931348623157e+308 i - j
		--assert strict-equal? -1.7976931348623157e+308 subtract i j

	--test-- "float-subtract 30"
		i: -1.0
		j: -1.7976931348623157e+308
		--assert strict-equal? 1.7976931348623157e+308 -1.0 - -1.7976931348623157e+308
		--assert strict-equal? 1.7976931348623157e+308 subtract -1.0 -1.7976931348623157e+308
		--assert strict-equal? 1.7976931348623157e+308 i - j
		--assert strict-equal? 1.7976931348623157e+308 subtract i j

	--test-- "float-subtract 31"
		i: 2.2250738585072014e-308
		j: 0.0
		--assert strict-equal? 2.2250738585072014e-308 2.2250738585072014e-308 - 0.0
		--assert strict-equal? 2.2250738585072014e-308 subtract 2.2250738585072014e-308 0.0
		--assert strict-equal? 2.2250738585072014e-308 i - j
		--assert strict-equal? 2.2250738585072014e-308 subtract i j

	--test-- "float-subtract 32"
		i: 2.2250738585072014e-308
		j: 1.0
		--assert strict-equal? -1.0 2.2250738585072014e-308 - 1.0
		--assert strict-equal? -1.0 subtract 2.2250738585072014e-308 1.0
		--assert strict-equal? -1.0 i - j
		--assert strict-equal? -1.0 subtract i j

	--test-- "float-subtract 33"
		i: 2.2250738585072014e-308
		j: -1.0
		--assert strict-equal? 1.0 2.2250738585072014e-308 - -1.0
		--assert strict-equal? 1.0 subtract 2.2250738585072014e-308 -1.0
		--assert strict-equal? 1.0 i - j
		--assert strict-equal? 1.0 subtract i j

	--test-- "float-subtract 34"
		i: 2.2250738585072014e-308
		j: -2.2250738585072014e-308
		--assert strict-equal? 4.450147717014403e-308 2.2250738585072014e-308 - -2.2250738585072014e-308
		--assert strict-equal? 4.450147717014403e-308 subtract 2.2250738585072014e-308 -2.2250738585072014e-308
		--assert strict-equal? 4.450147717014403e-308 i - j
		--assert strict-equal? 4.450147717014403e-308 subtract i j

	--test-- "float-subtract 35"
		i: 2.2250738585072014e-308
		j: 1.7976931348623157e+308
		--assert strict-equal? -1.7976931348623157e+308 2.2250738585072014e-308 - 1.7976931348623157e+308
		--assert strict-equal? -1.7976931348623157e+308 subtract 2.2250738585072014e-308 1.7976931348623157e+308
		--assert strict-equal? -1.7976931348623157e+308 i - j
		--assert strict-equal? -1.7976931348623157e+308 subtract i j

	--test-- "float-subtract 36"
		i: 2.2250738585072014e-308
		j: -1.7976931348623157e+308
		--assert strict-equal? 1.7976931348623157e+308 2.2250738585072014e-308 - -1.7976931348623157e+308
		--assert strict-equal? 1.7976931348623157e+308 subtract 2.2250738585072014e-308 -1.7976931348623157e+308
		--assert strict-equal? 1.7976931348623157e+308 i - j
		--assert strict-equal? 1.7976931348623157e+308 subtract i j

	--test-- "float-subtract 37"
		i: 2.2250738585072014e-308
		j: 1.1
		--assert strict-equal? -1.1 2.2250738585072014e-308 - 1.1
		--assert strict-equal? -1.1 subtract 2.2250738585072014e-308 1.1
		--assert strict-equal? -1.1 i - j
		--assert strict-equal? -1.1 subtract i j

	--test-- "float-subtract 38"
		i: 2.2250738585072014e-308
		j: -1.1
		--assert strict-equal? 1.1 2.2250738585072014e-308 - -1.1
		--assert strict-equal? 1.1 subtract 2.2250738585072014e-308 -1.1
		--assert strict-equal? 1.1 i - j
		--assert strict-equal? 1.1 subtract i j

	--test-- "float-subtract 39"
		i: 2.2250738585072014e-308
		j: 1.7976931348623157e+308
		--assert strict-equal? -1.7976931348623157e+308 2.2250738585072014e-308 - 1.7976931348623157e+308
		--assert strict-equal? -1.7976931348623157e+308 subtract 2.2250738585072014e-308 1.7976931348623157e+308
		--assert strict-equal? -1.7976931348623157e+308 i - j
		--assert strict-equal? -1.7976931348623157e+308 subtract i j

	--test-- "float-subtract 40"
		i: 2.2250738585072014e-308
		j: -1.7976931348623157e+308
		--assert strict-equal? 1.7976931348623157e+308 2.2250738585072014e-308 - -1.7976931348623157e+308
		--assert strict-equal? 1.7976931348623157e+308 subtract 2.2250738585072014e-308 -1.7976931348623157e+308
		--assert strict-equal? 1.7976931348623157e+308 i - j
		--assert strict-equal? 1.7976931348623157e+308 subtract i j

	--test-- "float-subtract 41"
		i: -2.2250738585072014e-308
		j: 0.0
		--assert strict-equal? -2.2250738585072014e-308 -2.2250738585072014e-308 - 0.0
		--assert strict-equal? -2.2250738585072014e-308 subtract -2.2250738585072014e-308 0.0
		--assert strict-equal? -2.2250738585072014e-308 i - j
		--assert strict-equal? -2.2250738585072014e-308 subtract i j

	--test-- "float-subtract 42"
		i: -2.2250738585072014e-308
		j: 1.0
		--assert strict-equal? -1.0 -2.2250738585072014e-308 - 1.0
		--assert strict-equal? -1.0 subtract -2.2250738585072014e-308 1.0
		--assert strict-equal? -1.0 i - j
		--assert strict-equal? -1.0 subtract i j

	--test-- "float-subtract 43"
		i: -2.2250738585072014e-308
		j: -1.0
		--assert strict-equal? 1.0 -2.2250738585072014e-308 - -1.0
		--assert strict-equal? 1.0 subtract -2.2250738585072014e-308 -1.0
		--assert strict-equal? 1.0 i - j
		--assert strict-equal? 1.0 subtract i j

	--test-- "float-subtract 44"
		i: -2.2250738585072014e-308
		j: 2.2250738585072014e-308
		--assert strict-equal? -4.450147717014403e-308 -2.2250738585072014e-308 - 2.2250738585072014e-308
		--assert strict-equal? -4.450147717014403e-308 subtract -2.2250738585072014e-308 2.2250738585072014e-308
		--assert strict-equal? -4.450147717014403e-308 i - j
		--assert strict-equal? -4.450147717014403e-308 subtract i j

	--test-- "float-subtract 45"
		i: -2.2250738585072014e-308
		j: 1.7976931348623157e+308
		--assert strict-equal? -1.7976931348623157e+308 -2.2250738585072014e-308 - 1.7976931348623157e+308
		--assert strict-equal? -1.7976931348623157e+308 subtract -2.2250738585072014e-308 1.7976931348623157e+308
		--assert strict-equal? -1.7976931348623157e+308 i - j
		--assert strict-equal? -1.7976931348623157e+308 subtract i j

	--test-- "float-subtract 46"
		i: -2.2250738585072014e-308
		j: -1.7976931348623157e+308
		--assert strict-equal? 1.7976931348623157e+308 -2.2250738585072014e-308 - -1.7976931348623157e+308
		--assert strict-equal? 1.7976931348623157e+308 subtract -2.2250738585072014e-308 -1.7976931348623157e+308
		--assert strict-equal? 1.7976931348623157e+308 i - j
		--assert strict-equal? 1.7976931348623157e+308 subtract i j

	--test-- "float-subtract 47"
		i: -2.2250738585072014e-308
		j: 1.1
		--assert strict-equal? -1.1 -2.2250738585072014e-308 - 1.1
		--assert strict-equal? -1.1 subtract -2.2250738585072014e-308 1.1
		--assert strict-equal? -1.1 i - j
		--assert strict-equal? -1.1 subtract i j

	--test-- "float-subtract 48"
		i: -2.2250738585072014e-308
		j: -1.1
		--assert strict-equal? 1.1 -2.2250738585072014e-308 - -1.1
		--assert strict-equal? 1.1 subtract -2.2250738585072014e-308 -1.1
		--assert strict-equal? 1.1 i - j
		--assert strict-equal? 1.1 subtract i j

	--test-- "float-subtract 49"
		i: -2.2250738585072014e-308
		j: 1.7976931348623157e+308
		--assert strict-equal? -1.7976931348623157e+308 -2.2250738585072014e-308 - 1.7976931348623157e+308
		--assert strict-equal? -1.7976931348623157e+308 subtract -2.2250738585072014e-308 1.7976931348623157e+308
		--assert strict-equal? -1.7976931348623157e+308 i - j
		--assert strict-equal? -1.7976931348623157e+308 subtract i j

	--test-- "float-subtract 50"
		i: -2.2250738585072014e-308
		j: -1.7976931348623157e+308
		--assert strict-equal? 1.7976931348623157e+308 -2.2250738585072014e-308 - -1.7976931348623157e+308
		--assert strict-equal? 1.7976931348623157e+308 subtract -2.2250738585072014e-308 -1.7976931348623157e+308
		--assert strict-equal? 1.7976931348623157e+308 i - j
		--assert strict-equal? 1.7976931348623157e+308 subtract i j

	--test-- "float-subtract 51"
		i: 1.7976931348623157e+308
		j: 0.0
		--assert strict-equal? 1.7976931348623157e+308 1.7976931348623157e+308 - 0.0
		--assert strict-equal? 1.7976931348623157e+308 subtract 1.7976931348623157e+308 0.0
		--assert strict-equal? 1.7976931348623157e+308 i - j
		--assert strict-equal? 1.7976931348623157e+308 subtract i j

	--test-- "float-subtract 52"
		i: 1.7976931348623157e+308
		j: 1.0
		--assert strict-equal? 1.7976931348623157e+308 1.7976931348623157e+308 - 1.0
		--assert strict-equal? 1.7976931348623157e+308 subtract 1.7976931348623157e+308 1.0
		--assert strict-equal? 1.7976931348623157e+308 i - j
		--assert strict-equal? 1.7976931348623157e+308 subtract i j

	--test-- "float-subtract 53"
		i: 1.7976931348623157e+308
		j: -1.0
		--assert strict-equal? 1.7976931348623157e+308 1.7976931348623157e+308 - -1.0
		--assert strict-equal? 1.7976931348623157e+308 subtract 1.7976931348623157e+308 -1.0
		--assert strict-equal? 1.7976931348623157e+308 i - j
		--assert strict-equal? 1.7976931348623157e+308 subtract i j

	--test-- "float-subtract 54"
		i: 1.7976931348623157e+308
		j: 2.2250738585072014e-308
		--assert strict-equal? 1.7976931348623157e+308 1.7976931348623157e+308 - 2.2250738585072014e-308
		--assert strict-equal? 1.7976931348623157e+308 subtract 1.7976931348623157e+308 2.2250738585072014e-308
		--assert strict-equal? 1.7976931348623157e+308 i - j
		--assert strict-equal? 1.7976931348623157e+308 subtract i j

	--test-- "float-subtract 55"
		i: 1.7976931348623157e+308
		j: -2.2250738585072014e-308
		--assert strict-equal? 1.7976931348623157e+308 1.7976931348623157e+308 - -2.2250738585072014e-308
		--assert strict-equal? 1.7976931348623157e+308 subtract 1.7976931348623157e+308 -2.2250738585072014e-308
		--assert strict-equal? 1.7976931348623157e+308 i - j
		--assert strict-equal? 1.7976931348623157e+308 subtract i j

	--test-- "float-subtract 56"
		i: 1.7976931348623157e+308
		j: -1.7976931348623157e+308
		--assert strict-equal? 1.#INF 1.7976931348623157e+308 - -1.7976931348623157e+308
		--assert strict-equal? 1.#INF subtract 1.7976931348623157e+308 -1.7976931348623157e+308
		--assert strict-equal? 1.#INF i - j
		--assert strict-equal? 1.#INF subtract i j

	--test-- "float-subtract 57"
		i: 1.7976931348623157e+308
		j: 1.1
		--assert strict-equal? 1.7976931348623157e+308 1.7976931348623157e+308 - 1.1
		--assert strict-equal? 1.7976931348623157e+308 subtract 1.7976931348623157e+308 1.1
		--assert strict-equal? 1.7976931348623157e+308 i - j
		--assert strict-equal? 1.7976931348623157e+308 subtract i j

	--test-- "float-subtract 58"
		i: 1.7976931348623157e+308
		j: -1.1
		--assert strict-equal? 1.7976931348623157e+308 1.7976931348623157e+308 - -1.1
		--assert strict-equal? 1.7976931348623157e+308 subtract 1.7976931348623157e+308 -1.1
		--assert strict-equal? 1.7976931348623157e+308 i - j
		--assert strict-equal? 1.7976931348623157e+308 subtract i j

	--test-- "float-subtract 59"
		i: 1.7976931348623157e+308
		j: 1.7976931348623157e+308
		--assert strict-equal? 0.0 1.7976931348623157e+308 - 1.7976931348623157e+308
		--assert strict-equal? 0.0 subtract 1.7976931348623157e+308 1.7976931348623157e+308
		--assert strict-equal? 0.0 i - j
		--assert strict-equal? 0.0 subtract i j

	--test-- "float-subtract 60"
		i: 1.7976931348623157e+308
		j: -1.7976931348623157e+308
		--assert strict-equal? 1.#INF 1.7976931348623157e+308 - -1.7976931348623157e+308
		--assert strict-equal? 1.#INF subtract 1.7976931348623157e+308 -1.7976931348623157e+308
		--assert strict-equal? 1.#INF i - j
		--assert strict-equal? 1.#INF subtract i j

	--test-- "float-subtract 61"
		i: -1.7976931348623157e+308
		j: 0.0
		--assert strict-equal? -1.7976931348623157e+308 -1.7976931348623157e+308 - 0.0
		--assert strict-equal? -1.7976931348623157e+308 subtract -1.7976931348623157e+308 0.0
		--assert strict-equal? -1.7976931348623157e+308 i - j
		--assert strict-equal? -1.7976931348623157e+308 subtract i j

	--test-- "float-subtract 62"
		i: -1.7976931348623157e+308
		j: 1.0
		--assert strict-equal? -1.7976931348623157e+308 -1.7976931348623157e+308 - 1.0
		--assert strict-equal? -1.7976931348623157e+308 subtract -1.7976931348623157e+308 1.0
		--assert strict-equal? -1.7976931348623157e+308 i - j
		--assert strict-equal? -1.7976931348623157e+308 subtract i j

	--test-- "float-subtract 63"
		i: -1.7976931348623157e+308
		j: -1.0
		--assert strict-equal? -1.7976931348623157e+308 -1.7976931348623157e+308 - -1.0
		--assert strict-equal? -1.7976931348623157e+308 subtract -1.7976931348623157e+308 -1.0
		--assert strict-equal? -1.7976931348623157e+308 i - j
		--assert strict-equal? -1.7976931348623157e+308 subtract i j

	--test-- "float-subtract 64"
		i: -1.7976931348623157e+308
		j: 2.2250738585072014e-308
		--assert strict-equal? -1.7976931348623157e+308 -1.7976931348623157e+308 - 2.2250738585072014e-308
		--assert strict-equal? -1.7976931348623157e+308 subtract -1.7976931348623157e+308 2.2250738585072014e-308
		--assert strict-equal? -1.7976931348623157e+308 i - j
		--assert strict-equal? -1.7976931348623157e+308 subtract i j

	--test-- "float-subtract 65"
		i: -1.7976931348623157e+308
		j: -2.2250738585072014e-308
		--assert strict-equal? -1.7976931348623157e+308 -1.7976931348623157e+308 - -2.2250738585072014e-308
		--assert strict-equal? -1.7976931348623157e+308 subtract -1.7976931348623157e+308 -2.2250738585072014e-308
		--assert strict-equal? -1.7976931348623157e+308 i - j
		--assert strict-equal? -1.7976931348623157e+308 subtract i j

	--test-- "float-subtract 66"
		i: -1.7976931348623157e+308
		j: 1.7976931348623157e+308
		--assert strict-equal? -1.#INF -1.7976931348623157e+308 - 1.7976931348623157e+308
		--assert strict-equal? -1.#INF subtract -1.7976931348623157e+308 1.7976931348623157e+308
		--assert strict-equal? -1.#INF i - j
		--assert strict-equal? -1.#INF subtract i j

	--test-- "float-subtract 67"
		i: -1.7976931348623157e+308
		j: 1.1
		--assert strict-equal? -1.7976931348623157e+308 -1.7976931348623157e+308 - 1.1
		--assert strict-equal? -1.7976931348623157e+308 subtract -1.7976931348623157e+308 1.1
		--assert strict-equal? -1.7976931348623157e+308 i - j
		--assert strict-equal? -1.7976931348623157e+308 subtract i j

	--test-- "float-subtract 68"
		i: -1.7976931348623157e+308
		j: -1.1
		--assert strict-equal? -1.7976931348623157e+308 -1.7976931348623157e+308 - -1.1
		--assert strict-equal? -1.7976931348623157e+308 subtract -1.7976931348623157e+308 -1.1
		--assert strict-equal? -1.7976931348623157e+308 i - j
		--assert strict-equal? -1.7976931348623157e+308 subtract i j

	--test-- "float-subtract 69"
		i: -1.7976931348623157e+308
		j: 1.7976931348623157e+308
		--assert strict-equal? -1.#INF -1.7976931348623157e+308 - 1.7976931348623157e+308
		--assert strict-equal? -1.#INF subtract -1.7976931348623157e+308 1.7976931348623157e+308
		--assert strict-equal? -1.#INF i - j
		--assert strict-equal? -1.#INF subtract i j

	--test-- "float-subtract 70"
		i: -1.7976931348623157e+308
		j: -1.7976931348623157e+308
		--assert strict-equal? 0.0 -1.7976931348623157e+308 - -1.7976931348623157e+308
		--assert strict-equal? 0.0 subtract -1.7976931348623157e+308 -1.7976931348623157e+308
		--assert strict-equal? 0.0 i - j
		--assert strict-equal? 0.0 subtract i j

	--test-- "float-subtract 71"
		i: 1.1
		j: 0.0
		--assert strict-equal? 1.1 1.1 - 0.0
		--assert strict-equal? 1.1 subtract 1.1 0.0
		--assert strict-equal? 1.1 i - j
		--assert strict-equal? 1.1 subtract i j

	--test-- "float-subtract 72"
		i: 1.1
		j: 1.0
		--assert strict-equal? 0.10000000000000009 1.1 - 1.0
		--assert strict-equal? 0.10000000000000009 subtract 1.1 1.0
		--assert strict-equal? 0.10000000000000009 i - j
		--assert strict-equal? 0.10000000000000009 subtract i j

	--test-- "float-subtract 73"
		i: 1.1
		j: -1.0
		--assert strict-equal? 2.1 1.1 - -1.0
		--assert strict-equal? 2.1 subtract 1.1 -1.0
		--assert strict-equal? 2.1 i - j
		--assert strict-equal? 2.1 subtract i j

	--test-- "float-subtract 74"
		i: 1.1
		j: 2.2250738585072014e-308
		--assert strict-equal? 1.1 1.1 - 2.2250738585072014e-308
		--assert strict-equal? 1.1 subtract 1.1 2.2250738585072014e-308
		--assert strict-equal? 1.1 i - j
		--assert strict-equal? 1.1 subtract i j

	--test-- "float-subtract 75"
		i: 1.1
		j: -2.2250738585072014e-308
		--assert strict-equal? 1.1 1.1 - -2.2250738585072014e-308
		--assert strict-equal? 1.1 subtract 1.1 -2.2250738585072014e-308
		--assert strict-equal? 1.1 i - j
		--assert strict-equal? 1.1 subtract i j

	--test-- "float-subtract 76"
		i: 1.1
		j: 1.7976931348623157e+308
		--assert strict-equal? -1.7976931348623157e+308 1.1 - 1.7976931348623157e+308
		--assert strict-equal? -1.7976931348623157e+308 subtract 1.1 1.7976931348623157e+308
		--assert strict-equal? -1.7976931348623157e+308 i - j
		--assert strict-equal? -1.7976931348623157e+308 subtract i j

	--test-- "float-subtract 77"
		i: 1.1
		j: -1.7976931348623157e+308
		--assert strict-equal? 1.7976931348623157e+308 1.1 - -1.7976931348623157e+308
		--assert strict-equal? 1.7976931348623157e+308 subtract 1.1 -1.7976931348623157e+308
		--assert strict-equal? 1.7976931348623157e+308 i - j
		--assert strict-equal? 1.7976931348623157e+308 subtract i j

	--test-- "float-subtract 78"
		i: 1.1
		j: -1.1
		--assert strict-equal? 2.2 1.1 - -1.1
		--assert strict-equal? 2.2 subtract 1.1 -1.1
		--assert strict-equal? 2.2 i - j
		--assert strict-equal? 2.2 subtract i j

	--test-- "float-subtract 79"
		i: 1.1
		j: 1.7976931348623157e+308
		--assert strict-equal? -1.7976931348623157e+308 1.1 - 1.7976931348623157e+308
		--assert strict-equal? -1.7976931348623157e+308 subtract 1.1 1.7976931348623157e+308
		--assert strict-equal? -1.7976931348623157e+308 i - j
		--assert strict-equal? -1.7976931348623157e+308 subtract i j

	--test-- "float-subtract 80"
		i: 1.1
		j: -1.7976931348623157e+308
		--assert strict-equal? 1.7976931348623157e+308 1.1 - -1.7976931348623157e+308
		--assert strict-equal? 1.7976931348623157e+308 subtract 1.1 -1.7976931348623157e+308
		--assert strict-equal? 1.7976931348623157e+308 i - j
		--assert strict-equal? 1.7976931348623157e+308 subtract i j

	--test-- "float-subtract 81"
		i: -1.1
		j: 0.0
		--assert strict-equal? -1.1 -1.1 - 0.0
		--assert strict-equal? -1.1 subtract -1.1 0.0
		--assert strict-equal? -1.1 i - j
		--assert strict-equal? -1.1 subtract i j

	--test-- "float-subtract 82"
		i: -1.1
		j: 1.0
		--assert strict-equal? -2.1 -1.1 - 1.0
		--assert strict-equal? -2.1 subtract -1.1 1.0
		--assert strict-equal? -2.1 i - j
		--assert strict-equal? -2.1 subtract i j

	--test-- "float-subtract 83"
		i: -1.1
		j: -1.0
		--assert strict-equal? -0.10000000000000009 -1.1 - -1.0
		--assert strict-equal? -0.10000000000000009 subtract -1.1 -1.0
		--assert strict-equal? -0.10000000000000009 i - j
		--assert strict-equal? -0.10000000000000009 subtract i j

	--test-- "float-subtract 84"
		i: -1.1
		j: 2.2250738585072014e-308
		--assert strict-equal? -1.1 -1.1 - 2.2250738585072014e-308
		--assert strict-equal? -1.1 subtract -1.1 2.2250738585072014e-308
		--assert strict-equal? -1.1 i - j
		--assert strict-equal? -1.1 subtract i j

	--test-- "float-subtract 85"
		i: -1.1
		j: -2.2250738585072014e-308
		--assert strict-equal? -1.1 -1.1 - -2.2250738585072014e-308
		--assert strict-equal? -1.1 subtract -1.1 -2.2250738585072014e-308
		--assert strict-equal? -1.1 i - j
		--assert strict-equal? -1.1 subtract i j

	--test-- "float-subtract 86"
		i: -1.1
		j: 1.7976931348623157e+308
		--assert strict-equal? -1.7976931348623157e+308 -1.1 - 1.7976931348623157e+308
		--assert strict-equal? -1.7976931348623157e+308 subtract -1.1 1.7976931348623157e+308
		--assert strict-equal? -1.7976931348623157e+308 i - j
		--assert strict-equal? -1.7976931348623157e+308 subtract i j

	--test-- "float-subtract 87"
		i: -1.1
		j: -1.7976931348623157e+308
		--assert strict-equal? 1.7976931348623157e+308 -1.1 - -1.7976931348623157e+308
		--assert strict-equal? 1.7976931348623157e+308 subtract -1.1 -1.7976931348623157e+308
		--assert strict-equal? 1.7976931348623157e+308 i - j
		--assert strict-equal? 1.7976931348623157e+308 subtract i j

	--test-- "float-subtract 88"
		i: -1.1
		j: 1.1
		--assert strict-equal? -2.2 -1.1 - 1.1
		--assert strict-equal? -2.2 subtract -1.1 1.1
		--assert strict-equal? -2.2 i - j
		--assert strict-equal? -2.2 subtract i j

	--test-- "float-subtract 89"
		i: -1.1
		j: 1.7976931348623157e+308
		--assert strict-equal? -1.7976931348623157e+308 -1.1 - 1.7976931348623157e+308
		--assert strict-equal? -1.7976931348623157e+308 subtract -1.1 1.7976931348623157e+308
		--assert strict-equal? -1.7976931348623157e+308 i - j
		--assert strict-equal? -1.7976931348623157e+308 subtract i j

	--test-- "float-subtract 90"
		i: -1.1
		j: -1.7976931348623157e+308
		--assert strict-equal? 1.7976931348623157e+308 -1.1 - -1.7976931348623157e+308
		--assert strict-equal? 1.7976931348623157e+308 subtract -1.1 -1.7976931348623157e+308
		--assert strict-equal? 1.7976931348623157e+308 i - j
		--assert strict-equal? 1.7976931348623157e+308 subtract i j

	--test-- "float-subtract 91"
		i: 1.7976931348623157e+308
		j: 0.0
		--assert strict-equal? 1.7976931348623157e+308 1.7976931348623157e+308 - 0.0
		--assert strict-equal? 1.7976931348623157e+308 subtract 1.7976931348623157e+308 0.0
		--assert strict-equal? 1.7976931348623157e+308 i - j
		--assert strict-equal? 1.7976931348623157e+308 subtract i j

	--test-- "float-subtract 92"
		i: 1.7976931348623157e+308
		j: 1.0
		--assert strict-equal? 1.7976931348623157e+308 1.7976931348623157e+308 - 1.0
		--assert strict-equal? 1.7976931348623157e+308 subtract 1.7976931348623157e+308 1.0
		--assert strict-equal? 1.7976931348623157e+308 i - j
		--assert strict-equal? 1.7976931348623157e+308 subtract i j

	--test-- "float-subtract 93"
		i: 1.7976931348623157e+308
		j: -1.0
		--assert strict-equal? 1.7976931348623157e+308 1.7976931348623157e+308 - -1.0
		--assert strict-equal? 1.7976931348623157e+308 subtract 1.7976931348623157e+308 -1.0
		--assert strict-equal? 1.7976931348623157e+308 i - j
		--assert strict-equal? 1.7976931348623157e+308 subtract i j

	--test-- "float-subtract 94"
		i: 1.7976931348623157e+308
		j: 2.2250738585072014e-308
		--assert strict-equal? 1.7976931348623157e+308 1.7976931348623157e+308 - 2.2250738585072014e-308
		--assert strict-equal? 1.7976931348623157e+308 subtract 1.7976931348623157e+308 2.2250738585072014e-308
		--assert strict-equal? 1.7976931348623157e+308 i - j
		--assert strict-equal? 1.7976931348623157e+308 subtract i j

	--test-- "float-subtract 95"
		i: 1.7976931348623157e+308
		j: -2.2250738585072014e-308
		--assert strict-equal? 1.7976931348623157e+308 1.7976931348623157e+308 - -2.2250738585072014e-308
		--assert strict-equal? 1.7976931348623157e+308 subtract 1.7976931348623157e+308 -2.2250738585072014e-308
		--assert strict-equal? 1.7976931348623157e+308 i - j
		--assert strict-equal? 1.7976931348623157e+308 subtract i j

	--test-- "float-subtract 96"
		i: 1.7976931348623157e+308
		j: 1.7976931348623157e+308
		--assert strict-equal? 0.0 1.7976931348623157e+308 - 1.7976931348623157e+308
		--assert strict-equal? 0.0 subtract 1.7976931348623157e+308 1.7976931348623157e+308
		--assert strict-equal? 0.0 i - j
		--assert strict-equal? 0.0 subtract i j

	--test-- "float-subtract 97"
		i: 1.7976931348623157e+308
		j: -1.7976931348623157e+308
		--assert strict-equal? 1.#INF 1.7976931348623157e+308 - -1.7976931348623157e+308
		--assert strict-equal? 1.#INF subtract 1.7976931348623157e+308 -1.7976931348623157e+308
		--assert strict-equal? 1.#INF i - j
		--assert strict-equal? 1.#INF subtract i j

	--test-- "float-subtract 98"
		i: 1.7976931348623157e+308
		j: 1.1
		--assert strict-equal? 1.7976931348623157e+308 1.7976931348623157e+308 - 1.1
		--assert strict-equal? 1.7976931348623157e+308 subtract 1.7976931348623157e+308 1.1
		--assert strict-equal? 1.7976931348623157e+308 i - j
		--assert strict-equal? 1.7976931348623157e+308 subtract i j

	--test-- "float-subtract 99"
		i: 1.7976931348623157e+308
		j: -1.1
		--assert strict-equal? 1.7976931348623157e+308 1.7976931348623157e+308 - -1.1
		--assert strict-equal? 1.7976931348623157e+308 subtract 1.7976931348623157e+308 -1.1
		--assert strict-equal? 1.7976931348623157e+308 i - j
		--assert strict-equal? 1.7976931348623157e+308 subtract i j

	--test-- "float-subtract 100"
		i: 1.7976931348623157e+308
		j: -1.7976931348623157e+308
		--assert strict-equal? 1.#INF 1.7976931348623157e+308 - -1.7976931348623157e+308
		--assert strict-equal? 1.#INF subtract 1.7976931348623157e+308 -1.7976931348623157e+308
		--assert strict-equal? 1.#INF i - j
		--assert strict-equal? 1.#INF subtract i j

	--test-- "float-subtract 101"
		i: -1.7976931348623157e+308
		j: 0.0
		--assert strict-equal? -1.7976931348623157e+308 -1.7976931348623157e+308 - 0.0
		--assert strict-equal? -1.7976931348623157e+308 subtract -1.7976931348623157e+308 0.0
		--assert strict-equal? -1.7976931348623157e+308 i - j
		--assert strict-equal? -1.7976931348623157e+308 subtract i j

	--test-- "float-subtract 102"
		i: -1.7976931348623157e+308
		j: 1.0
		--assert strict-equal? -1.7976931348623157e+308 -1.7976931348623157e+308 - 1.0
		--assert strict-equal? -1.7976931348623157e+308 subtract -1.7976931348623157e+308 1.0
		--assert strict-equal? -1.7976931348623157e+308 i - j
		--assert strict-equal? -1.7976931348623157e+308 subtract i j

	--test-- "float-subtract 103"
		i: -1.7976931348623157e+308
		j: -1.0
		--assert strict-equal? -1.7976931348623157e+308 -1.7976931348623157e+308 - -1.0
		--assert strict-equal? -1.7976931348623157e+308 subtract -1.7976931348623157e+308 -1.0
		--assert strict-equal? -1.7976931348623157e+308 i - j
		--assert strict-equal? -1.7976931348623157e+308 subtract i j

	--test-- "float-subtract 104"
		i: -1.7976931348623157e+308
		j: 2.2250738585072014e-308
		--assert strict-equal? -1.7976931348623157e+308 -1.7976931348623157e+308 - 2.2250738585072014e-308
		--assert strict-equal? -1.7976931348623157e+308 subtract -1.7976931348623157e+308 2.2250738585072014e-308
		--assert strict-equal? -1.7976931348623157e+308 i - j
		--assert strict-equal? -1.7976931348623157e+308 subtract i j

	--test-- "float-subtract 105"
		i: -1.7976931348623157e+308
		j: -2.2250738585072014e-308
		--assert strict-equal? -1.7976931348623157e+308 -1.7976931348623157e+308 - -2.2250738585072014e-308
		--assert strict-equal? -1.7976931348623157e+308 subtract -1.7976931348623157e+308 -2.2250738585072014e-308
		--assert strict-equal? -1.7976931348623157e+308 i - j
		--assert strict-equal? -1.7976931348623157e+308 subtract i j

	--test-- "float-subtract 106"
		i: -1.7976931348623157e+308
		j: 1.7976931348623157e+308
		--assert strict-equal? -1.#INF -1.7976931348623157e+308 - 1.7976931348623157e+308
		--assert strict-equal? -1.#INF subtract -1.7976931348623157e+308 1.7976931348623157e+308
		--assert strict-equal? -1.#INF i - j
		--assert strict-equal? -1.#INF subtract i j

	--test-- "float-subtract 107"
		i: -1.7976931348623157e+308
		j: -1.7976931348623157e+308
		--assert strict-equal? 0.0 -1.7976931348623157e+308 - -1.7976931348623157e+308
		--assert strict-equal? 0.0 subtract -1.7976931348623157e+308 -1.7976931348623157e+308
		--assert strict-equal? 0.0 i - j
		--assert strict-equal? 0.0 subtract i j

	--test-- "float-subtract 108"
		i: -1.7976931348623157e+308
		j: 1.1
		--assert strict-equal? -1.7976931348623157e+308 -1.7976931348623157e+308 - 1.1
		--assert strict-equal? -1.7976931348623157e+308 subtract -1.7976931348623157e+308 1.1
		--assert strict-equal? -1.7976931348623157e+308 i - j
		--assert strict-equal? -1.7976931348623157e+308 subtract i j

	--test-- "float-subtract 109"
		i: -1.7976931348623157e+308
		j: -1.1
		--assert strict-equal? -1.7976931348623157e+308 -1.7976931348623157e+308 - -1.1
		--assert strict-equal? -1.7976931348623157e+308 subtract -1.7976931348623157e+308 -1.1
		--assert strict-equal? -1.7976931348623157e+308 i - j
		--assert strict-equal? -1.7976931348623157e+308 subtract i j

	--test-- "float-subtract 110"
		i: -1.7976931348623157e+308
		j: 1.7976931348623157e+308
		--assert strict-equal? -1.#INF -1.7976931348623157e+308 - 1.7976931348623157e+308
		--assert strict-equal? -1.#INF subtract -1.7976931348623157e+308 1.7976931348623157e+308
		--assert strict-equal? -1.#INF i - j
		--assert strict-equal? -1.#INF subtract i j

	--test-- "float-subtract 111"
		i: 0.0
		j: 0.0
		--assert strict-equal? 0.0 0.0 - 0.0
		--assert strict-equal? 0.0 subtract 0.0 0.0
		--assert strict-equal? 0.0 i - j
		--assert strict-equal? 0.0 subtract i j

	--test-- "float-subtract 112"
		i: 1.0
		j: 1.0
		--assert strict-equal? 0.0 1.0 - 1.0
		--assert strict-equal? 0.0 subtract 1.0 1.0
		--assert strict-equal? 0.0 i - j
		--assert strict-equal? 0.0 subtract i j

	--test-- "float-subtract 113"
		i: -1.0
		j: -1.0
		--assert strict-equal? 0.0 -1.0 - -1.0
		--assert strict-equal? 0.0 subtract -1.0 -1.0
		--assert strict-equal? 0.0 i - j
		--assert strict-equal? 0.0 subtract i j

	--test-- "float-subtract 114"
		i: 2.2250738585072014e-308
		j: 2.2250738585072014e-308
		--assert strict-equal? 0.0 2.2250738585072014e-308 - 2.2250738585072014e-308
		--assert strict-equal? 0.0 subtract 2.2250738585072014e-308 2.2250738585072014e-308
		--assert strict-equal? 0.0 i - j
		--assert strict-equal? 0.0 subtract i j

	--test-- "float-subtract 115"
		i: -2.2250738585072014e-308
		j: -2.2250738585072014e-308
		--assert strict-equal? 0.0 -2.2250738585072014e-308 - -2.2250738585072014e-308
		--assert strict-equal? 0.0 subtract -2.2250738585072014e-308 -2.2250738585072014e-308
		--assert strict-equal? 0.0 i - j
		--assert strict-equal? 0.0 subtract i j

	--test-- "float-subtract 116"
		i: 1.7976931348623157e+308
		j: 1.7976931348623157e+308
		--assert strict-equal? 0.0 1.7976931348623157e+308 - 1.7976931348623157e+308
		--assert strict-equal? 0.0 subtract 1.7976931348623157e+308 1.7976931348623157e+308
		--assert strict-equal? 0.0 i - j
		--assert strict-equal? 0.0 subtract i j

	--test-- "float-subtract 117"
		i: -1.7976931348623157e+308
		j: -1.7976931348623157e+308
		--assert strict-equal? 0.0 -1.7976931348623157e+308 - -1.7976931348623157e+308
		--assert strict-equal? 0.0 subtract -1.7976931348623157e+308 -1.7976931348623157e+308
		--assert strict-equal? 0.0 i - j
		--assert strict-equal? 0.0 subtract i j

	--test-- "float-subtract 118"
		i: 1.1
		j: 1.1
		--assert strict-equal? 0.0 1.1 - 1.1
		--assert strict-equal? 0.0 subtract 1.1 1.1
		--assert strict-equal? 0.0 i - j
		--assert strict-equal? 0.0 subtract i j

	--test-- "float-subtract 119"
		i: -1.1
		j: -1.1
		--assert strict-equal? 0.0 -1.1 - -1.1
		--assert strict-equal? 0.0 subtract -1.1 -1.1
		--assert strict-equal? 0.0 i - j
		--assert strict-equal? 0.0 subtract i j

	--test-- "float-subtract 120"
		i: 1.7976931348623157e+308
		j: 1.7976931348623157e+308
		--assert strict-equal? 0.0 1.7976931348623157e+308 - 1.7976931348623157e+308
		--assert strict-equal? 0.0 subtract 1.7976931348623157e+308 1.7976931348623157e+308
		--assert strict-equal? 0.0 i - j
		--assert strict-equal? 0.0 subtract i j

	--test-- "float-subtract 121"
		i: -1.7976931348623157e+308
		j: -1.7976931348623157e+308
		--assert strict-equal? 0.0 -1.7976931348623157e+308 - -1.7976931348623157e+308
		--assert strict-equal? 0.0 subtract -1.7976931348623157e+308 -1.7976931348623157e+308
		--assert strict-equal? 0.0 i - j
		--assert strict-equal? 0.0 subtract i j

===end-group===
===start-group=== "float-multiply"
	--test-- "float-multiply 1"
		i: 0.0
		j: 1.0
		--assert strict-equal? 0.0 0.0 * 1.0
		--assert strict-equal? 0.0 multiply 0.0 1.0
		--assert strict-equal? 0.0 i * j
		--assert strict-equal? 0.0 multiply i j

	--test-- "float-multiply 2"
		i: 0.0
		j: -1.0
		--assert strict-equal? -0.0 0.0 * -1.0
		--assert strict-equal? -0.0 multiply 0.0 -1.0
		--assert strict-equal? -0.0 i * j
		--assert strict-equal? -0.0 multiply i j

	--test-- "float-multiply 3"
		i: 0.0
		j: 2.2250738585072014e-308
		--assert strict-equal? 0.0 0.0 * 2.2250738585072014e-308
		--assert strict-equal? 0.0 multiply 0.0 2.2250738585072014e-308
		--assert strict-equal? 0.0 i * j
		--assert strict-equal? 0.0 multiply i j

	--test-- "float-multiply 4"
		i: 0.0
		j: -2.2250738585072014e-308
		--assert strict-equal? -0.0 0.0 * -2.2250738585072014e-308
		--assert strict-equal? -0.0 multiply 0.0 -2.2250738585072014e-308
		--assert strict-equal? -0.0 i * j
		--assert strict-equal? -0.0 multiply i j

	--test-- "float-multiply 5"
		i: 0.0
		j: 1.7976931348623157e+308
		--assert strict-equal? 0.0 0.0 * 1.7976931348623157e+308
		--assert strict-equal? 0.0 multiply 0.0 1.7976931348623157e+308
		--assert strict-equal? 0.0 i * j
		--assert strict-equal? 0.0 multiply i j

	--test-- "float-multiply 6"
		i: 0.0
		j: -1.7976931348623157e+308
		--assert strict-equal? -0.0 0.0 * -1.7976931348623157e+308
		--assert strict-equal? -0.0 multiply 0.0 -1.7976931348623157e+308
		--assert strict-equal? -0.0 i * j
		--assert strict-equal? -0.0 multiply i j

	--test-- "float-multiply 7"
		i: 0.0
		j: 1.1
		--assert strict-equal? 0.0 0.0 * 1.1
		--assert strict-equal? 0.0 multiply 0.0 1.1
		--assert strict-equal? 0.0 i * j
		--assert strict-equal? 0.0 multiply i j

	--test-- "float-multiply 8"
		i: 0.0
		j: -1.1
		--assert strict-equal? -0.0 0.0 * -1.1
		--assert strict-equal? -0.0 multiply 0.0 -1.1
		--assert strict-equal? -0.0 i * j
		--assert strict-equal? -0.0 multiply i j

	--test-- "float-multiply 9"
		i: 0.0
		j: 1.7976931348623157e+308
		--assert strict-equal? 0.0 0.0 * 1.7976931348623157e+308
		--assert strict-equal? 0.0 multiply 0.0 1.7976931348623157e+308
		--assert strict-equal? 0.0 i * j
		--assert strict-equal? 0.0 multiply i j

	--test-- "float-multiply 10"
		i: 0.0
		j: -1.7976931348623157e+308
		--assert strict-equal? -0.0 0.0 * -1.7976931348623157e+308
		--assert strict-equal? -0.0 multiply 0.0 -1.7976931348623157e+308
		--assert strict-equal? -0.0 i * j
		--assert strict-equal? -0.0 multiply i j

	--test-- "float-multiply 11"
		i: 1.0
		j: -1.0
		--assert strict-equal? -1.0 1.0 * -1.0
		--assert strict-equal? -1.0 multiply 1.0 -1.0
		--assert strict-equal? -1.0 i * j
		--assert strict-equal? -1.0 multiply i j

	--test-- "float-multiply 12"
		i: 1.0
		j: 2.2250738585072014e-308
		--assert strict-equal? 2.2250738585072014e-308 1.0 * 2.2250738585072014e-308
		--assert strict-equal? 2.2250738585072014e-308 multiply 1.0 2.2250738585072014e-308
		--assert strict-equal? 2.2250738585072014e-308 i * j
		--assert strict-equal? 2.2250738585072014e-308 multiply i j

	--test-- "float-multiply 13"
		i: 1.0
		j: -2.2250738585072014e-308
		--assert strict-equal? -2.2250738585072014e-308 1.0 * -2.2250738585072014e-308
		--assert strict-equal? -2.2250738585072014e-308 multiply 1.0 -2.2250738585072014e-308
		--assert strict-equal? -2.2250738585072014e-308 i * j
		--assert strict-equal? -2.2250738585072014e-308 multiply i j

	--test-- "float-multiply 14"
		i: 1.0
		j: 1.7976931348623157e+308
		--assert strict-equal? 1.7976931348623157e+308 1.0 * 1.7976931348623157e+308
		--assert strict-equal? 1.7976931348623157e+308 multiply 1.0 1.7976931348623157e+308
		--assert strict-equal? 1.7976931348623157e+308 i * j
		--assert strict-equal? 1.7976931348623157e+308 multiply i j

	--test-- "float-multiply 15"
		i: 1.0
		j: -1.7976931348623157e+308
		--assert strict-equal? -1.7976931348623157e+308 1.0 * -1.7976931348623157e+308
		--assert strict-equal? -1.7976931348623157e+308 multiply 1.0 -1.7976931348623157e+308
		--assert strict-equal? -1.7976931348623157e+308 i * j
		--assert strict-equal? -1.7976931348623157e+308 multiply i j

	--test-- "float-multiply 16"
		i: 1.0
		j: 1.1
		--assert strict-equal? 1.1 1.0 * 1.1
		--assert strict-equal? 1.1 multiply 1.0 1.1
		--assert strict-equal? 1.1 i * j
		--assert strict-equal? 1.1 multiply i j

	--test-- "float-multiply 17"
		i: 1.0
		j: -1.1
		--assert strict-equal? -1.1 1.0 * -1.1
		--assert strict-equal? -1.1 multiply 1.0 -1.1
		--assert strict-equal? -1.1 i * j
		--assert strict-equal? -1.1 multiply i j

	--test-- "float-multiply 18"
		i: 1.0
		j: 1.7976931348623157e+308
		--assert strict-equal? 1.7976931348623157e+308 1.0 * 1.7976931348623157e+308
		--assert strict-equal? 1.7976931348623157e+308 multiply 1.0 1.7976931348623157e+308
		--assert strict-equal? 1.7976931348623157e+308 i * j
		--assert strict-equal? 1.7976931348623157e+308 multiply i j

	--test-- "float-multiply 19"
		i: 1.0
		j: -1.7976931348623157e+308
		--assert strict-equal? -1.7976931348623157e+308 1.0 * -1.7976931348623157e+308
		--assert strict-equal? -1.7976931348623157e+308 multiply 1.0 -1.7976931348623157e+308
		--assert strict-equal? -1.7976931348623157e+308 i * j
		--assert strict-equal? -1.7976931348623157e+308 multiply i j

	--test-- "float-multiply 20"
		i: -1.0
		j: 2.2250738585072014e-308
		--assert strict-equal? -2.2250738585072014e-308 -1.0 * 2.2250738585072014e-308
		--assert strict-equal? -2.2250738585072014e-308 multiply -1.0 2.2250738585072014e-308
		--assert strict-equal? -2.2250738585072014e-308 i * j
		--assert strict-equal? -2.2250738585072014e-308 multiply i j

	--test-- "float-multiply 21"
		i: -1.0
		j: -2.2250738585072014e-308
		--assert strict-equal? 2.2250738585072014e-308 -1.0 * -2.2250738585072014e-308
		--assert strict-equal? 2.2250738585072014e-308 multiply -1.0 -2.2250738585072014e-308
		--assert strict-equal? 2.2250738585072014e-308 i * j
		--assert strict-equal? 2.2250738585072014e-308 multiply i j

	--test-- "float-multiply 22"
		i: -1.0
		j: 1.7976931348623157e+308
		--assert strict-equal? -1.7976931348623157e+308 -1.0 * 1.7976931348623157e+308
		--assert strict-equal? -1.7976931348623157e+308 multiply -1.0 1.7976931348623157e+308
		--assert strict-equal? -1.7976931348623157e+308 i * j
		--assert strict-equal? -1.7976931348623157e+308 multiply i j

	--test-- "float-multiply 23"
		i: -1.0
		j: -1.7976931348623157e+308
		--assert strict-equal? 1.7976931348623157e+308 -1.0 * -1.7976931348623157e+308
		--assert strict-equal? 1.7976931348623157e+308 multiply -1.0 -1.7976931348623157e+308
		--assert strict-equal? 1.7976931348623157e+308 i * j
		--assert strict-equal? 1.7976931348623157e+308 multiply i j

	--test-- "float-multiply 24"
		i: -1.0
		j: 1.1
		--assert strict-equal? -1.1 -1.0 * 1.1
		--assert strict-equal? -1.1 multiply -1.0 1.1
		--assert strict-equal? -1.1 i * j
		--assert strict-equal? -1.1 multiply i j

	--test-- "float-multiply 25"
		i: -1.0
		j: -1.1
		--assert strict-equal? 1.1 -1.0 * -1.1
		--assert strict-equal? 1.1 multiply -1.0 -1.1
		--assert strict-equal? 1.1 i * j
		--assert strict-equal? 1.1 multiply i j

	--test-- "float-multiply 26"
		i: -1.0
		j: 1.7976931348623157e+308
		--assert strict-equal? -1.7976931348623157e+308 -1.0 * 1.7976931348623157e+308
		--assert strict-equal? -1.7976931348623157e+308 multiply -1.0 1.7976931348623157e+308
		--assert strict-equal? -1.7976931348623157e+308 i * j
		--assert strict-equal? -1.7976931348623157e+308 multiply i j

	--test-- "float-multiply 27"
		i: -1.0
		j: -1.7976931348623157e+308
		--assert strict-equal? 1.7976931348623157e+308 -1.0 * -1.7976931348623157e+308
		--assert strict-equal? 1.7976931348623157e+308 multiply -1.0 -1.7976931348623157e+308
		--assert strict-equal? 1.7976931348623157e+308 i * j
		--assert strict-equal? 1.7976931348623157e+308 multiply i j

	--test-- "float-multiply 28"
		i: 2.2250738585072014e-308
		j: -2.2250738585072014e-308
		--assert strict-equal? -0.0 2.2250738585072014e-308 * -2.2250738585072014e-308
		--assert strict-equal? -0.0 multiply 2.2250738585072014e-308 -2.2250738585072014e-308
		--assert strict-equal? -0.0 i * j
		--assert strict-equal? -0.0 multiply i j

	--test-- "float-multiply 29"
		i: 2.2250738585072014e-308
		j: 1.7976931348623157e+308
		--assert strict-equal? 3.9999999999999996 2.2250738585072014e-308 * 1.7976931348623157e+308
		--assert strict-equal? 3.9999999999999996 multiply 2.2250738585072014e-308 1.7976931348623157e+308
		--assert strict-equal? 3.9999999999999996 i * j
		--assert strict-equal? 3.9999999999999996 multiply i j

	--test-- "float-multiply 30"
		i: 2.2250738585072014e-308
		j: -1.7976931348623157e+308
		--assert strict-equal? -3.9999999999999996 2.2250738585072014e-308 * -1.7976931348623157e+308
		--assert strict-equal? -3.9999999999999996 multiply 2.2250738585072014e-308 -1.7976931348623157e+308
		--assert strict-equal? -3.9999999999999996 i * j
		--assert strict-equal? -3.9999999999999996 multiply i j

	--test-- "float-multiply 31"
		i: 2.2250738585072014e-308
		j: 1.1
		--assert strict-equal? 2.4475812443579217e-308 2.2250738585072014e-308 * 1.1
		--assert strict-equal? 2.4475812443579217e-308 multiply 2.2250738585072014e-308 1.1
		--assert strict-equal? 2.4475812443579217e-308 i * j
		--assert strict-equal? 2.4475812443579217e-308 multiply i j

	--test-- "float-multiply 32"
		i: 2.2250738585072014e-308
		j: -1.1
		--assert strict-equal? -2.4475812443579217e-308 2.2250738585072014e-308 * -1.1
		--assert strict-equal? -2.4475812443579217e-308 multiply 2.2250738585072014e-308 -1.1
		--assert strict-equal? -2.4475812443579217e-308 i * j
		--assert strict-equal? -2.4475812443579217e-308 multiply i j

	--test-- "float-multiply 33"
		i: 2.2250738585072014e-308
		j: 1.7976931348623157e+308
		--assert strict-equal? 3.9999999999999996 2.2250738585072014e-308 * 1.7976931348623157e+308
		--assert strict-equal? 3.9999999999999996 multiply 2.2250738585072014e-308 1.7976931348623157e+308
		--assert strict-equal? 3.9999999999999996 i * j
		--assert strict-equal? 3.9999999999999996 multiply i j

	--test-- "float-multiply 34"
		i: 2.2250738585072014e-308
		j: -1.7976931348623157e+308
		--assert strict-equal? -3.9999999999999996 2.2250738585072014e-308 * -1.7976931348623157e+308
		--assert strict-equal? -3.9999999999999996 multiply 2.2250738585072014e-308 -1.7976931348623157e+308
		--assert strict-equal? -3.9999999999999996 i * j
		--assert strict-equal? -3.9999999999999996 multiply i j

	--test-- "float-multiply 35"
		i: -2.2250738585072014e-308
		j: 1.7976931348623157e+308
		--assert strict-equal? -3.9999999999999996 -2.2250738585072014e-308 * 1.7976931348623157e+308
		--assert strict-equal? -3.9999999999999996 multiply -2.2250738585072014e-308 1.7976931348623157e+308
		--assert strict-equal? -3.9999999999999996 i * j
		--assert strict-equal? -3.9999999999999996 multiply i j

	--test-- "float-multiply 36"
		i: -2.2250738585072014e-308
		j: -1.7976931348623157e+308
		--assert strict-equal? 3.9999999999999996 -2.2250738585072014e-308 * -1.7976931348623157e+308
		--assert strict-equal? 3.9999999999999996 multiply -2.2250738585072014e-308 -1.7976931348623157e+308
		--assert strict-equal? 3.9999999999999996 i * j
		--assert strict-equal? 3.9999999999999996 multiply i j

	--test-- "float-multiply 37"
		i: -2.2250738585072014e-308
		j: 1.1
		--assert strict-equal? -2.4475812443579217e-308 -2.2250738585072014e-308 * 1.1
		--assert strict-equal? -2.4475812443579217e-308 multiply -2.2250738585072014e-308 1.1
		--assert strict-equal? -2.4475812443579217e-308 i * j
		--assert strict-equal? -2.4475812443579217e-308 multiply i j

	--test-- "float-multiply 38"
		i: -2.2250738585072014e-308
		j: -1.1
		--assert strict-equal? 2.4475812443579217e-308 -2.2250738585072014e-308 * -1.1
		--assert strict-equal? 2.4475812443579217e-308 multiply -2.2250738585072014e-308 -1.1
		--assert strict-equal? 2.4475812443579217e-308 i * j
		--assert strict-equal? 2.4475812443579217e-308 multiply i j

	--test-- "float-multiply 39"
		i: -2.2250738585072014e-308
		j: 1.7976931348623157e+308
		--assert strict-equal? -3.9999999999999996 -2.2250738585072014e-308 * 1.7976931348623157e+308
		--assert strict-equal? -3.9999999999999996 multiply -2.2250738585072014e-308 1.7976931348623157e+308
		--assert strict-equal? -3.9999999999999996 i * j
		--assert strict-equal? -3.9999999999999996 multiply i j

	--test-- "float-multiply 40"
		i: -2.2250738585072014e-308
		j: -1.7976931348623157e+308
		--assert strict-equal? 3.9999999999999996 -2.2250738585072014e-308 * -1.7976931348623157e+308
		--assert strict-equal? 3.9999999999999996 multiply -2.2250738585072014e-308 -1.7976931348623157e+308
		--assert strict-equal? 3.9999999999999996 i * j
		--assert strict-equal? 3.9999999999999996 multiply i j

	--test-- "float-multiply 41"
		i: 1.7976931348623157e+308
		j: -1.7976931348623157e+308
		--assert strict-equal? -1.#INF 1.7976931348623157e+308 * -1.7976931348623157e+308
		--assert strict-equal? -1.#INF multiply 1.7976931348623157e+308 -1.7976931348623157e+308
		--assert strict-equal? -1.#INF i * j
		--assert strict-equal? -1.#INF multiply i j

	--test-- "float-multiply 42"
		i: 1.7976931348623157e+308
		j: 1.1
		--assert strict-equal? 1.#INF 1.7976931348623157e+308 * 1.1
		--assert strict-equal? 1.#INF multiply 1.7976931348623157e+308 1.1
		--assert strict-equal? 1.#INF i * j
		--assert strict-equal? 1.#INF multiply i j

	--test-- "float-multiply 43"
		i: 1.7976931348623157e+308
		j: -1.1
		--assert strict-equal? -1.#INF 1.7976931348623157e+308 * -1.1
		--assert strict-equal? -1.#INF multiply 1.7976931348623157e+308 -1.1
		--assert strict-equal? -1.#INF i * j
		--assert strict-equal? -1.#INF multiply i j

	--test-- "float-multiply 44"
		i: 1.7976931348623157e+308
		j: 1.7976931348623157e+308
		--assert strict-equal? 1.#INF 1.7976931348623157e+308 * 1.7976931348623157e+308
		--assert strict-equal? 1.#INF multiply 1.7976931348623157e+308 1.7976931348623157e+308
		--assert strict-equal? 1.#INF i * j
		--assert strict-equal? 1.#INF multiply i j

	--test-- "float-multiply 45"
		i: 1.7976931348623157e+308
		j: -1.7976931348623157e+308
		--assert strict-equal? -1.#INF 1.7976931348623157e+308 * -1.7976931348623157e+308
		--assert strict-equal? -1.#INF multiply 1.7976931348623157e+308 -1.7976931348623157e+308
		--assert strict-equal? -1.#INF i * j
		--assert strict-equal? -1.#INF multiply i j

	--test-- "float-multiply 46"
		i: -1.7976931348623157e+308
		j: 1.1
		--assert strict-equal? -1.#INF -1.7976931348623157e+308 * 1.1
		--assert strict-equal? -1.#INF multiply -1.7976931348623157e+308 1.1
		--assert strict-equal? -1.#INF i * j
		--assert strict-equal? -1.#INF multiply i j

	--test-- "float-multiply 47"
		i: -1.7976931348623157e+308
		j: -1.1
		--assert strict-equal? 1.#INF -1.7976931348623157e+308 * -1.1
		--assert strict-equal? 1.#INF multiply -1.7976931348623157e+308 -1.1
		--assert strict-equal? 1.#INF i * j
		--assert strict-equal? 1.#INF multiply i j

	--test-- "float-multiply 48"
		i: -1.7976931348623157e+308
		j: 1.7976931348623157e+308
		--assert strict-equal? -1.#INF -1.7976931348623157e+308 * 1.7976931348623157e+308
		--assert strict-equal? -1.#INF multiply -1.7976931348623157e+308 1.7976931348623157e+308
		--assert strict-equal? -1.#INF i * j
		--assert strict-equal? -1.#INF multiply i j

	--test-- "float-multiply 49"
		i: -1.7976931348623157e+308
		j: -1.7976931348623157e+308
		--assert strict-equal? 1.#INF -1.7976931348623157e+308 * -1.7976931348623157e+308
		--assert strict-equal? 1.#INF multiply -1.7976931348623157e+308 -1.7976931348623157e+308
		--assert strict-equal? 1.#INF i * j
		--assert strict-equal? 1.#INF multiply i j

	--test-- "float-multiply 50"
		i: 1.1
		j: -1.1
		--assert strict-equal? -1.2100000000000002 1.1 * -1.1
		--assert strict-equal? -1.2100000000000002 multiply 1.1 -1.1
		--assert strict-equal? -1.2100000000000002 i * j
		--assert strict-equal? -1.2100000000000002 multiply i j

	--test-- "float-multiply 51"
		i: 1.1
		j: 1.7976931348623157e+308
		--assert strict-equal? 1.#INF 1.1 * 1.7976931348623157e+308
		--assert strict-equal? 1.#INF multiply 1.1 1.7976931348623157e+308
		--assert strict-equal? 1.#INF i * j
		--assert strict-equal? 1.#INF multiply i j

	--test-- "float-multiply 52"
		i: 1.1
		j: -1.7976931348623157e+308
		--assert strict-equal? -1.#INF 1.1 * -1.7976931348623157e+308
		--assert strict-equal? -1.#INF multiply 1.1 -1.7976931348623157e+308
		--assert strict-equal? -1.#INF i * j
		--assert strict-equal? -1.#INF multiply i j

	--test-- "float-multiply 53"
		i: -1.1
		j: 1.7976931348623157e+308
		--assert strict-equal? -1.#INF -1.1 * 1.7976931348623157e+308
		--assert strict-equal? -1.#INF multiply -1.1 1.7976931348623157e+308
		--assert strict-equal? -1.#INF i * j
		--assert strict-equal? -1.#INF multiply i j

	--test-- "float-multiply 54"
		i: -1.1
		j: -1.7976931348623157e+308
		--assert strict-equal? 1.#INF -1.1 * -1.7976931348623157e+308
		--assert strict-equal? 1.#INF multiply -1.1 -1.7976931348623157e+308
		--assert strict-equal? 1.#INF i * j
		--assert strict-equal? 1.#INF multiply i j

	--test-- "float-multiply 55"
		i: 1.7976931348623157e+308
		j: -1.7976931348623157e+308
		--assert strict-equal? -1.#INF 1.7976931348623157e+308 * -1.7976931348623157e+308
		--assert strict-equal? -1.#INF multiply 1.7976931348623157e+308 -1.7976931348623157e+308
		--assert strict-equal? -1.#INF i * j
		--assert strict-equal? -1.#INF multiply i j

	--test-- "float-multiply 56"
		i: 0.0
		j: 0.0
		--assert strict-equal? 0.0 0.0 * 0.0
		--assert strict-equal? 0.0 multiply 0.0 0.0
		--assert strict-equal? 0.0 i * j
		--assert strict-equal? 0.0 multiply i j

	--test-- "float-multiply 57"
		i: 1.0
		j: 1.0
		--assert strict-equal? 1.0 1.0 * 1.0
		--assert strict-equal? 1.0 multiply 1.0 1.0
		--assert strict-equal? 1.0 i * j
		--assert strict-equal? 1.0 multiply i j

	--test-- "float-multiply 58"
		i: -1.0
		j: -1.0
		--assert strict-equal? 1.0 -1.0 * -1.0
		--assert strict-equal? 1.0 multiply -1.0 -1.0
		--assert strict-equal? 1.0 i * j
		--assert strict-equal? 1.0 multiply i j

	--test-- "float-multiply 59"
		i: 2.2250738585072014e-308
		j: 2.2250738585072014e-308
		--assert strict-equal? 0.0 2.2250738585072014e-308 * 2.2250738585072014e-308
		--assert strict-equal? 0.0 multiply 2.2250738585072014e-308 2.2250738585072014e-308
		--assert strict-equal? 0.0 i * j
		--assert strict-equal? 0.0 multiply i j

	--test-- "float-multiply 60"
		i: -2.2250738585072014e-308
		j: -2.2250738585072014e-308
		--assert strict-equal? 0.0 -2.2250738585072014e-308 * -2.2250738585072014e-308
		--assert strict-equal? 0.0 multiply -2.2250738585072014e-308 -2.2250738585072014e-308
		--assert strict-equal? 0.0 i * j
		--assert strict-equal? 0.0 multiply i j

	--test-- "float-multiply 61"
		i: 1.7976931348623157e+308
		j: 1.7976931348623157e+308
		--assert strict-equal? 1.#INF 1.7976931348623157e+308 * 1.7976931348623157e+308
		--assert strict-equal? 1.#INF multiply 1.7976931348623157e+308 1.7976931348623157e+308
		--assert strict-equal? 1.#INF i * j
		--assert strict-equal? 1.#INF multiply i j

	--test-- "float-multiply 62"
		i: -1.7976931348623157e+308
		j: -1.7976931348623157e+308
		--assert strict-equal? 1.#INF -1.7976931348623157e+308 * -1.7976931348623157e+308
		--assert strict-equal? 1.#INF multiply -1.7976931348623157e+308 -1.7976931348623157e+308
		--assert strict-equal? 1.#INF i * j
		--assert strict-equal? 1.#INF multiply i j

	--test-- "float-multiply 63"
		i: 1.1
		j: 1.1
		--assert strict-equal? 1.2100000000000002 1.1 * 1.1
		--assert strict-equal? 1.2100000000000002 multiply 1.1 1.1
		--assert strict-equal? 1.2100000000000002 i * j
		--assert strict-equal? 1.2100000000000002 multiply i j

	--test-- "float-multiply 64"
		i: -1.1
		j: -1.1
		--assert strict-equal? 1.2100000000000002 -1.1 * -1.1
		--assert strict-equal? 1.2100000000000002 multiply -1.1 -1.1
		--assert strict-equal? 1.2100000000000002 i * j
		--assert strict-equal? 1.2100000000000002 multiply i j

	--test-- "float-multiply 65"
		i: 1.7976931348623157e+308
		j: 1.7976931348623157e+308
		--assert strict-equal? 1.#INF 1.7976931348623157e+308 * 1.7976931348623157e+308
		--assert strict-equal? 1.#INF multiply 1.7976931348623157e+308 1.7976931348623157e+308
		--assert strict-equal? 1.#INF i * j
		--assert strict-equal? 1.#INF multiply i j

	--test-- "float-multiply 66"
		i: -1.7976931348623157e+308
		j: -1.7976931348623157e+308
		--assert strict-equal? 1.#INF -1.7976931348623157e+308 * -1.7976931348623157e+308
		--assert strict-equal? 1.#INF multiply -1.7976931348623157e+308 -1.7976931348623157e+308
		--assert strict-equal? 1.#INF i * j
		--assert strict-equal? 1.#INF multiply i j

===end-group===
===start-group=== "float-divide"
	--test-- "float-divide 1"
		i: 0.0
		j: 1.0
		--assert strict-equal? 0.0 0.0 / 1.0
		--assert strict-equal? 0.0 divide 0.0 1.0
		--assert strict-equal? 0.0 i / j
		--assert strict-equal? 0.0 divide i j

	--test-- "float-divide 2"
		i: 0.0
		j: -1.0
		--assert strict-equal? -0.0 0.0 / -1.0
		--assert strict-equal? -0.0 divide 0.0 -1.0
		--assert strict-equal? -0.0 i / j
		--assert strict-equal? -0.0 divide i j

	--test-- "float-divide 3"
		i: 0.0
		j: 2.2250738585072014e-308
		--assert strict-equal? 0.0 0.0 / 2.2250738585072014e-308
		--assert strict-equal? 0.0 divide 0.0 2.2250738585072014e-308
		--assert strict-equal? 0.0 i / j
		--assert strict-equal? 0.0 divide i j

	--test-- "float-divide 4"
		i: 0.0
		j: -2.2250738585072014e-308
		--assert strict-equal? -0.0 0.0 / -2.2250738585072014e-308
		--assert strict-equal? -0.0 divide 0.0 -2.2250738585072014e-308
		--assert strict-equal? -0.0 i / j
		--assert strict-equal? -0.0 divide i j

	--test-- "float-divide 5"
		i: 0.0
		j: 1.7976931348623157e+308
		--assert strict-equal? 0.0 0.0 / 1.7976931348623157e+308
		--assert strict-equal? 0.0 divide 0.0 1.7976931348623157e+308
		--assert strict-equal? 0.0 i / j
		--assert strict-equal? 0.0 divide i j

	--test-- "float-divide 6"
		i: 0.0
		j: -1.7976931348623157e+308
		--assert strict-equal? -0.0 0.0 / -1.7976931348623157e+308
		--assert strict-equal? -0.0 divide 0.0 -1.7976931348623157e+308
		--assert strict-equal? -0.0 i / j
		--assert strict-equal? -0.0 divide i j

	--test-- "float-divide 7"
		i: 0.0
		j: 1.1
		--assert strict-equal? 0.0 0.0 / 1.1
		--assert strict-equal? 0.0 divide 0.0 1.1
		--assert strict-equal? 0.0 i / j
		--assert strict-equal? 0.0 divide i j

	--test-- "float-divide 8"
		i: 0.0
		j: -1.1
		--assert strict-equal? -0.0 0.0 / -1.1
		--assert strict-equal? -0.0 divide 0.0 -1.1
		--assert strict-equal? -0.0 i / j
		--assert strict-equal? -0.0 divide i j

	--test-- "float-divide 9"
		i: 0.0
		j: 1.7976931348623157e+308
		--assert strict-equal? 0.0 0.0 / 1.7976931348623157e+308
		--assert strict-equal? 0.0 divide 0.0 1.7976931348623157e+308
		--assert strict-equal? 0.0 i / j
		--assert strict-equal? 0.0 divide i j

	--test-- "float-divide 10"
		i: 0.0
		j: -1.7976931348623157e+308
		--assert strict-equal? -0.0 0.0 / -1.7976931348623157e+308
		--assert strict-equal? -0.0 divide 0.0 -1.7976931348623157e+308
		--assert strict-equal? -0.0 i / j
		--assert strict-equal? -0.0 divide i j

	--test-- "float-divide 11"
		i: 1.0
		j: 0.0
		;--assert strict-equal? 1.#INF 1.0 / 0.0
		;--assert strict-equal? 1.#INF divide 1.0 0.0
		;--assert strict-equal? 1.#INF i / j
		;--assert strict-equal? 1.#INF divide i j

	--test-- "float-divide 12"
		i: 1.0
		j: -1.0
		--assert strict-equal? -1.0 1.0 / -1.0
		--assert strict-equal? -1.0 divide 1.0 -1.0
		--assert strict-equal? -1.0 i / j
		--assert strict-equal? -1.0 divide i j

	--test-- "float-divide 13"
		i: 1.0
		j: 2.2250738585072014e-308
		--assert strict-equal? 4.49423283715579e+307 1.0 / 2.2250738585072014e-308
		--assert strict-equal? 4.49423283715579e+307 divide 1.0 2.2250738585072014e-308
		--assert strict-equal? 4.49423283715579e+307 i / j
		--assert strict-equal? 4.49423283715579e+307 divide i j

	--test-- "float-divide 14"
		i: 1.0
		j: -2.2250738585072014e-308
		--assert strict-equal? -4.49423283715579e+307 1.0 / -2.2250738585072014e-308
		--assert strict-equal? -4.49423283715579e+307 divide 1.0 -2.2250738585072014e-308
		--assert strict-equal? -4.49423283715579e+307 i / j
		--assert strict-equal? -4.49423283715579e+307 divide i j

	--test-- "float-divide 15"
		i: 1.0
		j: 1.7976931348623157e+308
		--assert strict-equal? 5.562684646268003e-309 1.0 / 1.7976931348623157e+308
		--assert strict-equal? 5.562684646268003e-309 divide 1.0 1.7976931348623157e+308
		--assert strict-equal? 5.562684646268003e-309 i / j
		--assert strict-equal? 5.562684646268003e-309 divide i j

	--test-- "float-divide 16"
		i: 1.0
		j: -1.7976931348623157e+308
		--assert strict-equal? -5.562684646268003e-309 1.0 / -1.7976931348623157e+308
		--assert strict-equal? -5.562684646268003e-309 divide 1.0 -1.7976931348623157e+308
		--assert strict-equal? -5.562684646268003e-309 i / j
		--assert strict-equal? -5.562684646268003e-309 divide i j

	--test-- "float-divide 17"
		i: 1.0
		j: 1.1
		--assert strict-equal? 0.9090909090909091 1.0 / 1.1
		--assert strict-equal? 0.9090909090909091 divide 1.0 1.1
		--assert strict-equal? 0.9090909090909091 i / j
		--assert strict-equal? 0.9090909090909091 divide i j

	--test-- "float-divide 18"
		i: 1.0
		j: -1.1
		--assert strict-equal? -0.9090909090909091 1.0 / -1.1
		--assert strict-equal? -0.9090909090909091 divide 1.0 -1.1
		--assert strict-equal? -0.9090909090909091 i / j
		--assert strict-equal? -0.9090909090909091 divide i j

	--test-- "float-divide 19"
		i: 1.0
		j: 1.7976931348623157e+308
		--assert strict-equal? 5.562684646268003e-309 1.0 / 1.7976931348623157e+308
		--assert strict-equal? 5.562684646268003e-309 divide 1.0 1.7976931348623157e+308
		--assert strict-equal? 5.562684646268003e-309 i / j
		--assert strict-equal? 5.562684646268003e-309 divide i j

	--test-- "float-divide 20"
		i: 1.0
		j: -1.7976931348623157e+308
		--assert strict-equal? -5.562684646268003e-309 1.0 / -1.7976931348623157e+308
		--assert strict-equal? -5.562684646268003e-309 divide 1.0 -1.7976931348623157e+308
		--assert strict-equal? -5.562684646268003e-309 i / j
		--assert strict-equal? -5.562684646268003e-309 divide i j

	--test-- "float-divide 21"
		i: -1.0
		j: 0.0
		;--assert strict-equal? -1.#INF -1.0 / 0.0
		;--assert strict-equal? -1.#INF divide -1.0 0.0
		;--assert strict-equal? -1.#INF i / j
		;--assert strict-equal? -1.#INF divide i j

	--test-- "float-divide 22"
		i: -1.0
		j: 1.0
		--assert strict-equal? -1.0 -1.0 / 1.0
		--assert strict-equal? -1.0 divide -1.0 1.0
		--assert strict-equal? -1.0 i / j
		--assert strict-equal? -1.0 divide i j

	--test-- "float-divide 23"
		i: -1.0
		j: 2.2250738585072014e-308
		--assert strict-equal? -4.49423283715579e+307 -1.0 / 2.2250738585072014e-308
		--assert strict-equal? -4.49423283715579e+307 divide -1.0 2.2250738585072014e-308
		--assert strict-equal? -4.49423283715579e+307 i / j
		--assert strict-equal? -4.49423283715579e+307 divide i j

	--test-- "float-divide 24"
		i: -1.0
		j: -2.2250738585072014e-308
		--assert strict-equal? 4.49423283715579e+307 -1.0 / -2.2250738585072014e-308
		--assert strict-equal? 4.49423283715579e+307 divide -1.0 -2.2250738585072014e-308
		--assert strict-equal? 4.49423283715579e+307 i / j
		--assert strict-equal? 4.49423283715579e+307 divide i j

	--test-- "float-divide 25"
		i: -1.0
		j: 1.7976931348623157e+308
		--assert strict-equal? -5.562684646268003e-309 -1.0 / 1.7976931348623157e+308
		--assert strict-equal? -5.562684646268003e-309 divide -1.0 1.7976931348623157e+308
		--assert strict-equal? -5.562684646268003e-309 i / j
		--assert strict-equal? -5.562684646268003e-309 divide i j

	--test-- "float-divide 26"
		i: -1.0
		j: -1.7976931348623157e+308
		--assert strict-equal? 5.562684646268003e-309 -1.0 / -1.7976931348623157e+308
		--assert strict-equal? 5.562684646268003e-309 divide -1.0 -1.7976931348623157e+308
		--assert strict-equal? 5.562684646268003e-309 i / j
		--assert strict-equal? 5.562684646268003e-309 divide i j

	--test-- "float-divide 27"
		i: -1.0
		j: 1.1
		--assert strict-equal? -0.9090909090909091 -1.0 / 1.1
		--assert strict-equal? -0.9090909090909091 divide -1.0 1.1
		--assert strict-equal? -0.9090909090909091 i / j
		--assert strict-equal? -0.9090909090909091 divide i j

	--test-- "float-divide 28"
		i: -1.0
		j: -1.1
		--assert strict-equal? 0.9090909090909091 -1.0 / -1.1
		--assert strict-equal? 0.9090909090909091 divide -1.0 -1.1
		--assert strict-equal? 0.9090909090909091 i / j
		--assert strict-equal? 0.9090909090909091 divide i j

	--test-- "float-divide 29"
		i: -1.0
		j: 1.7976931348623157e+308
		--assert strict-equal? -5.562684646268003e-309 -1.0 / 1.7976931348623157e+308
		--assert strict-equal? -5.562684646268003e-309 divide -1.0 1.7976931348623157e+308
		--assert strict-equal? -5.562684646268003e-309 i / j
		--assert strict-equal? -5.562684646268003e-309 divide i j

	--test-- "float-divide 30"
		i: -1.0
		j: -1.7976931348623157e+308
		--assert strict-equal? 5.562684646268003e-309 -1.0 / -1.7976931348623157e+308
		--assert strict-equal? 5.562684646268003e-309 divide -1.0 -1.7976931348623157e+308
		--assert strict-equal? 5.562684646268003e-309 i / j
		--assert strict-equal? 5.562684646268003e-309 divide i j

	--test-- "float-divide 31"
		i: 2.2250738585072014e-308
		j: 0.0
		;--assert strict-equal? 1.#INF 2.2250738585072014e-308 / 0.0
		;--assert strict-equal? 1.#INF divide 2.2250738585072014e-308 0.0
		;--assert strict-equal? 1.#INF i / j
		;--assert strict-equal? 1.#INF divide i j

	--test-- "float-divide 32"
		i: 2.2250738585072014e-308
		j: 1.0
		--assert strict-equal? 2.2250738585072014e-308 2.2250738585072014e-308 / 1.0
		--assert strict-equal? 2.2250738585072014e-308 divide 2.2250738585072014e-308 1.0
		--assert strict-equal? 2.2250738585072014e-308 i / j
		--assert strict-equal? 2.2250738585072014e-308 divide i j

	--test-- "float-divide 33"
		i: 2.2250738585072014e-308
		j: -1.0
		--assert strict-equal? -2.2250738585072014e-308 2.2250738585072014e-308 / -1.0
		--assert strict-equal? -2.2250738585072014e-308 divide 2.2250738585072014e-308 -1.0
		--assert strict-equal? -2.2250738585072014e-308 i / j
		--assert strict-equal? -2.2250738585072014e-308 divide i j

	--test-- "float-divide 34"
		i: 2.2250738585072014e-308
		j: -2.2250738585072014e-308
		--assert strict-equal? -1.0 2.2250738585072014e-308 / -2.2250738585072014e-308
		--assert strict-equal? -1.0 divide 2.2250738585072014e-308 -2.2250738585072014e-308
		--assert strict-equal? -1.0 i / j
		--assert strict-equal? -1.0 divide i j

	--test-- "float-divide 35"
		i: 2.2250738585072014e-308
		j: 1.7976931348623157e+308
		--assert strict-equal? 0.0 2.2250738585072014e-308 / 1.7976931348623157e+308
		--assert strict-equal? 0.0 divide 2.2250738585072014e-308 1.7976931348623157e+308
		--assert strict-equal? 0.0 i / j
		--assert strict-equal? 0.0 divide i j

	--test-- "float-divide 36"
		i: 2.2250738585072014e-308
		j: -1.7976931348623157e+308
		--assert strict-equal? -0.0 2.2250738585072014e-308 / -1.7976931348623157e+308
		--assert strict-equal? -0.0 divide 2.2250738585072014e-308 -1.7976931348623157e+308
		--assert strict-equal? -0.0 i / j
		--assert strict-equal? -0.0 divide i j

	--test-- "float-divide 37"
		i: 2.2250738585072014e-308
		j: 1.1
		;--assert strict-equal? 2.022794416824728e-308 2.2250738585072014e-308 / 1.1
		;--assert strict-equal? 2.022794416824728e-308 divide 2.2250738585072014e-308 1.1
		;--assert strict-equal? 2.022794416824728e-308 i / j
		;--assert strict-equal? 2.022794416824728e-308 divide i j

	--test-- "float-divide 38"
		i: 2.2250738585072014e-308
		j: -1.1
		;--assert strict-equal? -2.022794416824728e-308 2.2250738585072014e-308 / -1.1
		;--assert strict-equal? -2.022794416824728e-308 divide 2.2250738585072014e-308 -1.1
		;--assert strict-equal? -2.022794416824728e-308 i / j
		;--assert strict-equal? -2.022794416824728e-308 divide i j

	--test-- "float-divide 39"
		i: 2.2250738585072014e-308
		j: 1.7976931348623157e+308
		--assert strict-equal? 0.0 2.2250738585072014e-308 / 1.7976931348623157e+308
		--assert strict-equal? 0.0 divide 2.2250738585072014e-308 1.7976931348623157e+308
		--assert strict-equal? 0.0 i / j
		--assert strict-equal? 0.0 divide i j

	--test-- "float-divide 40"
		i: 2.2250738585072014e-308
		j: -1.7976931348623157e+308
		--assert strict-equal? -0.0 2.2250738585072014e-308 / -1.7976931348623157e+308
		--assert strict-equal? -0.0 divide 2.2250738585072014e-308 -1.7976931348623157e+308
		--assert strict-equal? -0.0 i / j
		--assert strict-equal? -0.0 divide i j

	--test-- "float-divide 41"
		i: -2.2250738585072014e-308
		j: 0.0
		;--assert strict-equal? -1.#INF -2.2250738585072014e-308 / 0.0
		;--assert strict-equal? -1.#INF divide -2.2250738585072014e-308 0.0
		;--assert strict-equal? -1.#INF i / j
		;--assert strict-equal? -1.#INF divide i j

	--test-- "float-divide 42"
		i: -2.2250738585072014e-308
		j: 1.0
		--assert strict-equal? -2.2250738585072014e-308 -2.2250738585072014e-308 / 1.0
		--assert strict-equal? -2.2250738585072014e-308 divide -2.2250738585072014e-308 1.0
		--assert strict-equal? -2.2250738585072014e-308 i / j
		--assert strict-equal? -2.2250738585072014e-308 divide i j

	--test-- "float-divide 43"
		i: -2.2250738585072014e-308
		j: -1.0
		--assert strict-equal? 2.2250738585072014e-308 -2.2250738585072014e-308 / -1.0
		--assert strict-equal? 2.2250738585072014e-308 divide -2.2250738585072014e-308 -1.0
		--assert strict-equal? 2.2250738585072014e-308 i / j
		--assert strict-equal? 2.2250738585072014e-308 divide i j

	--test-- "float-divide 44"
		i: -2.2250738585072014e-308
		j: 2.2250738585072014e-308
		--assert strict-equal? -1.0 -2.2250738585072014e-308 / 2.2250738585072014e-308
		--assert strict-equal? -1.0 divide -2.2250738585072014e-308 2.2250738585072014e-308
		--assert strict-equal? -1.0 i / j
		--assert strict-equal? -1.0 divide i j

	--test-- "float-divide 45"
		i: -2.2250738585072014e-308
		j: 1.7976931348623157e+308
		--assert strict-equal? -0.0 -2.2250738585072014e-308 / 1.7976931348623157e+308
		--assert strict-equal? -0.0 divide -2.2250738585072014e-308 1.7976931348623157e+308
		--assert strict-equal? -0.0 i / j
		--assert strict-equal? -0.0 divide i j

	--test-- "float-divide 46"
		i: -2.2250738585072014e-308
		j: -1.7976931348623157e+308
		--assert strict-equal? 0.0 -2.2250738585072014e-308 / -1.7976931348623157e+308
		--assert strict-equal? 0.0 divide -2.2250738585072014e-308 -1.7976931348623157e+308
		--assert strict-equal? 0.0 i / j
		--assert strict-equal? 0.0 divide i j

	--test-- "float-divide 47"
		i: -2.2250738585072014e-308
		j: 1.1
		;--assert strict-equal? -2.022794416824728e-308 -2.2250738585072014e-308 / 1.1
		;--assert strict-equal? -2.022794416824728e-308 divide -2.2250738585072014e-308 1.1
		;--assert strict-equal? -2.022794416824728e-308 i / j
		;--assert strict-equal? -2.022794416824728e-308 divide i j

	--test-- "float-divide 48"
		i: -2.2250738585072014e-308
		j: -1.1
		;--assert strict-equal? 2.022794416824728e-308 -2.2250738585072014e-308 / -1.1
		;--assert strict-equal? 2.022794416824728e-308 divide -2.2250738585072014e-308 -1.1
		;--assert strict-equal? 2.022794416824728e-308 i / j
		;--assert strict-equal? 2.022794416824728e-308 divide i j

	--test-- "float-divide 49"
		i: -2.2250738585072014e-308
		j: 1.7976931348623157e+308
		--assert strict-equal? -0.0 -2.2250738585072014e-308 / 1.7976931348623157e+308
		--assert strict-equal? -0.0 divide -2.2250738585072014e-308 1.7976931348623157e+308
		--assert strict-equal? -0.0 i / j
		--assert strict-equal? -0.0 divide i j

	--test-- "float-divide 50"
		i: -2.2250738585072014e-308
		j: -1.7976931348623157e+308
		--assert strict-equal? 0.0 -2.2250738585072014e-308 / -1.7976931348623157e+308
		--assert strict-equal? 0.0 divide -2.2250738585072014e-308 -1.7976931348623157e+308
		--assert strict-equal? 0.0 i / j
		--assert strict-equal? 0.0 divide i j

	--test-- "float-divide 51"
		i: 1.7976931348623157e+308
		j: 0.0
		;--assert strict-equal? 1.#INF 1.7976931348623157e+308 / 0.0
		;--assert strict-equal? 1.#INF divide 1.7976931348623157e+308 0.0
		;--assert strict-equal? 1.#INF i / j
		;--assert strict-equal? 1.#INF divide i j

	--test-- "float-divide 52"
		i: 1.7976931348623157e+308
		j: 1.0
		--assert strict-equal? 1.7976931348623157e+308 1.7976931348623157e+308 / 1.0
		--assert strict-equal? 1.7976931348623157e+308 divide 1.7976931348623157e+308 1.0
		--assert strict-equal? 1.7976931348623157e+308 i / j
		--assert strict-equal? 1.7976931348623157e+308 divide i j

	--test-- "float-divide 53"
		i: 1.7976931348623157e+308
		j: -1.0
		--assert strict-equal? -1.7976931348623157e+308 1.7976931348623157e+308 / -1.0
		--assert strict-equal? -1.7976931348623157e+308 divide 1.7976931348623157e+308 -1.0
		--assert strict-equal? -1.7976931348623157e+308 i / j
		--assert strict-equal? -1.7976931348623157e+308 divide i j

	--test-- "float-divide 54"
		i: 1.7976931348623157e+308
		j: 2.2250738585072014e-308
		--assert strict-equal? 1.#INF 1.7976931348623157e+308 / 2.2250738585072014e-308
		--assert strict-equal? 1.#INF divide 1.7976931348623157e+308 2.2250738585072014e-308
		--assert strict-equal? 1.#INF i / j
		--assert strict-equal? 1.#INF divide i j

	--test-- "float-divide 55"
		i: 1.7976931348623157e+308
		j: -2.2250738585072014e-308
		--assert strict-equal? -1.#INF 1.7976931348623157e+308 / -2.2250738585072014e-308
		--assert strict-equal? -1.#INF divide 1.7976931348623157e+308 -2.2250738585072014e-308
		--assert strict-equal? -1.#INF i / j
		--assert strict-equal? -1.#INF divide i j

	--test-- "float-divide 56"
		i: 1.7976931348623157e+308
		j: -1.7976931348623157e+308
		--assert strict-equal? -1.0 1.7976931348623157e+308 / -1.7976931348623157e+308
		--assert strict-equal? -1.0 divide 1.7976931348623157e+308 -1.7976931348623157e+308
		--assert strict-equal? -1.0 i / j
		--assert strict-equal? -1.0 divide i j

	--test-- "float-divide 57"
		i: 1.7976931348623157e+308
		j: 1.1
		--assert strict-equal? 1.6342664862384688e+308 1.7976931348623157e+308 / 1.1
		--assert strict-equal? 1.6342664862384688e+308 divide 1.7976931348623157e+308 1.1
		--assert strict-equal? 1.6342664862384688e+308 i / j
		--assert strict-equal? 1.6342664862384688e+308 divide i j

	--test-- "float-divide 58"
		i: 1.7976931348623157e+308
		j: -1.1
		--assert strict-equal? -1.6342664862384688e+308 1.7976931348623157e+308 / -1.1
		--assert strict-equal? -1.6342664862384688e+308 divide 1.7976931348623157e+308 -1.1
		--assert strict-equal? -1.6342664862384688e+308 i / j
		--assert strict-equal? -1.6342664862384688e+308 divide i j

	--test-- "float-divide 59"
		i: 1.7976931348623157e+308
		j: 1.7976931348623157e+308
		--assert strict-equal? 1.0 1.7976931348623157e+308 / 1.7976931348623157e+308
		--assert strict-equal? 1.0 divide 1.7976931348623157e+308 1.7976931348623157e+308
		--assert strict-equal? 1.0 i / j
		--assert strict-equal? 1.0 divide i j

	--test-- "float-divide 60"
		i: 1.7976931348623157e+308
		j: -1.7976931348623157e+308
		--assert strict-equal? -1.0 1.7976931348623157e+308 / -1.7976931348623157e+308
		--assert strict-equal? -1.0 divide 1.7976931348623157e+308 -1.7976931348623157e+308
		--assert strict-equal? -1.0 i / j
		--assert strict-equal? -1.0 divide i j

	--test-- "float-divide 61"
		i: -1.7976931348623157e+308
		j: 0.0
		;--assert strict-equal? -1.#INF -1.7976931348623157e+308 / 0.0
		;--assert strict-equal? -1.#INF divide -1.7976931348623157e+308 0.0
		;--assert strict-equal? -1.#INF i / j
		;--assert strict-equal? -1.#INF divide i j

	--test-- "float-divide 62"
		i: -1.7976931348623157e+308
		j: 1.0
		--assert strict-equal? -1.7976931348623157e+308 -1.7976931348623157e+308 / 1.0
		--assert strict-equal? -1.7976931348623157e+308 divide -1.7976931348623157e+308 1.0
		--assert strict-equal? -1.7976931348623157e+308 i / j
		--assert strict-equal? -1.7976931348623157e+308 divide i j

	--test-- "float-divide 63"
		i: -1.7976931348623157e+308
		j: -1.0
		--assert strict-equal? 1.7976931348623157e+308 -1.7976931348623157e+308 / -1.0
		--assert strict-equal? 1.7976931348623157e+308 divide -1.7976931348623157e+308 -1.0
		--assert strict-equal? 1.7976931348623157e+308 i / j
		--assert strict-equal? 1.7976931348623157e+308 divide i j

	--test-- "float-divide 64"
		i: -1.7976931348623157e+308
		j: 2.2250738585072014e-308
		--assert strict-equal? -1.#INF -1.7976931348623157e+308 / 2.2250738585072014e-308
		--assert strict-equal? -1.#INF divide -1.7976931348623157e+308 2.2250738585072014e-308
		--assert strict-equal? -1.#INF i / j
		--assert strict-equal? -1.#INF divide i j

	--test-- "float-divide 65"
		i: -1.7976931348623157e+308
		j: -2.2250738585072014e-308
		--assert strict-equal? 1.#INF -1.7976931348623157e+308 / -2.2250738585072014e-308
		--assert strict-equal? 1.#INF divide -1.7976931348623157e+308 -2.2250738585072014e-308
		--assert strict-equal? 1.#INF i / j
		--assert strict-equal? 1.#INF divide i j

	--test-- "float-divide 66"
		i: -1.7976931348623157e+308
		j: 1.7976931348623157e+308
		--assert strict-equal? -1.0 -1.7976931348623157e+308 / 1.7976931348623157e+308
		--assert strict-equal? -1.0 divide -1.7976931348623157e+308 1.7976931348623157e+308
		--assert strict-equal? -1.0 i / j
		--assert strict-equal? -1.0 divide i j

	--test-- "float-divide 67"
		i: -1.7976931348623157e+308
		j: 1.1
		--assert strict-equal? -1.6342664862384688e+308 -1.7976931348623157e+308 / 1.1
		--assert strict-equal? -1.6342664862384688e+308 divide -1.7976931348623157e+308 1.1
		--assert strict-equal? -1.6342664862384688e+308 i / j
		--assert strict-equal? -1.6342664862384688e+308 divide i j

	--test-- "float-divide 68"
		i: -1.7976931348623157e+308
		j: -1.1
		--assert strict-equal? 1.6342664862384688e+308 -1.7976931348623157e+308 / -1.1
		--assert strict-equal? 1.6342664862384688e+308 divide -1.7976931348623157e+308 -1.1
		--assert strict-equal? 1.6342664862384688e+308 i / j
		--assert strict-equal? 1.6342664862384688e+308 divide i j

	--test-- "float-divide 69"
		i: -1.7976931348623157e+308
		j: 1.7976931348623157e+308
		--assert strict-equal? -1.0 -1.7976931348623157e+308 / 1.7976931348623157e+308
		--assert strict-equal? -1.0 divide -1.7976931348623157e+308 1.7976931348623157e+308
		--assert strict-equal? -1.0 i / j
		--assert strict-equal? -1.0 divide i j

	--test-- "float-divide 70"
		i: -1.7976931348623157e+308
		j: -1.7976931348623157e+308
		--assert strict-equal? 1.0 -1.7976931348623157e+308 / -1.7976931348623157e+308
		--assert strict-equal? 1.0 divide -1.7976931348623157e+308 -1.7976931348623157e+308
		--assert strict-equal? 1.0 i / j
		--assert strict-equal? 1.0 divide i j

	--test-- "float-divide 71"
		i: 1.1
		j: 0.0
		;--assert strict-equal? 1.#INF 1.1 / 0.0
		;--assert strict-equal? 1.#INF divide 1.1 0.0
		;--assert strict-equal? 1.#INF i / j
		;--assert strict-equal? 1.#INF divide i j

	--test-- "float-divide 72"
		i: 1.1
		j: 1.0
		--assert strict-equal? 1.1 1.1 / 1.0
		--assert strict-equal? 1.1 divide 1.1 1.0
		--assert strict-equal? 1.1 i / j
		--assert strict-equal? 1.1 divide i j

	--test-- "float-divide 73"
		i: 1.1
		j: -1.0
		--assert strict-equal? -1.1 1.1 / -1.0
		--assert strict-equal? -1.1 divide 1.1 -1.0
		--assert strict-equal? -1.1 i / j
		--assert strict-equal? -1.1 divide i j

	--test-- "float-divide 74"
		i: 1.1
		j: 2.2250738585072014e-308
		--assert strict-equal? 4.943656120871369e+307 1.1 / 2.2250738585072014e-308
		--assert strict-equal? 4.943656120871369e+307 divide 1.1 2.2250738585072014e-308
		--assert strict-equal? 4.943656120871369e+307 i / j
		--assert strict-equal? 4.943656120871369e+307 divide i j

	--test-- "float-divide 75"
		i: 1.1
		j: -2.2250738585072014e-308
		--assert strict-equal? -4.943656120871369e+307 1.1 / -2.2250738585072014e-308
		--assert strict-equal? -4.943656120871369e+307 divide 1.1 -2.2250738585072014e-308
		--assert strict-equal? -4.943656120871369e+307 i / j
		--assert strict-equal? -4.943656120871369e+307 divide i j

	--test-- "float-divide 76"
		i: 1.1
		j: 1.7976931348623157e+308
		--assert strict-equal? 6.118953110894807e-309 1.1 / 1.7976931348623157e+308
		--assert strict-equal? 6.118953110894807e-309 divide 1.1 1.7976931348623157e+308
		--assert strict-equal? 6.118953110894807e-309 i / j
		--assert strict-equal? 6.118953110894807e-309 divide i j

	--test-- "float-divide 77"
		i: 1.1
		j: -1.7976931348623157e+308
		--assert strict-equal? -6.118953110894807e-309 1.1 / -1.7976931348623157e+308
		--assert strict-equal? -6.118953110894807e-309 divide 1.1 -1.7976931348623157e+308
		--assert strict-equal? -6.118953110894807e-309 i / j
		--assert strict-equal? -6.118953110894807e-309 divide i j

	--test-- "float-divide 78"
		i: 1.1
		j: -1.1
		--assert strict-equal? -1.0 1.1 / -1.1
		--assert strict-equal? -1.0 divide 1.1 -1.1
		--assert strict-equal? -1.0 i / j
		--assert strict-equal? -1.0 divide i j

	--test-- "float-divide 79"
		i: 1.1
		j: 1.7976931348623157e+308
		--assert strict-equal? 6.118953110894807e-309 1.1 / 1.7976931348623157e+308
		--assert strict-equal? 6.118953110894807e-309 divide 1.1 1.7976931348623157e+308
		--assert strict-equal? 6.118953110894807e-309 i / j
		--assert strict-equal? 6.118953110894807e-309 divide i j

	--test-- "float-divide 80"
		i: 1.1
		j: -1.7976931348623157e+308
		--assert strict-equal? -6.118953110894807e-309 1.1 / -1.7976931348623157e+308
		--assert strict-equal? -6.118953110894807e-309 divide 1.1 -1.7976931348623157e+308
		--assert strict-equal? -6.118953110894807e-309 i / j
		--assert strict-equal? -6.118953110894807e-309 divide i j

	--test-- "float-divide 81"
		i: -1.1
		j: 0.0
		;--assert strict-equal? -1.#INF -1.1 / 0.0
		;--assert strict-equal? -1.#INF divide -1.1 0.0
		;--assert strict-equal? -1.#INF i / j
		;--assert strict-equal? -1.#INF divide i j

	--test-- "float-divide 82"
		i: -1.1
		j: 1.0
		--assert strict-equal? -1.1 -1.1 / 1.0
		--assert strict-equal? -1.1 divide -1.1 1.0
		--assert strict-equal? -1.1 i / j
		--assert strict-equal? -1.1 divide i j

	--test-- "float-divide 83"
		i: -1.1
		j: -1.0
		--assert strict-equal? 1.1 -1.1 / -1.0
		--assert strict-equal? 1.1 divide -1.1 -1.0
		--assert strict-equal? 1.1 i / j
		--assert strict-equal? 1.1 divide i j

	--test-- "float-divide 84"
		i: -1.1
		j: 2.2250738585072014e-308
		--assert strict-equal? -4.943656120871369e+307 -1.1 / 2.2250738585072014e-308
		--assert strict-equal? -4.943656120871369e+307 divide -1.1 2.2250738585072014e-308
		--assert strict-equal? -4.943656120871369e+307 i / j
		--assert strict-equal? -4.943656120871369e+307 divide i j

	--test-- "float-divide 85"
		i: -1.1
		j: -2.2250738585072014e-308
		--assert strict-equal? 4.943656120871369e+307 -1.1 / -2.2250738585072014e-308
		--assert strict-equal? 4.943656120871369e+307 divide -1.1 -2.2250738585072014e-308
		--assert strict-equal? 4.943656120871369e+307 i / j
		--assert strict-equal? 4.943656120871369e+307 divide i j

	--test-- "float-divide 86"
		i: -1.1
		j: 1.7976931348623157e+308
		--assert strict-equal? -6.118953110894807e-309 -1.1 / 1.7976931348623157e+308
		--assert strict-equal? -6.118953110894807e-309 divide -1.1 1.7976931348623157e+308
		--assert strict-equal? -6.118953110894807e-309 i / j
		--assert strict-equal? -6.118953110894807e-309 divide i j

	--test-- "float-divide 87"
		i: -1.1
		j: -1.7976931348623157e+308
		--assert strict-equal? 6.118953110894807e-309 -1.1 / -1.7976931348623157e+308
		--assert strict-equal? 6.118953110894807e-309 divide -1.1 -1.7976931348623157e+308
		--assert strict-equal? 6.118953110894807e-309 i / j
		--assert strict-equal? 6.118953110894807e-309 divide i j

	--test-- "float-divide 88"
		i: -1.1
		j: 1.1
		--assert strict-equal? -1.0 -1.1 / 1.1
		--assert strict-equal? -1.0 divide -1.1 1.1
		--assert strict-equal? -1.0 i / j
		--assert strict-equal? -1.0 divide i j

	--test-- "float-divide 89"
		i: -1.1
		j: 1.7976931348623157e+308
		--assert strict-equal? -6.118953110894807e-309 -1.1 / 1.7976931348623157e+308
		--assert strict-equal? -6.118953110894807e-309 divide -1.1 1.7976931348623157e+308
		--assert strict-equal? -6.118953110894807e-309 i / j
		--assert strict-equal? -6.118953110894807e-309 divide i j

	--test-- "float-divide 90"
		i: -1.1
		j: -1.7976931348623157e+308
		--assert strict-equal? 6.118953110894807e-309 -1.1 / -1.7976931348623157e+308
		--assert strict-equal? 6.118953110894807e-309 divide -1.1 -1.7976931348623157e+308
		--assert strict-equal? 6.118953110894807e-309 i / j
		--assert strict-equal? 6.118953110894807e-309 divide i j

	--test-- "float-divide 91"
		i: 1.7976931348623157e+308
		j: 0.0
		;--assert strict-equal? 1.#INF 1.7976931348623157e+308 / 0.0
		;--assert strict-equal? 1.#INF divide 1.7976931348623157e+308 0.0
		;--assert strict-equal? 1.#INF i / j
		;--assert strict-equal? 1.#INF divide i j

	--test-- "float-divide 92"
		i: 1.7976931348623157e+308
		j: 1.0
		--assert strict-equal? 1.7976931348623157e+308 1.7976931348623157e+308 / 1.0
		--assert strict-equal? 1.7976931348623157e+308 divide 1.7976931348623157e+308 1.0
		--assert strict-equal? 1.7976931348623157e+308 i / j
		--assert strict-equal? 1.7976931348623157e+308 divide i j

	--test-- "float-divide 93"
		i: 1.7976931348623157e+308
		j: -1.0
		--assert strict-equal? -1.7976931348623157e+308 1.7976931348623157e+308 / -1.0
		--assert strict-equal? -1.7976931348623157e+308 divide 1.7976931348623157e+308 -1.0
		--assert strict-equal? -1.7976931348623157e+308 i / j
		--assert strict-equal? -1.7976931348623157e+308 divide i j

	--test-- "float-divide 94"
		i: 1.7976931348623157e+308
		j: 2.2250738585072014e-308
		--assert strict-equal? 1.#INF 1.7976931348623157e+308 / 2.2250738585072014e-308
		--assert strict-equal? 1.#INF divide 1.7976931348623157e+308 2.2250738585072014e-308
		--assert strict-equal? 1.#INF i / j
		--assert strict-equal? 1.#INF divide i j

	--test-- "float-divide 95"
		i: 1.7976931348623157e+308
		j: -2.2250738585072014e-308
		--assert strict-equal? -1.#INF 1.7976931348623157e+308 / -2.2250738585072014e-308
		--assert strict-equal? -1.#INF divide 1.7976931348623157e+308 -2.2250738585072014e-308
		--assert strict-equal? -1.#INF i / j
		--assert strict-equal? -1.#INF divide i j

	--test-- "float-divide 96"
		i: 1.7976931348623157e+308
		j: 1.7976931348623157e+308
		--assert strict-equal? 1.0 1.7976931348623157e+308 / 1.7976931348623157e+308
		--assert strict-equal? 1.0 divide 1.7976931348623157e+308 1.7976931348623157e+308
		--assert strict-equal? 1.0 i / j
		--assert strict-equal? 1.0 divide i j

	--test-- "float-divide 97"
		i: 1.7976931348623157e+308
		j: -1.7976931348623157e+308
		--assert strict-equal? -1.0 1.7976931348623157e+308 / -1.7976931348623157e+308
		--assert strict-equal? -1.0 divide 1.7976931348623157e+308 -1.7976931348623157e+308
		--assert strict-equal? -1.0 i / j
		--assert strict-equal? -1.0 divide i j

	--test-- "float-divide 98"
		i: 1.7976931348623157e+308
		j: 1.1
		--assert strict-equal? 1.6342664862384688e+308 1.7976931348623157e+308 / 1.1
		--assert strict-equal? 1.6342664862384688e+308 divide 1.7976931348623157e+308 1.1
		--assert strict-equal? 1.6342664862384688e+308 i / j
		--assert strict-equal? 1.6342664862384688e+308 divide i j

	--test-- "float-divide 99"
		i: 1.7976931348623157e+308
		j: -1.1
		--assert strict-equal? -1.6342664862384688e+308 1.7976931348623157e+308 / -1.1
		--assert strict-equal? -1.6342664862384688e+308 divide 1.7976931348623157e+308 -1.1
		--assert strict-equal? -1.6342664862384688e+308 i / j
		--assert strict-equal? -1.6342664862384688e+308 divide i j

	--test-- "float-divide 100"
		i: 1.7976931348623157e+308
		j: -1.7976931348623157e+308
		--assert strict-equal? -1.0 1.7976931348623157e+308 / -1.7976931348623157e+308
		--assert strict-equal? -1.0 divide 1.7976931348623157e+308 -1.7976931348623157e+308
		--assert strict-equal? -1.0 i / j
		--assert strict-equal? -1.0 divide i j

	--test-- "float-divide 101"
		i: -1.7976931348623157e+308
		j: 0.0
		;--assert strict-equal? -1.#INF -1.7976931348623157e+308 / 0.0
		;--assert strict-equal? -1.#INF divide -1.7976931348623157e+308 0.0
		;--assert strict-equal? -1.#INF i / j
		;--assert strict-equal? -1.#INF divide i j

	--test-- "float-divide 102"
		i: -1.7976931348623157e+308
		j: 1.0
		--assert strict-equal? -1.7976931348623157e+308 -1.7976931348623157e+308 / 1.0
		--assert strict-equal? -1.7976931348623157e+308 divide -1.7976931348623157e+308 1.0
		--assert strict-equal? -1.7976931348623157e+308 i / j
		--assert strict-equal? -1.7976931348623157e+308 divide i j

	--test-- "float-divide 103"
		i: -1.7976931348623157e+308
		j: -1.0
		--assert strict-equal? 1.7976931348623157e+308 -1.7976931348623157e+308 / -1.0
		--assert strict-equal? 1.7976931348623157e+308 divide -1.7976931348623157e+308 -1.0
		--assert strict-equal? 1.7976931348623157e+308 i / j
		--assert strict-equal? 1.7976931348623157e+308 divide i j

	--test-- "float-divide 104"
		i: -1.7976931348623157e+308
		j: 2.2250738585072014e-308
		--assert strict-equal? -1.#INF -1.7976931348623157e+308 / 2.2250738585072014e-308
		--assert strict-equal? -1.#INF divide -1.7976931348623157e+308 2.2250738585072014e-308
		--assert strict-equal? -1.#INF i / j
		--assert strict-equal? -1.#INF divide i j

	--test-- "float-divide 105"
		i: -1.7976931348623157e+308
		j: -2.2250738585072014e-308
		--assert strict-equal? 1.#INF -1.7976931348623157e+308 / -2.2250738585072014e-308
		--assert strict-equal? 1.#INF divide -1.7976931348623157e+308 -2.2250738585072014e-308
		--assert strict-equal? 1.#INF i / j
		--assert strict-equal? 1.#INF divide i j

	--test-- "float-divide 106"
		i: -1.7976931348623157e+308
		j: 1.7976931348623157e+308
		--assert strict-equal? -1.0 -1.7976931348623157e+308 / 1.7976931348623157e+308
		--assert strict-equal? -1.0 divide -1.7976931348623157e+308 1.7976931348623157e+308
		--assert strict-equal? -1.0 i / j
		--assert strict-equal? -1.0 divide i j

	--test-- "float-divide 107"
		i: -1.7976931348623157e+308
		j: -1.7976931348623157e+308
		--assert strict-equal? 1.0 -1.7976931348623157e+308 / -1.7976931348623157e+308
		--assert strict-equal? 1.0 divide -1.7976931348623157e+308 -1.7976931348623157e+308
		--assert strict-equal? 1.0 i / j
		--assert strict-equal? 1.0 divide i j

	--test-- "float-divide 108"
		i: -1.7976931348623157e+308
		j: 1.1
		--assert strict-equal? -1.6342664862384688e+308 -1.7976931348623157e+308 / 1.1
		--assert strict-equal? -1.6342664862384688e+308 divide -1.7976931348623157e+308 1.1
		--assert strict-equal? -1.6342664862384688e+308 i / j
		--assert strict-equal? -1.6342664862384688e+308 divide i j

	--test-- "float-divide 109"
		i: -1.7976931348623157e+308
		j: -1.1
		--assert strict-equal? 1.6342664862384688e+308 -1.7976931348623157e+308 / -1.1
		--assert strict-equal? 1.6342664862384688e+308 divide -1.7976931348623157e+308 -1.1
		--assert strict-equal? 1.6342664862384688e+308 i / j
		--assert strict-equal? 1.6342664862384688e+308 divide i j

	--test-- "float-divide 110"
		i: -1.7976931348623157e+308
		j: 1.7976931348623157e+308
		--assert strict-equal? -1.0 -1.7976931348623157e+308 / 1.7976931348623157e+308
		--assert strict-equal? -1.0 divide -1.7976931348623157e+308 1.7976931348623157e+308
		--assert strict-equal? -1.0 i / j
		--assert strict-equal? -1.0 divide i j

	--test-- "float-divide 111"
		i: 0.0
		j: 0.0
		;--assert strict-equal? 1.#NAN 0.0 / 0.0
		;--assert strict-equal? 1.#NAN divide 0.0 0.0
		;--assert strict-equal? 1.#NAN i / j
		;--assert strict-equal? 1.#NAN divide i j

	--test-- "float-divide 112"
		i: 1.0
		j: 1.0
		--assert strict-equal? 1.0 1.0 / 1.0
		--assert strict-equal? 1.0 divide 1.0 1.0
		--assert strict-equal? 1.0 i / j
		--assert strict-equal? 1.0 divide i j

	--test-- "float-divide 113"
		i: -1.0
		j: -1.0
		--assert strict-equal? 1.0 -1.0 / -1.0
		--assert strict-equal? 1.0 divide -1.0 -1.0
		--assert strict-equal? 1.0 i / j
		--assert strict-equal? 1.0 divide i j

	--test-- "float-divide 114"
		i: 2.2250738585072014e-308
		j: 2.2250738585072014e-308
		--assert strict-equal? 1.0 2.2250738585072014e-308 / 2.2250738585072014e-308
		--assert strict-equal? 1.0 divide 2.2250738585072014e-308 2.2250738585072014e-308
		--assert strict-equal? 1.0 i / j
		--assert strict-equal? 1.0 divide i j

	--test-- "float-divide 115"
		i: -2.2250738585072014e-308
		j: -2.2250738585072014e-308
		--assert strict-equal? 1.0 -2.2250738585072014e-308 / -2.2250738585072014e-308
		--assert strict-equal? 1.0 divide -2.2250738585072014e-308 -2.2250738585072014e-308
		--assert strict-equal? 1.0 i / j
		--assert strict-equal? 1.0 divide i j

	--test-- "float-divide 116"
		i: 1.7976931348623157e+308
		j: 1.7976931348623157e+308
		--assert strict-equal? 1.0 1.7976931348623157e+308 / 1.7976931348623157e+308
		--assert strict-equal? 1.0 divide 1.7976931348623157e+308 1.7976931348623157e+308
		--assert strict-equal? 1.0 i / j
		--assert strict-equal? 1.0 divide i j

	--test-- "float-divide 117"
		i: -1.7976931348623157e+308
		j: -1.7976931348623157e+308
		--assert strict-equal? 1.0 -1.7976931348623157e+308 / -1.7976931348623157e+308
		--assert strict-equal? 1.0 divide -1.7976931348623157e+308 -1.7976931348623157e+308
		--assert strict-equal? 1.0 i / j
		--assert strict-equal? 1.0 divide i j

	--test-- "float-divide 118"
		i: 1.1
		j: 1.1
		--assert strict-equal? 1.0 1.1 / 1.1
		--assert strict-equal? 1.0 divide 1.1 1.1
		--assert strict-equal? 1.0 i / j
		--assert strict-equal? 1.0 divide i j

	--test-- "float-divide 119"
		i: -1.1
		j: -1.1
		--assert strict-equal? 1.0 -1.1 / -1.1
		--assert strict-equal? 1.0 divide -1.1 -1.1
		--assert strict-equal? 1.0 i / j
		--assert strict-equal? 1.0 divide i j

	--test-- "float-divide 120"
		i: 1.7976931348623157e+308
		j: 1.7976931348623157e+308
		--assert strict-equal? 1.0 1.7976931348623157e+308 / 1.7976931348623157e+308
		--assert strict-equal? 1.0 divide 1.7976931348623157e+308 1.7976931348623157e+308
		--assert strict-equal? 1.0 i / j
		--assert strict-equal? 1.0 divide i j

	--test-- "float-divide 121"
		i: -1.7976931348623157e+308
		j: -1.7976931348623157e+308
		--assert strict-equal? 1.0 -1.7976931348623157e+308 / -1.7976931348623157e+308
		--assert strict-equal? 1.0 divide -1.7976931348623157e+308 -1.7976931348623157e+308
		--assert strict-equal? 1.0 i / j
		--assert strict-equal? 1.0 divide i j

===end-group===

===start-group=== "floatcomparisons"

	--test-- "= 1"					--assert 0.0 = 0.0
	--test-- "= 2"					--assert not 1.0 = 0.0
	--test-- "= 3"					--assert not -1.0 = 0.0
	--test-- "= 4"					--assert not 1.7976931348623157e+308 = -1.7976931348623157e+308
	--test-- "= 5"					--assert 1.7976931348623157e+308 = 1.7976931348623157e+308
	--test-- "= 6"					--assert 2.2250738585072014e-308 = 2.2250738585072014e-308
	--test-- "equal? 1"				--assert equal? 0.0 0.0
	--test-- "equal? 2"				--assert not equal? 1.0 0.0
	--test-- "equal? 3"				--assert equal? 2.2250738585072014e-308 -2.2250738585072014e-308
	--test-- "equal? 4"				--assert not equal? 1.7976931348623157e+308 -1.7976931348623157e+308
	--test-- "== 1"					--assert 0.0 == 0.0
	--test-- "== 2"					--assert not 1.0 == 0.0
	--test-- "== 3"					--assert not -1.0 == 0.0
	--test-- "== 4"					--assert not 1.7976931348623157e+308 == -1.7976931348623157e+308
	--test-- "== 5"					--assert 1.7976931348623157e+308 == 1.7976931348623157e+308
	--test-- "== 6"					--assert 2.2250738585072014e-308 == 2.2250738585072014e-308
	--test-- "strict-equal? 1"		--assert strict-equal? 0.0 0.0
	--test-- "strict-equal? 2"		--assert not strict-equal? 1.0 0.0
	--test-- "strict-equal? 3"		--assert not strict-equal? 2.2250738585072014e-308 -2.2250738585072014e-308
	--test-- "strict-equal? 4"		--assert not strict-equal? 1.7976931348623157e+308 -1.7976931348623157e+308
	--test-- "<> 1"					--assert not 0.0 <> 0.0
	--test-- "<> 2"					--assert 1.0 <> 0.0
	--test-- "<> 3"					--assert -1.0 <> 0.0
	--test-- "<> 4"					--assert not 2.2250738585072014e-308 <> -2.2250738585072014e-308
	--test-- "<> 5"					--assert 1.7976931348623157e+308 <> -1.7976931348623157e+308
	--test-- "not equal? 1"			--assert not not-equal? 0.0  0.0
	--test-- "not equal? 2"			--assert not-equal? 1.0 0.0
	--test-- "not equal? 3"			--assert not-equal? -1.0 0.0
	--test-- "not equal? 4"			--assert not not-equal? 2.2250738585072014e-308 -2.2250738585072014e-308
	--test-- "not equal? 5"			--assert not-equal? 1.7976931348623157e+308 -1.7976931348623157e+308
	--test-- "> 1"					--assert not 0.0 > 0.0
	--test-- "> 2"					--assert 2.2250738585072014e-308 > 0.0
	--test-- "> 3"					--assert 0.0 > -2.2250738585072014e-308
	--test-- "> 4"					--assert 2.2250738585072020e-308 > 2.2250738585072014e-308
	--test-- "greater? 1"			--assert not greater? 0.0 0.0
	--test-- "greater? 2"			--assert greater? 1.7976931348623157e+308 0.0
	--test-- "greater? 3"			--assert greater? 0.0 -2.2250738585072014e-308
	--test-- "greater? 4"			--assert greater? 1.7976931348623156e+308 1.7976931348623150e+308
	--test-- "< 1"					--assert not 0.0 < 0.0
	--test-- "< 2"					--assert 0.0 < 2.2250738585072014e-308
	--test-- "< 3"					--assert -2.2250738585072014e-308 < 0.0
	--test-- "< 4"					--assert 2.2250738585072014e-308 < 2.225073858507202e-308
	--test-- "lesser? 1"			--assert not lesser? 0.0 0.0
	--test-- "lesser? 2"			--assert lesser? 0.0 2.2250738585072014e-308
	--test-- "lesser? 3"			--assert lesser? -2.2250738585072014e-308 0.0
	--test-- "lesser? 4"			--assert lesser? 2.2250738585072014e-308 2.225073858507202e-308
	--test-- ">= 1"					--assert 0.0 >= 0.0
	--test-- ">= 2"					--assert 1.0 >= 0.0
	--test-- ">= 3"					--assert 0.0 >= -1.0
	--test-- ">= 4"					--assert 2.2250738585072014e-308 >= 2.2250738585072014e-308
	--test-- " greater-or-equal? 1"	--assert greater-or-equal? 0.0 0.0
	--test-- " greater-or-equal? 2"	--assert greater-or-equal? 1.0 0.0
	--test-- " greater-or-equal? 3"	--assert greater-or-equal? 0.0 -1.0
	--test-- " greater-or-equal? 4"	--assert greater-or-equal? 2.2250738585072014e-308 2.2250738585072014e-308
	--test-- "<= 1"					--assert 0.0 <= 0.0
	--test-- "<= 2"					--assert 0.0 <= 1.0
	--test-- "<= 3"					--assert -1.0 <= 0.0
	--test-- "<= 4"					--assert 1.7976931348623157e+308 <= 1.7976931348623157e+308
	--test-- " lesser-or-equal? 1"	--assert lesser-or-equal? 0.0 0.0
	--test-- " lesser-or-equal? 2"	--assert lesser-or-equal? 0.0 1.0
	--test-- " lesser-or-equal? 3"	--assert lesser-or-equal? -1.0 0.0
	--test-- " lesser-or-equal? 4"	--assert lesser-or-equal? 1.7976931348623157e+308 1.7976931348623157e+308
		
===end-group===


===start-group=== "same-datatype"
	--test-- "same-integer-1"		--assert same? 0 0
	--test-- "same-integer-2"		--assert same? first [1] first [1]
	--test-- "same-integer-3"		--assert same? FFFFFFFFh -1
	--test-- "same-integer-4"	 	--assert not same? 1 -1
	--test-- "same-float-1"			--assert same? 0.0 0.0
	--test-- "same-float-2"			--assert same? first [1.0] first [1.0]
	--test-- "same-float-3"			--assert not same? 1.0 -1.0
	--test-- "same=float-5"			--assert same? (2.0 / 3.0) (4.0 / 6.0)
	--test-- "same=float-6"			--assert same? (2.0 / 3) (4.0 / 6)
	--test-- "same=float-7"			--assert same? (2 / 3.0) (4 / 6.0)
	
	--test-- "same-float-5"
		sf5-a: 2.0
		sf5-b: 3.0
		sf5-c: 4.0
		sf5-d: 6.0
		--assert same? (sf5-a / sf5-b) (sf5-c / sf5-d)
		
	--test-- "same-char-1"			--assert same? #"a" #"a"
	--test-- "same-char-2"			--assert not same? #"a" #"b"
	--test-- "same-logic-1"			--assert same? true true
	--test-- "same-logic-2"			--assert not same? false true
	--test-- "same-block-1"			--assert not same? [] []
	--test-- "same-block-2"			--assert not same? [a] [a]
	
	--test-- "same-block-3"			
		x: y: [a]
		--assert same? x y
		
	--test-- "same-block-4"
		x: y: [a b c]
		--assert not same? x next y
		
	--test-- "same-block-5"
		x: y: [a]
		--assert not same? mold x mold y

	--test-- "same-string-1"		--assert not same? "" ""
	--test-- "same-string-2"		--assert not same? "abc" "abc"
	
	--test-- "same-string-3"
		s1: s2: "abc"
		--assert same? s1 s2
	
	--test-- "same-string-4"
		s1: s2: "abc"
		--assert not same? next s1 s2

	--test-- "same-file-1"			--assert not same? %abc %abc
	
	--test-- "same-file-2"
		s1: s2: %abc/de
		--assert not same? next s1 s2

	--test-- "same-datatype-1"		--assert not same? type? 1 type? #"1"
	--test-- "same-datatype-2"		--assert same? type? "abc" type? "cba"

	--test-- "same-word-1"			--assert same? 'a 'a
	--test-- "same-word-2"			--assert not same? 'a 'A
	--test-- "same-word-3"			--assert same? 'a first [a]
	--test-- "same-word-4"			--assert not same? 'a first ['a]
	--test-- "same-word-5"			--assert not same? first [:a] first [a:]
	--test-- "same-action-1"		--assert same? :swap :swap
	--test-- "same-action-2"		--assert not same? :swap :take
	--test-- "same-op-1"			--assert same? :+ :+
	--test-- "same-op-2"			--assert not same? :+ :-
	--test-- "same-native-1"		--assert same? :print :print
	--test-- "same-native-2"		--assert not same? :print :bind
	--test-- "same-function-1"		--assert same? :probe :probe
	--test-- "same-function-2"		--assert not same? :probe :quote
	--test-- "same-routine-1"		--assert same? :quit-return :quit-return
	--test-- "same-object-1"		--assert not same? make object! [a: 1] make object! [a: 1]
	
	--test-- "same-object-2"
		so2-o1: make object! [a: 1]
		so2-o2: make object! [a: 1]
		--assert not same? so2-o1 so2-o2
		
	--test-- "same-object-3"
		so3-o: make object! [a: 1]
		so3-o1: make so3-o []
		--assert not same? so3-o so3-o1		

===end-group===

===start-group=== "implcit-cast"
	--test-- "same-implcit-cast-1"	--assert not same? #"0" 48
	--test-- "same-implcit-cast-2"	--assert not same? 48 #"0"
	--test-- "same-implcit-cast-3"	--assert not same? #"^(2710)" 10000
	--test-- "same-implcit-cast-4"	--assert not same? #"^(010000)" 65536
	
	--test-- "same-implcit-cast-5"
		ea-result: same? #"1" 49
		--assert ea-result = false
	
	--test-- "same-implcit-cast-6"
		ea-result: same? #"^(010000)" 10000
		--assert ea-result = false
		
===end-group===


===start-group=== "words-of-basic"

	--test-- "wob1"
		wob1-o: make object! [
		    b: [a b c d]
		    c: #"a"
		    f: 1.0
		    o: make object! [a: 1 b: 2 c: 3]
		    i: 1
		    n: none
		    s: "abcde"
		]
		--assert [b c f o i n s] = words-of wob1-o
	
===end-group===

===start-group=== "words-of-self"

	--test-- "wos1"
		wos1-o: make object! [
		    b: [a b c d]
		    c: #"a"
		    f: 1.0
		    o: make object! [a: 1 b: 2 c: 3]
		    i: 1
		    n: none
		    s: "abcde"
		    wos: words-of self
		]
		--assert [b c f o i n s wos] = wos1-o/wos
		
	--test-- "wos2"
		wos2-o: make object! [
		    b: [a b c d]
		    c: #"a"
		    f: 1.0
		    o: make object! [a: 1 b: 2 c: 3]
		    i: 1
		    n: none
		    s: "abcde"
		    do-wos: does [words-of self]
		]
		--assert [b c f o i n s do-wos] = wos2-o/do-wos
	
===end-group===


do-test-number: 0
dont-test-number: 0

do-fold: func [lower upper] [
	do-test-number: do-test-number + 1
	--test-- append copy "case-folding-" do-test-number
		--assert lower = upper
		--assert equal? lower upper
		--assert strict-equal? uppercase copy lower upper
		--assert upper == uppercase copy lower
		--assert strict-equal? lower lowercase copy upper
		--assert lower == lowercase copy upper
]

dont-fold: func [lower upper] [
	dont-test-number: dont-test-number + 1
	--test-- append copy "not-case-folding-" dont-test-number
		--assert lower <> upper
		--assert not equal? lower upper
		--assert not equal? uppercase copy lower upper
		--assert upper <> uppercase copy lower
		--assert not equal? lower lowercase copy upper
		--assert lower <> lowercase copy upper
]

===start-group=== "case-folding"
	
	do-fold "abcde" "ABCDE"
	do-fold "ba^(FB04)e" "BA^(FB04)E"
	do-fold "cant^(F9)" "CANT^(D9)"
	do-fold "cantu^(0300)" "CANTU^(0300)"
	do-fold "stra^(DF)e" "STRA^(1E9E)E"
	do-fold "i" "I"
	do-fold "^(0149)" "^(0149)"
	do-fold "^(03B0)" "^(03B0)"
	do-fold "^(0587)" "^(0587)"
	do-fold "^(1E96)" "^(1E96)"
	do-fold "^(1F80)" "^(1F88)"
	do-fold "^(1FB3)" "^(1FBC)"
	do-fold "^(03B9)" "^(1FBE)"
	do-fold "^(1FF3)" "^(1FFC)"
	do-fold "^(03C9)" "^(2126)"
	do-fold "^(2173)" "^(2163)"
	do-fold "^(EE)" "^(CE)"
	do-fold "^(0101)" "^(0100)"
	
===end-group===

===start-group=== "not-case-folding"
	
	dont-fold "ba^(FB04)e" "BAFFLE"
	dont-fold "stra^(DF)e" "STRASSE"
	dont-fold "weiss" "wie^(DF)"
	dont-fold "i" "^(0130)"
	dont-fold "^(0131)" "I"
	dont-fold "^(0149)" "^(02BC)^(6E)"
	dont-fold "^(03C5)^(0308)^(0301)" "^(03B0)"
	dont-fold "^(0565)^(0582)" "^(0587)"
	dont-fold "^(1E96)" "^(68)^(0331)"
	dont-fold "^(1F80)" "^(1F00)^(03B9)"
	dont-fold "^(03B1)^(03B9)" "^(1FBC)"
	dont-fold "^(03C9)^(03B9)" "^(1FFC)"
	
===end-group===

===start-group=== "manual case folding"

	--test-- "manual-case-folding-1"
		--assert "abcde" = "aBCDE"
		--assert equal? "abcde" "aBCDE"
		--assert strict-equal? lowercase "aBCDE" "abcde"
		--assert "abcde" == lowercase "aBCDE"
		
	--test-- "manual-case-folding-2"
		--assert "Abcde" = "ABCDE"
		--assert equal? "Abcde" "ABCDE"
		--assert strict-equal? uppercase "Abcde" "ABCDE"
		--assert "ABCDE" == uppercase "Abcde"
		
	--test-- "manual-case-folding-3"
		--assert "s" = "^(017F)"
		--assert "S" = "^(017F)"
		--assert "s" = "S"
		--assert "S" == uppercase "^(017F)"
		--assert "^(017F)" == lowercase "^(017F)"
		--assert "s" == lowercase "S"
		--assert "S" == uppercase "s"
		
===end-group===


===start-group=== "Anonymous THROW"

	--test-- "an1" --assert 1  = catch [throw 1 --assert no]
	--test-- "an2" --assert 2  = catch [if true [throw 2 --assert no] --assert no]
	--test-- "an3" --assert 3  = catch [loop 1 [throw 3 --assert no] --assert no]
	--test-- "an4" --assert 4  = catch [while [true][throw 4 --assert no] --assert no]
	--test-- "an5" --assert 5  = catch [until [throw 5 --assert no] --assert no]
	--test-- "an6" --assert 6  = catch [6]
	--test-- "an7" --assert 7  = catch [4 + 3]
	--test-- "an8" --assert 8  = catch [do [throw 8 --assert no] --assert no]

	--test-- "an9"
		f: does [throw 9 --assert no]
		--assert 9 = catch [f]

	--test-- "an10"
		f: does [throw 10 --assert no]
		g: does [f --assert no]
		--assert 10 = catch [g]
	
	--test-- "an11" --assert 11 = catch [parse "1" [(throw 11 --assert no)] --assert no]
	
===end-group===

===start-group=== "Named THROW"

	--test-- "name1" --assert 1  = catch [throw/name 1 'a --assert no]
	--test-- "name2" --assert 2  = catch/name [if true [throw/name 2 'a --assert no] --assert no] 'a
	--test-- "name3" --assert 3  = catch/name [loop 1 [throw/name 3 'b --assert no] --assert no] 'b
	--test-- "name4" --assert 4  = catch/name [while [true][throw/name 4 'c --assert no] --assert no] 'c
	--test-- "name5" --assert 5  = catch/name [until [throw/name 5 'd --assert no] --assert no] 'd
	--test-- "name6" --assert 6  = catch/name [do [throw/name 6 'e --assert no] --assert no] 'e

	--test-- "name7"
		f: does [throw/name 7 'i --assert no]
		--assert 7 = catch/name [f] 'i

	--test-- "name8"
		f: does [throw/name 10 'j --assert no]
		g: does [f --assert no]
		--assert 10 = catch/name [g] 'j

	--test-- "name9"
		--assert 1 = catch/name [
			catch/name [throw/name 1 'hello	--assert no] 'world
			--assert no
		] 'hello

	--test-- "name10"
		--assert 123 = catch/name [
			--assert 2 = catch [throw/name 2 'hello --assert no]
			123
		] 'hello
		
	--test-- "name11"
		--assert 1 = catch [
			catch/name [throw/name 1 'hello	--assert no] 'world
			--assert yes
		]
		
	--test-- "name31" --assert 1  = catch [throw/name 1 'a --assert no]
	--test-- "name32" --assert 2  = catch/name [if true [throw/name 2 'a --assert no] --assert no] [a b]
	--test-- "name33" --assert 3  = catch/name [loop 1 [throw/name 3 'b --assert no] --assert no] [a b]
	--test-- "name34" --assert 4  = catch/name [while [true][throw/name 4 'c --assert no] --assert no] [a c]
	--test-- "name35" --assert 5  = catch/name [until [throw/name 5 'd --assert no] --assert no] [d]
	--test-- "name36" --assert 6  = catch/name [do [throw/name 6 'e --assert no] --assert no] [e d]
  
  	--test-- "name37"
  		f: does [throw/name 7 'i --assert no]
  		--assert 7 = catch/name [f][i]
  
  	--test-- "name38"
  		f: does [throw/name 10 'j --assert no]
  		g: does [f --assert no]
  		--assert 10 = catch/name [g][i j]
  
  	--test-- "name39"
  		--assert 1 = catch/name [
  			catch/name [throw/name 1 'hello	--assert no] 'world
  			--assert no
  		][hello]
  
  	--test-- "name40"
  		--assert 123 = catch/name [
  			--assert 2 = catch [throw/name 2 'hello --assert no]
  			123
  		][hi hello]
  		
  	--test-- "name41"
  		--assert 1 = catch [
  			catch/name [throw/name 1 'hello	--assert no][world]
  			--assert yes
		]
  
===end-group===
    


===start-group=== "make"

	vector-make-test: func [
		name [string!]
		type [datatype!]
		spec [block!]
		len [integer!] 
		test-value [char! float! integer! percent!]
		/local
			vm-v
	][
		--test-- name
		vm-v: make vector! spec
		--assert len = length? vm-v
		foreach v vm-v [
			test-value: test-value + 1
			--assert test-value = v
			--assert type = type? v
		]
		--assert none = vm-v/0
		--assert none = vm-v/(len + 1)
	]

	--test-- "vector-make-1"
		vm1-v: make vector! 10
		--assert 10 = length? vm1-v
		foreach v vm1-v [
			--assert v = 0
			--assert integer! = type? v
		]
		--assert none = vm1-v/0
		--assert none = vm1-v/11
		
	vector-make-test "vector-make-2" integer! [1 2 3 4 5] 5 0
		
	vector-make-test "vector-make-3" char! [#"b" #"c" #"d" #"e"] 4 #"a"
	
	vector-make-test "vector-make-4" float! [1.0 2.0 3.0 4.0 5.0] 5 0.0

	vector-make-test "vector-make-5" integer! [integer! 8 [1 2 3 4 5]] 5 0

	vector-make-test "vector-make-6" integer! [integer! 16 [1 2 3 4 5]] 5 0
	
	vector-make-test "vector-make-7" integer! [integer! 32 [1 2 3 4 5]] 5 0
	
	vector-make-test "vector-make-8" float! [float! 64 [1.0 2.0 3.0 4.0 5.0]] 5 0.0
	
	vector-make-test "vector-make-9" float! [float! 32 [1.0 2.0 3.0 4.0 5.0]] 5 0.0

	vector-make-test "vector-make-10" percent! [100% 200% 300% 400% 500%] 5 0%
		
===end-group===

===start-group=== "vector-truncate"

	--test-- "vector-trunc-1"
		vt1-v: make vector! [char! 8 [#"^(00)" #"^(01)" #"^(02)"]]
		append vt1-v #"^(0100)"
		--assert 4 = length? vt1-v
		--assert #"^(00)" = vt1-v/4
		--assert none = vt1-v/5
		
	--test-- "vector-trunc-2"
		vt2-v: make vector! [char! 16 [#"^(00)" #"^(01)" #"^(02)"]]
		append vt2-v #"^(100100)"
		--assert 4 = length? vt2-v
		--assert #"^(0100)" = vt2-v/4
		--assert none = vt2-v/5
		
	--test-- "vector-trunc-3"
		vt3-v: make vector! [integer! 8 [0 1 2]]
		append vt3-v 256
		--assert 4 = length? vt3-v
		--assert 0 = vt3-v/4
		--assert none = vt3-v/5
	
	--test-- "vector-trunc-4"
		vt4-v: make vector! [integer! 16 [0 1 2]]
		append vt4-v 65536
		--assert 4 = length? vt4-v
		--assert 0 = vt4-v/4
		--assert none = vt4-v/5
		
	--test-- "vector-trunc-6"
		vt5-v: make vector! [float! 32 [0.0 1.0 2.0]]
		append vt5-v 1.23456789012345678901234567
		--assert 1.2345679 = round/to vt5-v/4 0.0000001 
		
===end-group===

===start-group=== "vector path notation"
	
	--test-- "vector-path-1"
		vp1-v: [0 1 2 3 4]
		--assert none = vp1-v/0
		--assert 0 = vp1-v/1
		--assert 1 = vp1-v/2
		--assert 2 = vp1-v/3
		--assert 3 = vp1-v/4
		--assert 4 = vp1-v/5
		--assert none = vp1-v/6
		--assert none = vp1-v/-1
		
===end-group===

===start-group=== "vector navigation"

	--test-- "vector-navigation-1"
		vn-v: make vector! [0 1 2 3 4]
		vn-v: next vn-v
		--assert vn-v/1 = 1
		--assert vn-v/4 = 4
	
	--test-- "vector-navigation-2"
		vn-v: make vector! [0 1 2 3 4]
		vn-v: next next vn-v
		--assert vn-v/1 = 2
		--assert vn-v/3 = 4
	
	--test-- "vector-navigation-3"
		vn-v: make vector! [0 1 2 3 4]
		vn-v: next next next vn-v
		--assert vn-v/1 = 3 
		--assert vn-v/2 = 4
	
	--test-- "vector-navigation-4"
		vn-v: make vector! [0 1 2 3 4]
		vn-v: next next next next vn-v
		--assert vn-v/1 = 4
		
	--test-- "vector-navigation-5"
		vn-v: make vector! [0 1 2 3 4]
		vn-v: tail vn-v
		--assert vn-v/1 = none
		
	--test-- "vector-navigation-6"
		vn-v: make vector! [0 1 2 3 4]
		vn-v: back tail vn-v
		--assert vn-v/1 = 4
	
	--test-- "vector-navigation-7"
		vn-v: make vector! [0 1 2 3 4]
		vn-v: head tail vn-v
		--assert vn-v/1 = 0
		--assert vn-v/5 = 4
	
===end-group===

===start-group=== "vector comparison"

	--test-- "vector-comparison-1"
		--assert (make vector! [1 2 3 4]) = make vector! [1 2 3 4]
	
	--test-- "vector-comparison-2"
		--assert (make vector! [1 2 3 4]) <> make vector! [1 2 3 3]
		
	--test-- "vector-comparison-3"
		--assert (make vector! [1 2 3 4]) > make vector! [1 2 3 3]
		
	--test-- "vector-comparison-4"
		--assert (make vector! [1 2 3 3]) < make vector! [1 2 3 4]
		
	--test-- "vector-comparison-5"
		--assert (make vector! [1 2 3]) < make vector! [1 2 3 4]
		
	--test-- "vector-comparison-6"
		--assert equal? make vector! [1 2 3 4] make vector! [1 2 3 4]
	
	--test-- "vector-comparison-7"
		--assert not equal? make vector! [1 2 3 4]make vector! [1 2 3 3]
		
	--test-- "vector-comparison-8"
		--assert greater? make vector! [1 2 3 4] make vector! [1 2 3 3]
		
	--test-- "vector-comparison-9"
		--assert lesser? make vector! [1 2 3 3] make vector! [1 2 3 4]
		
	--test-- "vector-comparison-10"
		--assert lesser? make vector! [1 2 3] make vector! [1 2 3 4]

	--test-- "vector-comparison-11"
		--assert (make vector! [1% 2% 3% 4%]) = make vector! [1% 2% 3% 4%]
	
	--test-- "vector-comparison-12"
		--assert (make vector! [1% 2% 3% 4%]) <> make vector! [1% 2% 3% 3%]
		
	--test-- "vector-comparison-13"
		--assert (make vector! [1% 2% 3% 4%]) > make vector! [1% 2% 3% 3%]
		
	--test-- "vector-comparison-14"
		--assert (make vector! [1% 2% 3% 3%]) < make vector! [1% 2% 3% 4%]
	
===end-group===

===start-group=== "vector ordinal"

	--test-- "vector-ordinal-1"
		--assert 1 = first make vector! [1 2 3 4]

	--test-- "vector-ordinal-2"
		--assert 2 = second make vector! [1 2 3 4]

	--test-- "vector-ordinal-3"
		--assert 3 = third make vector! [1 2 3 4]

	--test-- "vector-ordinal-4"
		--assert 4 = fourth make vector! [1 2 3 4]

	--test-- "vector-ordinal-5"
		--assert 5 = fifth make vector! [1 2 3 4 5]

	--test-- "vector-ordinal-6"
		--assert none = fifth make vector! [1 2 3 4]
		
	--test-- "vector-ordinal-7"
		--assert 4 = last make vector! [1 2 3 4]
		
	--test-- "vector-ordinal-8"
		--assert 2 = first next make vector! [1 2 3 4]		
	
	--test-- "vector-ordinal-9"
		--assert 3 = second next make vector! [1 2 3 4]

	--test-- "vector-ordinal-10"
		--assert 3% = second next make vector! [1% 2% 3% 4%]
	
		
===end-group===

===start-group=== "vector-clear"
		
		empty-vector: make vector! []

	--test-- "vector-clear-1"
		--assert empty-vector = clear make vector! [1 2 3 4]
		
	--test-- "vector-clear-2"
		vc2-v: make vector! [1 2 3 4]
		append vc2-v 5 
		--assert empty-vector = clear vc2-v
		
===end-group===

===start-group=== "vector-copy"

	--test-- "vector-copy-1"
		vcp1-v1: make vector! [1 2 3 4]
		vcp1-v2: copy vcp1-v1
		vcp1-v1/1: 5
		vcp1-v1/2: 6
		vcp1-v1/3: 7
		vcp1-v1/4: 8
		--assert vcp1-v1 = make vector! [5 6 7 8]
		--assert vcp1-v2 = make vector! [1 2 3 4]
		
	--test-- "vector-copy-2"
		vcp2-v: make vector! [1 2 3 4 5 6 7 8 9]
			--assert (make vector! [1 2 3 4]) = copy/part vcp2-v 4
			
	--test-- "vector-copy-3"
		vcp3-v: make vector! [1 2 3 4 5 6 7 8 9]
			--assert (make vector! [3 4]) = copy/part next next vcp3-v 2

	--test-- "vector-copy-4"
		vcp4-v: make vector! [1 2 3 4 5 6 7 8 9]
			--assert (make vector! [8]) = copy/part back back tail vcp4-v 1

	--test-- "vector-copy-5"
		vcp5-v: make vector! [1 2]
			--assert (make vector! [1 2]) = copy/part vcp5-v 4
	
===end-group===

===start-group=== "vector poke"

	--test-- "vector-poke-1"
		vp1-v: make vector! [1 2]
		poke vp1-v 1 0
		--assert (make vector! [0 2]) = vp1-v
		
	--test-- "vector-poke-2"
		vp2-v: make vector! [1 2 3]
		poke vp2-v 3 0
		--assert (make vector! [1 2 0]) = vp2-v
		
	--test-- "vector-poke-3"
		vp3-v: make vector! [1 2 3]
		poke vp3-v 2 0
		--assert (make vector! [1 0 3]) = vp3-v
		
===end-group===

===start-group=== "vector remove"

	--test-- "vector-remove-1"
		--assert (make vector! [2 3]) = remove make vector! [1 2 3]
		
	--test-- "vector-remove-2"
		--assert (make vector! [3]) = remove next make vector! [1 2 3]
		
	--test-- "vector-remove-3"
		--assert (make vector! []) = remove tail make vector! [1 2 3]
		
	--test-- "vector-remove-4"
		--assert (make vector! []) = remove back tail make vector! [1 2 3]
		
	--test-- "vector-remove-5"
		--assert (make vector! [3]) = remove back back tail make vector! [1 2 3]

===end-group===

===start-group=== "vector reverse"

	--test-- "vector-reverse-1"
		--assert (make vector! [4 3 2 1]) = reverse make vector! [1 2 3 4]
		
	--test-- "vector-reverse-2"
		--assert (make vector! [1 4 3 2 ]) = head reverse next make vector! [1 2 3 4]
		
	--test-- "vector-reverse-2"
		--assert (make vector! [1 2 3 4]) = head reverse tail make vector! [1 2 3 4]
		
===end-group===

===start-group=== "vector take"

	--test-- "vector-take-1"
		vt1-v: make vector! [1 2 3 4]
		--assert 1 = take vt1-v
		--assert vt1-v = make vector! [2 3 4]
	
	--test-- "vector-take-2"
		vt2-v: make vector! [1 2 3 4]
		--assert 2 = take next vt2-v
		--assert vt2-v = make vector! [1 3 4]
		
	--test-- "vector-take-3"
		vt3-v: make vector! [1 2 3 4]
		--assert 4 = take/last vt3-v
		--assert vt3-v = make vector! [1 2 3]
		
	--test-- "vector-take-4"
		vt4-v: make vector! [1 2 3 4]
		--assert (make vector! [1 2]) = take/part vt4-v 2
		--assert vt4-v = make vector! [3 4]
		
	--test-- "vector-take-5"
		vt5-v: make vector! [1 2 3 4]
		--assert (make vector! [1 2]) = take/part vt5-v find vt5-v 3
		--assert vt5-v = make vector! [3 4]

===end-group===

===start-group=== "vector sort"

	--test-- "vector-sort-1"
		--assert (make vector! [1 2 3]) = sort make vector! [3 2 1]
		
	--test-- "vector-sort-2"
		--assert (make vector! [3 1 2]) = head sort next make vector! [3 2 1]
		
	--test-- "vector-sort-3"
		--assert (make vector! [3 2 1]) = head sort tail make vector! [3 2 1]

	--test-- "vector-sort-4"
		--assert (make vector! [#"c" #"à" #"é"]) = sort make vector! [#"é" #"à" #"c"]
		
===end-group===

===start-group=== "vector find"

	--test-- "vector-find-1"
		--assert none = find make vector! [1 2 3 4] "five"

	--test-- "vector-find-2"
		--assert none = find next make vector! [1 2 3 4] 1
	
	--test-- "vector-find-3"
		--assert 1 = first find make vector! [1 2 3 4] 1
	
	--test-- "vector-find-4"
		--assert none = find make vector! [1 2 3 4] 1.0
	
	--test-- "vector-find-5"
		--assert 1 = length? find make vector! [1 2 3 4] 4
	
	--test-- "vector-find-6"
		--assert none = find/part make vector! [1 2 3 4] 4 3

	--test-- "vector-find-7"
		--assert 3 = first find/part make vector! [1 2 3 4] 3 3
		--assert 4 = second find/part make vector! [1 2 3 4] 3 3
		--assert 2 = length? find/part make vector! [1 2 3 4] 3 3
		
	--test-- "vector-find-8"
		--assert #"a" = first find/case make vector! [ #"A" #"a" #"b" #"c"] #"a"
		--assert 3 = length? find/case make vector! [ #"A" #"a" #"b" #"c"] #"a"
		
	--test-- "vector-find-9"
		--assert #"a" = first find make vector! [ #"A" #"a" #"b" #"c"] #"a"
		
	--test-- "vector-find-10"
		--assert (make vector! [4 5 6]) = find/skip make vector! [1 4 4 4 5 6] 4 3
		
	--test-- "vector-find-11"
		--assert (make vector! [1]) = find/last make vector! [1 1 1 1 1] 1
	
	--test-- "vector-find-12"
		vf12-v: next next next make vector! [1 2 1 2 1 2]
		--assert (make vector! [2 1 2 1 2]) = find/reverse vf12-v 2
		
	--test-- "vector-find-13"
		--assert (make vector! [5 6]) = find/tail make vector! [1 2 3 4 5 6] 4
		
	--test-- "vector-find-14"
		--assert (make vector! [3 4]) = find/match next make vector! [1 2 3 4] 2
		
===end-group===

===start-group=== "vector select"

	--test-- "vector-select-1"
		--assert none = select make vector! [1 2 3 4] "five"

	--test-- "vector-select-2"
		--assert none = select next make vector! [1 2 3 4] 1
	
	--test-- "vector-select-3"
		--assert 2 = select make vector! [1 2 3 4] 1
	
	--test-- "vector-select-4"
		--assert none = select make vector! [1 2 3 4] 1.0
	
	--test-- "vector-select-5"
		--assert 4 = select make vector! [1 2 3 4] 3
	
	--test-- "vector-select-6"
		--assert none = select/part make vector! [1 2 3 4] 4 3

	--test-- "vector-select-7"
		--assert 4 = select/part make vector! [1 2 3 4] 3 3
		
	--test-- "vector-select-8"
		--assert #"b" = select/case make vector! [ #"A" #"a" #"b" #"c"] #"a"
		
	--test-- "vector-select-9"
		--assert #"b" = select make vector! [ #"A" #"a" #"b" #"c"] #"a"
		
	--test-- "vector-select-10"
		--assert 5 = select/skip make vector! [1 4 4 4 5 6] 4 3
		
	--test-- "vector-select-11"
		--assert 1 = select/last make vector! [1 2 3 4 1] 4
	
	--test-- "vector-select-12"
		vs12-v: next next next next make vector! [1 2 1 2 3 4]
		--assert 3 = select/reverse vs12-v 2
		
===end-group===

===start-group=== "vector add"
		
		va-v1: make vector! [10 20 30 40 50]
		va-v2: make vector! [2 3 4 5 6]

	--test-- "vector-add-1"
		va1-v: va-v1 + va-v2
		--assert va1-v = make vector! [12 23 34 45 56]
	
	--test-- "vector-add-2"
		va2-v: add va-v1 va-v2
		--assert va2-v = make vector! [12 23 34 45 56]
		
	--test-- "vector-add-3"
		va3-v: add next va-v1 va-v2
		--assert va3-v = make vector! [22 33 44 55]
		
	--test-- "vector-add-4"	
		va4-v: add va-v1 next next va-v2
		--assert va4-v = make vector! [14 25 36]
		
	--test-- "vector-add-5"
		va-v1: make vector! [1.0 2.0 3.0 4.0 5.0]
		va5-v: va-v1 + va-v1
		--assert va5-v = make vector! [2.0 4.0 6.0 8.0 10.0]
	
	--test-- "vector-add-6"
		va6-v: va-v1 + 0.5
		--assert va6-v = make vector! [1.5 2.5 3.5 4.5 5.5]
		
	--test-- "vector-add-7"
		va-v1: make vector! [10 20 30 40 50]
		va7-v: va-v1 + -1
		--assert va7-v = make vector! [9 19 29 39 49]
		
	--test-- "vector-add-8"
		va-v1: make vector! [10 20 30 40 50]
		va8-v: va-v1 + 1.5
		--assert va8-v = make vector! [11 21 31 41 51]
		
	--test-- "vector-add-9"
		va-v1: make vector! [10 20 30 40 50]
		va9-v: va-v1 + 0.5
		--assert va9-v = make vector! [10 20 30 40 50]
	
	--test-- "vector-add-10"
		va10-v1: make vector! [integer! 8 [253 254 255]]
		va10-v2: make vector! [integer! 8 [3 2 1]]
		va10-v3: va10-v1 + va10-v2
		--assert va10-v3 = make vector! [integer! 8 [0 0 0]]
		
===end-group===

===start-group=== "vector subtract"
		
		vs-v1: make vector! [10 20 30 40 50]
		vs-v2: make vector! [2 3 4 5 6]

	--test-- "vector-subtract-1"
		vs1-v: vs-v1 - vs-v2
		--assert vs1-v = make vector! [8 17 26 35 44]
	
	--test-- "vector-subtract-2"
		vs2-v: subtract vs-v1 vs-v2
		--assert vs2-v = make vector! [8 17 26 35 44]
		
	--test-- "vector-subtract-3"
		vs3-v: subtract next vs-v1 vs-v2
		--assert vs3-v = make vector! [18 27 36 45]
		
	--test-- "vector-subtract-4"	
		vs4-v: subtract vs-v1 next next vs-v2
		--assert vs4-v = make vector! [6 15 24]
		
	--test-- "vector-subtract-5"
		vs-v1: make vector! [1.0 2.0 3.0 4.0 5.0]
		vs5-v: vs-v1 - vs-v1
		--assert vs5-v = make vector! [0.0 0.0 0.0 0.0 0.0]
	
	--test-- "vector-subtract-6"
		vs6-v: vs-v1 - 0.5
		--assert vs6-v = make vector! [0.5 1.5 2.5 3.5 4.5]
		
	--test-- "vector-subtract-7"
		vs-v1: make vector! [10 20 30 40 50]
		vs7-v: vs-v1 - -1
		--assert vs7-v = make vector! [11 21 31 41 51]
		
	--test-- "vector-subtract-8"
		vs-v1: make vector! [10 20 30 40 50]
		vs8-v: vs-v1 - 1.5
		--assert vs8-v = make vector! [9 19 29 39 49]
		
	--test-- "vector-subtract-9"
		vs-v1: make vector! [10 20 30 40 50]
		vs9-v: vs-v1 - 0.5
		--assert vs9-v = make vector! [10 20 30 40 50]
		
===end-group===

===start-group=== "vector multiply"
		
		vm-v1: make vector! [10 20 30 40 50]
		vm-v2: make vector! [2 3 4 5 6]

	--test-- "vector-multiply-1"
		vm1-v: vm-v1 * vm-v2
		--assert vm1-v = make vector! [20 60 120 200 300]
	
	--test-- "vector-multiply-2"
		vm2-v: multiply vm-v1 vm-v2
		--assert vm2-v = make vector! [20 60 120 200 300]
		
	--test-- "vector-multiply-3"
		vm3-v: multiply next vm-v1 vm-v2
		--assert vm3-v = make vector! [40 90 160 250]
		
	--test-- "vector-multiply-4"	
		vm4-v: multiply vm-v1 next next vm-v2
		--assert vm4-v = make vector! [40 100 180]
		
	--test-- "vector-multiply-5"
		vm-v1: make vector! [1.0 2.0 3.0 4.0 5.0]
		vm5-v: vm-v1 * vm-v1
		--assert vm5-v = make vector! [1.0 4.0 9.0 16.0 25.0]
	
	--test-- "vector-multiply-6"
		vm6-v: vm-v1 * 0.5
		--assert vm6-v = make vector! [0.5 1.0 1.5 2.0 2.5]
		
	--test-- "vector-multiply-7"
		vm-v1: make vector! [10 20 30 40 50]
		vm7-v: vm-v1 * -1
		--assert vm7-v = make vector! [-10 -20 -30 -40 -50]
		
	--test-- "vector-multiply-8"
		vm-v1: make vector! [10 20 30 40 50]
		vm8-v: vm-v1 * 1.5
		--assert vm8-v = make vector! [10 20 30 40 50]
		
	--test-- "vector-multiply-9"
		vm-v1: make vector! [10 20 30 40 50]
		vm9-v: vm-v1 * 0.5
		--assert vm9-v = make vector! [0 0 0 0 0]
		
	--test-- "vector-multiply-10"
		vm10-v1: make vector! [integer! 8 [253 254 255]]
		vm10-v2: make vector! [integer! 8 [3 2 1]]
		vm10-v3: vm10-v1 * vm10-v2
		--assert vm10-v3 = make vector! [integer! 8 [247 252 255]]

	--test-- "vector-multiply-11"
		vm-v1: make vector! [100% 200% 300% 400% 500%]
		vm9-v: vm-v1 * 50%
		--assert vm9-v = make vector! [50% 100% 150% 200% 250%]
			
===end-group===

===start-group=== "vector divide"
		
		vm-v1: make vector! [10 20 30 40 50]
		vm-v2: make vector! [2 3 4 5 6]

	--test-- "vector-divide-1"
		vm1-v: vm-v1 / vm-v2
		--assert vm1-v = make vector! [5 6 7 8 8]
	
	--test-- "vector-divide-2"
		vm2-v: divide vm-v1 vm-v2
		--assert vm2-v = make vector! [5 6 7 8 8]
		
	--test-- "vector-divide-3"
		vm3-v: divide next vm-v1 vm-v2
		--assert vm3-v = make vector! [10 10 10 10]
		
	--test-- "vector-divide-4"	
		vm4-v: divide vm-v1 next next vm-v2
		--assert vm4-v = make vector! [2 4 5]
		
	--test-- "vector-divide-5"
		vm-v1: make vector! [1.0 2.0 3.0 4.0 5.0]
		vm5-v: vm-v1 / vm-v1
		--assert vm5-v = make vector! [1.0 1.0 1.0 1.0 1.0]
	
	--test-- "vector-divide-6"
		vm6-v: vm-v1 / 0.5
		--assert vm6-v = make vector! [2.0 4.0 6.0 8.0 10.0]
		
	--test-- "vector-divide-7"
		vm-v1: make vector! [10 20 30 40 50]
		vm7-v: vm-v1 / -1
		--assert vm7-v = make vector! [-10 -20 -30 -40 -50]
		
	--test-- "vector-divide-8"
		vm-v1: make vector! [10 20 30 40 50]
		vm8-v: vm-v1 / 1.5
		--assert vm8-v = make vector! [10 20 30 40 50]
		
	--test-- "vector-divide-9"
		vm-v1: make vector! [1.0 2.0 3.0 4.0 5.0]
		vm9-v: vm-v1 / 5.0
		--assert vm9-v = make vector! [0.2 0.4 0.6 0.8 1.0]
		
===end-group===

===start-group=== "vector remainder"
		
		vm-v1: make vector! [10 20 30 40 50]
		vm-v2: make vector! [2 3 4 5 6]

	--test-- "vector-remainder-1"
		vm1-v: vm-v1 % vm-v2
		--assert vm1-v = make vector! [0 2 2 0 2]
	
	--test-- "vector-remainder-2"
		vm2-v: remainder vm-v1 vm-v2
		--assert vm2-v = make vector! [0 2 2 0 2]
		
	--test-- "vector-remainder-3"
		vm3-v: remainder next vm-v1 vm-v2
		--assert vm3-v = make vector! [0 0 0 0]
		
	--test-- "vector-remainder-4"	
		vm4-v: remainder vm-v1 next next vm-v2
		--assert vm4-v = make vector! [2 0 0]
		
	--test-- "vector-remainder-5"
		vm-v1: make vector! [1.0 2.0 3.0 4.0 5.0]
		vm5-v: vm-v1 % vm-v1
		--assert vm5-v = make vector! [0.0 0.0 0.0 0.0 0.0]
	
	--test-- "vector-remainder-6"
		vm6-v: vm-v1 % 0.5
		--assert vm6-v = make vector! [0.0 0.0 0.0 0.0 0.0]
		
	--test-- "vector-remainder-7"
		vm-v1: make vector! [10 20 30 40 50]
		vm7-v: vm-v1 % -1
		--assert vm7-v = make vector! [0 0 0 0 0]
		
	--test-- "vector-remainder-8"
		vm-v1: make vector! [10 20 30 40 50]
		vm8-v: vm-v1 % 1.5
		--assert vm8-v = make vector! [0 0 0 0 0]
		
	--test-- "vector-remainder-9"
		vm-v1: make vector! [1.0 2.0 3.0 4.0 5.0]
		vm9-v: vm-v1 % 5.0
		--assert vm9-v = make vector! [1.0 2.0 3.0 4.0 0.0]
		
===end-group===

===start-group=== "vector and"
		
		vand-v1: make vector! [10 20 30 40 50]
		vand-v2: make vector! [2 3 4 5 6]

	--test-- "vector-and-1"
		vand1-v: vand-v1 and vand-v2
		--assert vand1-v = make vector! [2 0 4 0 2]
	
	--test-- "vector-and-2"
		vand2-v: vand-v1 and next vand-v2
		--assert vand2-v = make vector! [2 4 4 0]
		
	--test-- "vector-and-3"
		vand3-v: (next vand-v1) and vand-v2
		--assert vand3-v = make vector! [0 2 0 0]
		
	--test-- "vector-and-4"	
		vand4-v: vand-v1 and next next vand-v2
		--assert vand4-v = make vector! [0 4 6]
		
	--test-- "vector-and-5"
		vand-v1: make vector! [10 20 30 40 50]
		vand7-v: vand-v1 and -1
		--assert vand7-v = make vector! [10 20 30 40 50]
		
===end-group===

===start-group=== "vector or"
		
		vor-v1: make vector! [10 20 30 40 50]
		vor-v2: make vector! [2 3 4 5 6]

	--test-- "vector-or-1"
		vor1-v: vor-v1 or vor-v2
		--assert vor1-v = make vector! [10 23 30 45 54]
	
	--test-- "vector-or-2"
		vor2-v: vor-v1 or next vor-v2
		--assert vor2-v = make vector! [11 20 31 46]
		
	--test-- "vector-or-3"
		vor3-v: (next vor-v1) or vor-v2
		--assert vor3-v = make vector! [22 31 44 55]
		
	--test-- "vector-or-4"	
		vor4-v: vor-v1 or next next vor-v2
		--assert vor4-v = make vector! [14 21 30]
		
	--test-- "vector-or-5"
		vor-v1: make vector! [10 20 30 40 50]
		vor7-v: vor-v1 or -1
		--assert vor7-v = make vector! [-1 -1 -1 -1 -1]
		
===end-group===

===start-group=== "vector xor"
		
		vxor-v1: make vector! [10 20 30 40 50]
		vxor-v2: make vector! [2 3 4 5 6]

	--test-- "vector-xor-1"
		vxor1-v: vxor-v1 xor vxor-v2
		--assert vxor1-v = make vector! [8 23 26 45 52]
	
	--test-- "vector-xor-2"
		vxor2-v: vxor-v1 xor next vxor-v2
		--assert vxor2-v = make vector! [9 16 27 46]
		
	--test-- "vector-xor-3"
		vxor3-v: (next vxor-v1) xor vxor-v2
		--assert vxor3-v = make vector! [22 29 44 55]
		
	--test-- "vector-xor-4"	
		vxor4-v: vxor-v1 xor next next vxor-v2
		--assert vxor4-v = make vector! [14 17 24]
		
	--test-- "vector-xor-5"
		vxor-v1: make vector! [10 20 30 40 50]
		vxor7-v: vxor-v1 xor -1
		--assert vxor7-v = make vector! [-11 -21 -31 -41 -51]
		
===end-group===



===start-group=== "make"
	
	--test-- "map-make-1"
		mm1-m: make map! [a none b 2 c 3]
		--assert 'none = mm1-m/a
		--assert 2 = mm1-m/b
		--assert 3 = mm1-m/c
		
	--test-- "map-make-2"
		mm2-m: make map! reduce ['a print "" 'b 2 'c 3]
		--assert unset! = type? mm2-m/a
		--assert 2 = mm2-m/b
		--assert 3 = mm2-m/c
	
===end-group=== 

===start-group=== "construction"
	
	--test-- "map-construction-1"
		mc1-m: #(a none b 2 c 3)
		--assert 'none = mc1-m/a
		--assert 2 = mc1-m/b
		--assert 3 = mc1-m/c
	
===end-group===

===start-group=== "delete key"

	--test-- "map-delete-key-1"
		mdk1-m: #(a: 1 b: 2 c: 3)
		mdk1-m/a: none
		--assert none = mdk1-m/a
		--assert none = find words-of mdk1-m 'a

	--test-- "map-delete-key-2"
		mdk2-m: #(a: 1 b: 2 c: 3)
		mdk2-m/a: 'none
		--assert 'none = mdk2-m/a
		--assert [a b c] = find words-of mdk2-m 'a
		
===end-group===

===start-group=== "find"

	--test-- "map-find-1"
		mf1-m: #(a: none b: 1 c: 2)
		--assert true = find mf1-m 'a
		--assert true = find mf1-m 'b
		--assert true = find mf1-m 'c
		--assert none = find mf1-m 'd
		
	--test-- "map-find-2"
		mf2-m: #(a: 1 b: 2 c: 3)
		mf2-m/a: 'none
		mf2-m/b: none
		--assert true = find mf2-m 'a
		--assert none = find mf2-m 'b
		--assert true = find mf2-m 'c

===end-group===

===start-group=== "copy"

	--test-- "map-copy-1"
		mcp1-m: #(a: 1 b: 2)
		mcp1-n: copy mcp1-m
		--assert 1 = mcp1-n/a
		--assert 2 = mcp1-n/b

===end-group===

===start-group=== "string keys"

	--test-- "map-string-keys-1"
		msk1-b: copy []
		msk1-k: copy "key"
		append msk1-b msk1-k
		append msk1-b copy "value"
		msk1-m: make map! msk1-b
		--assert "value" = select msk1-m msk1-k
		append msk1-k "chain"
		--assert none = select msk1-m msk1-k
		--assert "value" = select msk1-m "key"
		
	--test-- "map-string-keys-2"
		msk2-m: #("abcde" 1 "é" 2 "€" 3 "^(1D122)" 4)
		--assert 1 = select msk2-m "abcde"
		--assert 2 = select msk2-m "é"
		--assert 3 = select msk2-m "€"
		--assert 4 = select msk2-m "^(1D122)"
		
===end-group===

===start-group=== "put"

	--test-- "map-put-1"
		mput1-m: #(a: 1 b: 2)
		--assert 3 = put mput1-m 'c 3
		--assert 3 = mput1-m/c
		
	--test-- "map-put-2"
		mput2-m: #(a: 1 b: 2)
		--assert 4 = put mput2-m 'b 4
		--assert 4 = mput2-m/b
	
	--test-- "map-put-3"
		mput3-m: #(a: 1 b: 2)
		--assert unset! = type? put mput3-m 'a print ""
		--assert unset! = type? mput3-m/a
		--assert 2 = length? mput3-m 
		
	--test-- "map-put-4"
		mput4-m: #(a: 1 b: 2)
		--assert none = put mput4-m 'a none
		--assert none = find words-of mput4-m 'a
		--assert none = mput4-m/a
		--assert 1 = length? mput4-m

===end-group===

===start-group=== "function values"

	--test-- "map-func-1"
		mf1-a: 1
		mf1-m: make map! compose [
			mf1-a: 2
			f: (func[][mf1-a])
		]
		--assert 1 = do [mf1-m/f]
	
	--test-- "map-func-2"
		mf2-a: 1
		mf2-m: make map! compose [
			mf2-a: 2
			f: (func[][mf2-m/mf2-a])
		]
		--assert 2 = do [mf2-m/f]

===end-group===

===start-group=== "serialise"

	--test-- "map-serialise-1"
		mser1-m: #(a 1 b 2 c 3)
		--assert {#(^/    a: 1^/    b: 2^/    c: 3^/)} = mold mser1-m
		--assert "a: 1^/b: 2^/c: 3" = form mser1-m
	
	--test-- "map-serialise-2"
		mser2-m: #("a" 1 "b" 2 "c" 3)
		--assert {#(^/    "a" 1^/    "b" 2^/    "c" 3^/)} = mold mser2-m
		--assert {"a" 1^/"b" 2^/"c" 3} = form mser2-m
		
	--test-- "map-serialise-3"
		mser3-m: #(a 1 b 2 c 3)
		--assert #(a: 1 b: 2 c: 3) = load mold mser3-m
		--assert #(a: 1 b: 2 c: 3) = make map! load form mser3-m
	
	--test-- "map-serialise-4"
		mser4-m: #("a" 1 "b" 2 "c" 3)
		--assert #("a" 1 "b" 2 "c" 3) = load mold mser4-m
		--assert #("a" 1 "b" 2 "c" 3) = make map! load form mser4-m
		
	--test-- "map-serialise-5"
		--assert #(a: 1 b: 2 c: 3) = load mold #(a 1 b 2 c 3)
		--assert #(a: 1 b: 2 c: 3) = make map! load form #(a 1 b 2 c 3)
	
	--test-- "map-serialise-6"
		mser4-m: #("a" 1 "b" 2 "c" 3)
		--assert #("a" 1 "b" 2 "c" 3) = load mold #("a" 1 "b" 2 "c" 3)
		--assert #("a" 1 "b" 2 "c" 3) = make map! load form #("a" 1 "b" 2 "c" 3)

===end-group===

===start-group=== "issues"

	--test-- "issue-1835"
		m: make map! [a 1 A 2]
		--assert 2 = select/case m 'A
		--assert 1 = select/case m 'a

		--assert #(a: 2) = make map! [a: 1 a  2]
		--assert #(a: 2) = make map! [a  1 a: 2]

		m: make map! [a 1 A 2 a: 3 :a 4]
		--assert 4 = select m 'a
		--assert 4 = select m first [:a]
		--assert 4 = select/case m first [:a]
		--assert 4 = select/case m first [a:]
		--assert 2 = select/case m first [A]
		--assert 2 = select/case m 'A

	--test-- "issue-1834"
	--assert #(a: 3) = extend/case extend/case make map! [a 1] [a 2] [a 3]

===end-group===


===start-group=== "pair - basic"

	--test-- "pb-1"
		pb1-p: 1x1
		--assert equal? pb1-p/x 1
		--assert equal? pb1-p/y 1
		--assert equal? first pb1-p 1
		--assert equal? second pb1-p 1
		--assert equal? pb1-p 1x1
		--assert equal? pick pb1-p 1 1
		--assert equal? pick pb1-p 2 1
		
	--test-- "pb-2"
		pb2-p: 0x0
		--assert equal? pb2-p/x 0
		--assert equal? pb2-p/y 0
		--assert equal? first pb2-p 0
		--assert equal? second pb2-p 0
		--assert equal? pb2-p 0x0
		--assert equal? pick pb2-p 1 0
		--assert equal? pick pb2-p 2 0
		
	--test-- "pb-3"
		pb3-p: 2147483647x2147483647
		--assert equal? pb3-p/x 2147483647
		--assert equal? pb3-p/y 2147483647
		--assert equal? first pb3-p 2147483647
		--assert equal? second pb3-p 2147483647
		--assert equal? pb3-p 2147483647x2147483647
		--assert equal? pick pb3-p 1 2147483647
		--assert equal? pick pb3-p 2 2147483647
		
	--test-- "pb-4"
		pb4-p: -2147483648x-2147483648
		--assert equal? pb4-p/x -2147483648
		--assert equal? pb4-p/y -2147483648
		--assert equal? first pb4-p -2147483648
		--assert equal? second pb4-p -2147483648
		--assert equal? pb4-p -2147483648x-2147483648
		--assert equal? pick pb4-p 1 -2147483648
		--assert equal? pick pb4-p 2 -2147483648
		
	--test-- "pb-5"
		pb5-p: 2147483647x-2147483648
		--assert equal? pb5-p/x 2147483647
		--assert equal? pb5-p/y -2147483648
		--assert equal? first pb5-p 2147483647
		--assert equal? second pb5-p -2147483648
		--assert equal? pb5-p 2147483647x-2147483648
		--assert equal? pick pb5-p 1 2147483647
		--assert equal? pick pb5-p 2 -2147483648
		
	--test-- "pb-6"			--assert equal? 3x4 as-pair 3 4
	--test-- "pb-7"			--assert equal? 4x5 make pair! [4 5]
	--test-- "pb-8"			--assert equal? none attempt [as-pair 10]
	--test-- "pb-9"			--assert equal? 10x10 make pair! 10
		
===end-group===

===start-group=== "pair - assignment"

	--test-- "pa-1"
		pa1-p: 1x1
		--assert equal? pa1-p 1x1
		pa1-p/x: 0
		--assert equal? pa1-p 0x1
		pa1-p/y: 0
		--assert equal? pa1-p 0x0

===end-group===

===start-group=== "pair - add"

	--test-- "padd-1"
		padd1-p: 1x1
		--assert equal? padd1-p + 2 3x3
	
	--test-- "padd-2"
		padd2-p: 1x1
		--assert equal? padd2-p + 2x1 3x2
		
	--test-- "padd-3"
		padd3-p: 1x1
		--assert equal? padd3-p + 2147483646x2147483646 2147483647x2147483647
		
	--test-- "padd-4"
		padd4-p: 1x1
		--assert equal? padd4-p + 2147483646 2147483647x2147483647
		
===end-group===

===start-group=== "pair - subtract"

	--test-- "psub-1"
		psub1-p: 1x1
		--assert equal? psub1-p - 2 -1x-1
	
	--test-- "psub-2"
		psub2-p: 1x1
		--assert equal? psub2-p - 2x1 -1x0
		
	--test-- "psub-3"
		psub3-p: 1x1
		--assert equal? psub3-p - 2147483647x2147483647 -2147483646x-2147483646
		
	--test-- "psub-4"
		psub4-p: -1x-1
		--assert equal? psub4-p - 2147483647 -2147483648x-2147483648
		
===end-group===


===start-group=== "pair - multiply"

	--test-- "pmul-1"
		pmul1-p: 1x1
		--assert equal? pmul1-p * 2 2x2
	
	--test-- "pmul-2"
		pmul2-p: 1x1
		--assert equal? pmul2-p * 2x1 2x1
; awaiting integer! to float! promotion			
	--test-- "pmul-3"
		pmul3-p: 2x2
		;--assert equal? attempt [pmul3-p * 2147483647x2147483647] none
		
	--test-- "pmul-4"
		pmul4-p: -3x-3
		;--assert equal? attempt [pmul4-p * -2147483648] none
	
===end-group===

===start-group=== "pair - divide"

	--test-- "pdiv-1"
		pdiv1-p: 4x4
		--assert equal? pdiv1-p / 2 2x2
	
	--test-- "pdiv-2"
		pdiv2-p: 16x15
		--assert equal? pdiv2-p / 2x1 8x15
		
	--test-- "pdiv-3"
		pdiv3-p: 2147483647x2147483647
		--assert equal? pdiv3-p / 2 1073741823x1073741823
		
	--test-- "pdiv-4"
		pdiv4-p: -2147483648x-2147483648
		--assert equal? pdiv4-p / -2147483648 1x1
		
===end-group===

===start-group=== "pair - remainder"

	--test-- "prem-1"
		prem1-p: 4x4
		--assert equal? prem1-p % 2 0x0
	
	--test-- "prem-2"
		prem2-p: 16x15
		--assert equal? prem2-p % 2x3 0x0
		
	--test-- "prem-3"
		prem3-p: 2147483647x2147483647
		--assert equal? prem3-p % 2 1x1
		
	--test-- "prem-4"
		prem4-p: -2147483648x-2147483648
		--assert equal? prem4-p % -2147483648 0x0
		
===end-group===

===start-group=== "pair - negate"

	--test-- "pneg-1"
		pneg1-p: 4x4
		--assert equal? negate pneg1-p -4x-4
	
	--test-- "pneg-2"
		pneg2-p: -16x-15
		--assert equal? negate pneg2-p 16x15
		
	--test-- "pneg-3"
		pneg3-p: 2147483647x2147483647
		--assert equal? negate pneg3-p -2147483647x-2147483647
; awaiting integer! to float! promotion		
	--test-- "pneg-4"
		pneg4-p: -2147483648x-2147483648
;		--assert equal? attempt [negate pneg4-p] none
		
===end-group===

===start-group=== "pair - and"
	
	--test-- "pand-1"		--assert equal? 0x0 (1x1 and 0x0)
	--test-- "pand-2"		--assert equal? 1x1 (1x1 and 1x1)
	--test-- "pand-3"   	--assert equal? 1x0 (1x1 and 1x0)
	--test-- "pand-4" 		--assert equal? 16x0 (16x16 and 16x4)
	--test-- "pand-5"		--assert equal? 7x4	(7x7 and 7x4)

===end-group===

===start-group=== "pair - and"
	
	--test-- "pand-1"		--assert equal? 0x0 (1x1 and 0x0)
	--test-- "pand-2"		--assert equal? 1x1 (1x1 and 1x1)
	--test-- "pand-3"   	--assert equal? 1x0 (1x1 and 1x0)
	--test-- "pand-4" 		--assert equal? 16x0 (16x16 and 16x4)
	--test-- "pand-5"		--assert equal? 7x4	(7x7 and 7x4)

===end-group===

===start-group=== "pair - or"

	--test-- "por-1"		--assert equal? 1x1 (1x1 or 0x0)
	--test-- "por-2"		--assert equal? 1x1 (1x1 or 1x1)
	--test-- "por-3"   		--assert equal? 1x1 (1x1 or 1x0)
	--test-- "por-4" 		--assert equal? 16x20 (16x16 or 16x4)
	--test-- "por-5"		--assert equal? 7x7	(7x7 or 7x4)

===end-group===

===start-group=== "pair - xor"

	--test-- "pxor-1"		--assert equal? 1x1 (1x1 xor 0x0)
	--test-- "pxor-2"		--assert equal? 0x0 (1x1 xor 1x1)
	--test-- "pxor-3"   	--assert equal? 0x1 (1x1 xor 1x0)
	--test-- "pxor-4" 		--assert equal? 0x20 (16x16 xor 16x4)
	--test-- "pxor-5"		--assert equal? 0x3	(7x7 xor 7x4)

===end-group===

===start-group=== "pair - reverse"

	--test-- "prev-1"		--assert equal? reverse 1x2 2x1
	
===end-group===

===start-group=== "pair - comparison"

	--test-- "pcomp-1"		--assert equal? 1x1 1x1
	--test-- "pcomp-2"		--assert not-equal? 1x1 1x0
	--test-- "pcomp-3"		--assert not-equal? 1x1 0x1
	--test-- "pcomp-4"		--assert not-equal? 1x1 0x0

===end-group===



===start-group=== "to-char!"
	--test-- "to-char!-char!"
		--assert #"a" = to char! #"a"
	--test-- "to-char!-string!"
		--assert #"f" = to char! "foo"
	--test-- "to-char!-integer!"
		--assert #"{" = to char! 123
	--test-- "to-char!-integer!"
		--assert #"Ā" = to char! 256
	--test-- "to-char!-float!"
		--assert #"^A" = to char! 1.5
	--test-- "to-char!-binary!"
		--assert #"a" = to char! #{616263}
===end-group===

===start-group=== "to-string!"
	--test-- "to-string!-char!"
		--assert "a" = to string! #"a"
	--test-- "to-string!-string!"
		--assert "foo" = to string! "foo"
	--test-- "to-string!-integer!"
		--assert "123" = to string! 123
	--test-- "to-string!-integer!"
		--assert "256" = to string! 256
	--test-- "to-string!-float!"
		--assert "1.5" = to string! 1.5
	--test-- "to-string!-integer!"
		--assert "-1" = to string! -1
	--test-- "to-string!-float!"
		--assert "-1.5" = to string! -1.5
	--test-- "to-string!-pair!"
		--assert "1x2" = to string! 1x2
	--test-- "to-string!-word!"
		--assert "word" = to string! 'word
	--test-- "to-string!-refinement!"
		--assert "refinement" = to string! /refinement
	--test-- "to-string!-path!"
		--assert "path/foo" = to string! 'path/foo
	--test-- "to-string!-url!"
		--assert "http://red-lang.org" = to string! http://red-lang.org
	--test-- "to-string!-file!"
		--assert "/file/" = to string! %/file/
	 --test-- "to-string!-issue!"
		 --assert "FF00" = to string! #FF00
	--test-- "to-string!-binary!"
		--assert "" = to string! #{}
	--test-- "to-string!-binary!"
		--assert "abc" = to string! #{616263}
	--test-- "to-string!-block!"
		--assert "" = to string! []
	--test-- "to-string!-block!"
		--assert "12" = to string! [1 2]
	--test-- "to-string!-block!"
		--assert "123" = to string! [1 2 3]
	--test-- "to-string!-block!"
		--assert "ab" = to string! ["a" "b"]
	--test-- "to-string!-tuple!"
		--assert "1.1.1" = to string! 1.1.1
	--test-- "to-string!-paren!"
		--assert "" = to string! first [()]
	--test-- "to-string!-paren!"
		--assert "12" = to string! first [(1 2)]
	--test-- "to-string!-tag!"
		--assert "a" = to string! <a>
	--test-- "to-string!-time!"
		--assert "10:00:00" = to string! 10:00
;	   --test-- "to-string!-date!"
;		   --assert "16-Jun-2014/14:34:59+2:00" = to string! 16-Jun-2014/14:34:59+2:00
	--test-- "to-string!-email!"
		--assert "foo@boo" = to string! foo@boo
	--test-- "to-string!-bitset!"
		--assert "make bitset! #{00}" = to string! make bitset! #{00}
===end-group===
===start-group=== "to-integer!"
	--test-- "to-integer!-char!"
		--assert 97 = to integer! #"a"
	--test-- "to-integer!-integer!"
		--assert 123 = to integer! 123
	--test-- "to-integer!-integer!"
		--assert 256 = to integer! 256
	--test-- "to-integer!-float!"
		--assert 1 = to integer! 1.5
	--test-- "to-integer!-integer!"
		--assert -1 = to integer! -1
	--test-- "to-integer!-float!"
		--assert -1 = to integer! -1.5
	--test-- "to-integer!-issue!"
		--assert 65280 = to integer! #FF00
	--test-- "to-integer!-binary!"
		--assert 0 = to integer! #{}
	--test-- "to-integer!-binary!"
		--assert 6382179 = to integer! #{616263}
	--test-- "to-integer!-time!"
		--assert 36000 = to integer! 10:00
===end-group===
===start-group=== "to-float!"
	--test-- "to-float!-char!"
		--assert 97.0 = to float! #"a"
	--test-- "to-float!-integer!"
		--assert 123.0 = to float! 123
	--test-- "to-float!-integer!"
		--assert 256.0 = to float! 256
	--test-- "to-float!-float!"
		--assert 1.5 = to float! 1.5
	--test-- "to-float!-integer!"
		--assert -1.0 = to float! -1
	--test-- "to-float!-float!"
		--assert -1.5 = to float! -1.5
	--test-- "to-float!-binary!"
		--assert 0.0 = to float! #{}
	--test-- "to-float!-binary!"
		--assert 3.1532154e-317 = to float! #{616263}
	--test-- "to-float!-block!"
		--assert 100.0 = to float! [1 2]
	--test-- "to-float!-paren!"
		--assert 100.0 = to float! first [(1 2)]
	   --test-- "to-float!-time!"
		   --assert 36000.0 = to float! 10:00
===end-group===
===start-group=== "to-pair!"
	--test-- "to-pair!-integer!"
		--assert 123x123 = to pair! 123
	--test-- "to-pair!-integer!"
		--assert 256x256 = to pair! 256
;	--test-- "to-pair!-float!"
;		--assert 1.5x1.5 = to pair! 1.5
	--test-- "to-pair!-integer!"
		--assert -1x-1 = to pair! -1
;	   --test-- "to-pair!-float!"
;		   --assert -1.5x-1.5 = to pair! -1.5
	--test-- "to-pair!-pair!"
		--assert 1x2 = to pair! 1x2
	--test-- "to-pair!-block!"
		--assert 1x2 = to pair! [1 2]
===end-group===
===start-group=== "to-word!"
	--test-- "to-word!-char!"
		--assert 'a = to word! #"a"
	--test-- "to-word!-string!"
		--assert 'foo = to word! "foo"
	--test-- "to-word!-word!"
		--assert 'word = to word! 'word
	--test-- "to-word!-refinement!"
		--assert 'refinement = to word! /refinement
	--test-- "to-word!-issue!"
		--assert 'FF00 = to word! #FF00
===end-group===
===start-group=== "to-refinement!"
	--test-- "to-refinement!-char!"
		--assert refinement? to refinement! #"a"
		--assert "/a" = mold to refinement! #"a"
	--test-- "to-refinement!-string!"
		--assert refinement? to refinement! "foo"
		--assert "/foo" = mold to refinement! "foo"
	--test-- "to-refinement!-word!"
		--assert refinement? to refinement! 'word
		--assert "/word" = mold to refinement! 'word
	--test-- "to-refinement!-refinement!"
		--assert refinement? to refinement! /refinement
		--assert "/refinement" = mold to refinement! /refinement
	--test-- "to-refinement!-issue!"
		--assert /FF00 = to refinement! #FF00
===end-group===
===start-group=== "to-path!"
	--test-- "to-path!-char!"
		--assert path? to path! #"a"
		--assert {#"a"} = mold to path! #"a"
	--test-- "to-path!-string!"
		--assert path? to path! "foo"
		--assert "foo" = form to path! "foo"
	--test-- "to-path!-integer!"
		--assert path? to path! 123
		--assert "123" = form to path! 123
	--test-- "to-path!-integer!"
		--assert path? to path! 256
		--assert "256" = form to path! 256
	--test-- "to-path!-float!"
		--assert path? to path! 1.5
		--assert "1.5" = form to path! 1.5
	--test-- "to-path!-integer!"
		--assert path? to path! -1
		--assert "-1" = form to path! -1
	--test-- "to-path!-float!"
		--assert path? to path! -1.5
		--assert "-1.5" = form to path! -1.5
	   --test-- "to-path!-pair!"
		   --assert path? to path! 1x2
		   --assert "1x2" = form to path! 1x2
	--test-- "to-path!-word!"
		--assert path? to path! 'word
		--assert "word" = form to path! 'word
	--test-- "to-path!-refinement!"
		--assert path? to path! /refinement
		--assert "/refinement" = mold to path! /refinement
	--test-- "to-path!-path!"
		--assert path? to path! 'path/foo
		--assert "path/foo" = mold to path! 'path/foo
	--test-- "to-path!-url!"
		--assert path? to path! http://red-lang.org
		--assert http://red-lang.org = first to path! http://red-lang.org
	--test-- "to-path!-file!"
		--assert path? to path! %/file/
		--assert "%/file/" = mold to path! %/file/
	--test-- "to-path!-issue!"
		--assert path? to path! #FF00
		--assert "#FF00" = mold to path! #FF00
	--test-- "to-path!-binary!"
		--assert path? to path! #{}
		--assert "#{}" = mold to path! #{}
	--test-- "to-path!-binary!"
		--assert path? to path! #{616263}
		--assert "#{616263}" = mold to path! #{616263}
	--test-- "to-path!-block!"
		--assert path? to path! []
		--assert "" = mold to path! []
	--test-- "to-path!-block!"
		--assert path? to path! [1 2]
		--assert "1/2" = form to path! [1 2]
	--test-- "to-path!-block!"
		--assert path? to path! [1 2 3]
		--assert "1/2/3" = form to path! [1 2 3]
	--test-- "to-path!-block!"
		--assert path? to path! ["a" "b"]
		--assert {"a"/"b"} = mold to path! ["a" "b"]
	   --test-- "to-path!-tuple!"
		   --assert path? to path! 1.1.1
		   --assert "1.1.1" = form to path! 1.1.1
	--test-- "to-path!-paren!"
		--assert path? to path! first [()]
	;	--assert "#[path! []]" = form to path! first [()]
	--test-- "to-path!-paren!"
		--assert path? to path! first [(1 2)]
		--assert "1/2" = form to path! first [(1 2)]
	--test-- "to-path!-tag!"
		--assert path? to path! <a>
		--assert <a> = first to path! <a>
	--test-- "to-path!-time!"
		--assert path? to path! 10:00
		--assert 10:00 = first to path! 10:00
;	   --test-- "to-path!-date!"
;		   --assert path? to path! 16-Jun-2014/14:34:59+2:00
;		   --assert "16-Jun-2014/14:34:59+2:00" = form to path! 16-Jun-2014/14:34:59+2:00
	--test-- "to-path!-email!"
		--assert path? to path! foo@boo
		--assert foo@boo = first to path! foo@boo
	--test-- "to-path!-bitset!"
		--assert path? to path! make bitset! #{00}
		--assert "make bitset! #{00}" = form to path! make bitset! #{00}
===end-group===
===start-group=== "to-url!"
	--test-- "to-url!-char!"
		--assert url? to url! #"a"
		--assert "a" = form to url! #"a"
	--test-- "to-url!-string!"
		--assert url? to url! "foo"
		--assert "foo" = form to url! "foo"
	--test-- "to-url!-integer!"
		--assert url? to url! 123
		--assert "123" = form to url! 123
	--test-- "to-url!-integer!"
		--assert url? to url! 256
		--assert "256" = form to url! 256
	--test-- "to-url!-float!"
		--assert url? to url! 1.5
		--assert "1.5" = form to url! 1.5
	--test-- "to-url!-integer!"
		--assert url? to url! -1
		--assert "-1" = form to url! -1
	--test-- "to-url!-float!"
		--assert url? to url! -1.5
		--assert "-1.5" = form to url! -1.5
	--test-- "to-url!-pair!"
		--assert url? to url! 1x2
		--assert "1x2" = form to url! 1x2
	--test-- "to-url!-word!"
		--assert url? to url! 'word
		--assert "word" = form to url! 'word
	--test-- "to-url!-refinement!"
		--assert url? to url! /refinement
		--assert "/refinement" = form to url! /refinement
	--test-- "to-url!-path!"
		--assert url? to url! 'path/foo
		--assert "path/foo" = form to url! 'path/foo
	--test-- "to-url!-url!"
		--assert url? to url! http://red-lang.org
		--assert "http://red-lang.org" = form to url! http://red-lang.org
	--test-- "to-url!-file!"
		--assert url? to url! %/file/
		--assert "/file/" = form to url! %/file/
	 --test-- "to-url!-issue!"
		--assert url? to url! #FF00
		--assert "FF00" = form to url! #FF00
	   --test-- "to-url!-binary!"
		   --assert url? to url! #{}
		   --assert "" = form to url! #{}
	--test-- "to-url!-binary!"
		--assert url? to url! #{616263}
		--assert "abc" = form to url! #{616263}
	   --test-- "to-url!-block!"
		   --assert url? to url! []
		   --assert "" = form to url! []
	 --test-- "to-url!-block!"
		--assert url? to url! [1 2]
		--assert "12" = form to url! [1 2]
	--test-- "to-url!-block!"
		--assert url? to url! [1 2 3]
		--assert "123" = form to url! [1 2 3]
	--test-- "to-url!-block!"
		--assert url? to url! ["a" "b"]
		--assert "ab" = form to url! ["a" "b"]
	--test-- "to-url!-tuple!"
		--assert url? to url! 1.1.1
		--assert "1.1.1" = form to url! 1.1.1
	   --test-- "to-url!-paren!"
		   --assert url? to url! first [()]
		   --assert "" = form to url! first [()]
	   --test-- "to-url!-paren!"
		--assert url? to url! first [(1 2)]
		--assert "12" = form to url! first [(1 2)]
	--test-- "to-url!-tag!"
		--assert url? to url! <a>
		--assert "a" = form to url! <a>
	--test-- "to-url!-time!"
		--assert url? to url! 10:00
		--assert "10:00:00" = form to url! 10:00
;	   --test-- "to-url!-date!"
;		   --assert url? to url! 16-Jun-2014/14:34:59+2:00
;		   --assert "16-Jun-2014/14:34:59+2:00" = form to url! 16-Jun-2014/14:34:59+2:00
	--test-- "to-url!-email!"
		--assert url? to url! foo@boo
		--assert "foo@boo" = form to url! foo@boo
	--test-- "to-url!-bitset!"
		--assert url? to url! make bitset! #{00}
		--assert "make bitset! #{00}" = form to url! make bitset! #{00}
===end-group===
===start-group=== "to-file!"
	--test-- "to-file!-char!"
		--assert %a = to file! #"a"
	--test-- "to-file!-string!"
		--assert %foo = to file! "foo"
	--test-- "to-file!-integer!"
		--assert %123 = to file! 123
	--test-- "to-file!-integer!"
		--assert %256 = to file! 256
	--test-- "to-file!-float!"
		--assert %1.5 = to file! 1.5
	--test-- "to-file!-integer!"
		--assert %-1 = to file! -1
	--test-- "to-file!-float!"
		--assert %-1.5 = to file! -1.5
	--test-- "to-file!-pair!"
		--assert %1x2 = to file! 1x2
	--test-- "to-file!-word!"
		--assert %word = to file! 'word
	--test-- "to-file!-refinement!"
		--assert %/refinement = to file! /refinement
	--test-- "to-file!-path!"
		--assert %path/foo = to file! 'path/foo
	--test-- "to-file!-url!"
		--assert "http://red-lang.org" = form to file! http://red-lang.org
	--test-- "to-file!-file!"
		--assert %/file/ = to file! %/file/
	--test-- "to-file!-issue!"
		--assert %FF00 = to file! #FF00
	--test-- "to-file!-binary!"
		--assert %"" = to file! #{}
	--test-- "to-file!-binary!"
		--assert %abc = to file! #{616263}
	--test-- "to-file!-block!"
		--assert %"" = to file! []
	--test-- "to-file!-block!"
		--assert %12 = to file! [1 2]
	--test-- "to-file!-block!"
		--assert %123 = to file! [1 2 3]
	--test-- "to-file!-block!"
		--assert %ab = to file! ["a" "b"]
	--test-- "to-file!-tuple!"
		--assert %1.1.1 = to file! 1.1.1
	--test-- "to-file!-paren!"
		--assert %"" = to file! first [()]
	--test-- "to-file!-paren!"
		--assert %12 = to file! first [(1 2)]
	--test-- "to-file!-tag!"
		--assert %a = to file! <a>
	--test-- "to-file!-time!"
		--assert "10:00:00" = form to file! 10:00
;	   --test-- "to-file!-date!"
;		   --assert %16-Jun-2014/14:34:59+2:00 = to file! 16-Jun-2014/14:34:59+2:00
	--test-- "to-file!-email!"
		--assert "foo@boo" = form to file! foo@boo
	--test-- "to-file!-bitset!"
		--assert %make%20bitset!%20#%7B00%7D = to file! make bitset! #{00}
===end-group===
===start-group=== "to-issue!"
	--test-- "to-issue!-char!"
		--assert #a = to issue! #"a"
	--test-- "to-issue!-string!"
		--assert #foo = to issue! "foo"
	--test-- "to-issue!-word!"
		--assert #word = to issue! 'word
	--test-- "to-issue!-refinement!"
		--assert #refinement = to issue! /refinement
	--test-- "to-issue!-issue!"
		--assert #FF00 = to issue! #FF00
===end-group===
===start-group=== "to-binary!"
	--test-- "to-binary!-char!"
		--assert #{61} = to binary! #"a"
	--test-- "to-binary!-string!"
		--assert #{666F6F} = to binary! "foo"
	--test-- "to-binary!-integer!"
		--assert #{0000007B} = to binary! 123
	--test-- "to-binary!-integer!"
		--assert #{00000100} = to binary! 256
	--test-- "to-binary!-float!"
		--assert #{3FF8000000000000} = to binary! 1.5
	--test-- "to-binary!-integer!"
		--assert #{FFFFFFFF} = to binary! -1
	--test-- "to-binary!-float!"
		--assert #{BFF8000000000000} = to binary! -1.5
	--test-- "to-binary!-url!"
		--assert #{687474703A2F2F7265642D6C616E672E6F7267} = to binary! http://red-lang.org
	--test-- "to-binary!-file!"
		--assert #{2F66696C652F} = to binary! %/file/
	--test-- "to-binary!-binary!"
		--assert #{} = to binary! #{}
	--test-- "to-binary!-binary!"
		--assert #{616263} = to binary! #{616263}
	--test-- "to-binary!-block!"
		--assert #{} = to binary! []
	--test-- "to-binary!-block!"
		--assert #{0102} = to binary! [1 2]
	--test-- "to-binary!-block!"
		--assert #{010203} = to binary! [1 2 3]
	--test-- "to-binary!-block!"
		--assert #{6162} = to binary! ["a" "b"]
        --test-- "to-binary!-tuple!"
                --assert #{010101} = to binary! 1.1.1
        --test-- "to-binary!-tag!"
                --assert #{61} = to binary! <a>
        --test-- "to-binary!-email!"
                --assert #{666F6F40626F6F} = to binary! foo@boo
	--test-- "to-binary!-bitset!"
		--assert #{00} = to binary! make bitset! #{00}
===end-group===
===start-group=== "to-block!"
	--test-- "to-block!-char!"
		--assert [#"a"] = to block! #"a"
	--test-- "to-block!-string!"
		--assert [foo] = to block! "foo"
	--test-- "to-block!-integer!"
		--assert [123] = to block! 123
	--test-- "to-block!-integer!"
		--assert [256] = to block! 256
	--test-- "to-block!-float!"
		--assert [1.5] = to block! 1.5
	--test-- "to-block!-integer!"
		--assert [-1] = to block! -1
	--test-- "to-block!-float!"
		--assert [-1.5] = to block! -1.5
	--test-- "to-block!-pair!"
		--assert [1x2] = to block! 1x2
	--test-- "to-block!-word!"
		--assert [word] = to block! 'word
	--test-- "to-block!-refinement!"
		--assert [/refinement] = to block! /refinement
	--test-- "to-block!-path!"
		--assert [path foo] = to block! 'path/foo
	--test-- "to-block!-url!"
		--assert [http://red-lang.org] = to block! http://red-lang.org
	--test-- "to-block!-file!"
		--assert [%/file/] = to block! %/file/
	--test-- "to-block!-issue!"
		--assert [#FF00] = to block! #FF00
	--test-- "to-block!-binary!"
		--assert [#{}] = to block! #{}
	--test-- "to-block!-binary!"
		--assert [#{616263}] = to block! #{616263}
	--test-- "to-block!-block!"
		--assert [] = to block! []
	--test-- "to-block!-block!"
		--assert [1 2] = to block! [1 2]
	--test-- "to-block!-block!"
		--assert [1 2 3] = to block! [1 2 3]
	--test-- "to-block!-block!"
		--assert ["a" "b"] = to block! ["a" "b"]
	--test-- "to-block!-tuple!"
		--assert [1.1.1] = to block! 1.1.1
	--test-- "to-block!-paren!"
		--assert [] = to block! first [()]
	--test-- "to-block!-paren!"
		--assert [1 2] = to block! first [(1 2)]
	--test-- "to-block!-tag!"
		--assert [<a>] = to block! <a>
	--test-- "to-block!-time!"
		--assert [10:00] = to block! 10:00
;	--test-- "to-block!-date!"
;		--assert [16-Jun-2014/14:34:59+2:00] = to block! 16-Jun-2014/14:34:59+2:00
	--test-- "to-block!-email!"
		--assert [foo@boo] = to block! foo@boo
	--test-- "to-block!-bitset!"
		--assert (reduce [make bitset! #{00}]) = to block! make bitset! #{00}
===end-group===
===start-group=== "to-tuple!"
	   --test-- "to-tuple!-issue!"
		   --assert 255.0.0 = to tuple! #FF00
	   --test-- "to-tuple!-binary!"
		   --assert 0.0.0 = to tuple! #{}
	   --test-- "to-tuple!-binary!"
		   --assert 97.98.99 = to tuple! #{616263}
	   --test-- "to-tuple!-block!"
		   --assert 0.0.0 = to tuple! []
	   --test-- "to-tuple!-block!"
		   --assert 1.2.0 = to tuple! [1 2]
	   --test-- "to-tuple!-block!"
		   --assert 1.2.3 = to tuple! [1 2 3]
	   --test-- "to-tuple!-tuple!"
		   --assert 1.1.1 = to tuple! 1.1.1
	   --test-- "to-tuple!-paren!"
		   --assert 0.0.0 = to tuple! first [()]
	   --test-- "to-tuple!-paren!"
		   --assert 1.2.0 = to tuple! first [(1 2)]
===end-group===
===start-group=== "to-paren!"
	--test-- "to-paren!-char!"
		--assert (first [(#"a")]) = to paren! #"a"
	--test-- "to-paren!-string!"
		--assert (first [('foo)]) = to paren! "foo"
	--test-- "to-paren!-integer!"
		--assert (first [(123)]) = to paren! 123
	--test-- "to-paren!-integer!"
		--assert (first [(256)]) = to paren! 256
	--test-- "to-paren!-float!"
		--assert (first [(1.5)]) = to paren! 1.5
	--test-- "to-paren!-integer!"
		--assert (first [(-1)]) = to paren! -1
	--test-- "to-paren!-float!"
		--assert (first [(-1.5)]) = to paren! -1.5
	--test-- "to-paren!-pair!"
		--assert (first [(1x2)]) = to paren! 1x2
	--test-- "to-paren!-word!"
		--assert (first [('word)]) = to paren! 'word
	--test-- "to-paren!-refinement!"
		--assert (first [(/refinement)]) = to paren! /refinement
	--test-- "to-paren!-path!"
		--assert (first [('path 'foo)]) = to paren! 'path/foo
	--test-- "to-paren!-url!"
		--assert (first [(http://red-lang.org)]) = to paren! http://red-lang.org
	--test-- "to-paren!-file!"
		--assert (first [(%/file/)]) = to paren! %/file/
	--test-- "to-paren!-issue!"
		--assert (first [(#FF00)]) = to paren! #FF00
	--test-- "to-paren!-binary!"
		--assert (first [(#{})]) = to paren! #{}
	--test-- "to-paren!-binary!"
		--assert (first [(#{616263})]) = to paren! #{616263}
	--test-- "to-paren!-block!"
		--assert (first [()]) = to paren! []
	--test-- "to-paren!-block!"
		--assert (first [(1 2)]) = to paren! [1 2]
	--test-- "to-paren!-block!"
		--assert (first [(1 2 3)]) = to paren! [1 2 3]
	--test-- "to-paren!-block!"
		--assert (first [("a" "b")]) = to paren! ["a" "b"]
	--test-- "to-paren!-tuple!"
		--assert (first [(1.1.1)]) = to paren! 1.1.1
	--test-- "to-paren!-paren!"
		--assert (first [()]) = to paren! first [()]
	--test-- "to-paren!-paren!"
		--assert (first [(1 2)]) = to paren! first [(1 2)]
	--test-- "to-paren!-tag!"
		--assert (first [(<a>)]) = to paren! <a>
	--test-- "to-paren!-time!"
		--assert (first [(10:00)]) = to paren! 10:00
;	   --test-- "to-paren!-date!"
;		   --assert (first [(16-Jun-2014/14:34:59+2:00)]) = to paren! 16-Jun-2014/14:34:59+2:00
	--test-- "to-paren!-email!"
		--assert (first [(foo@boo)]) = to paren! foo@boo
	--test-- "to-paren!-bitset!"
		append p: make paren! 1 make bitset! #{00}
		--assert p = to paren! make bitset! #{00}
===end-group===
===start-group=== "to-tag!"
	   --test-- "to-tag!-char!"
		   --assert <a> = to tag! #"a"
	   --test-- "to-tag!-string!"
		   --assert <foo> = to tag! "foo"
	   --test-- "to-tag!-integer!"
		   --assert <123> = to tag! 123
	   --test-- "to-tag!-integer!"
		   --assert <256> = to tag! 256
	   --test-- "to-tag!-float!"
		   --assert <1.5> = to tag! 1.5
	   --test-- "to-tag!-integer!"
		   --assert <-1> = to tag! -1
	   --test-- "to-tag!-float!"
		   --assert <-1.5> = to tag! -1.5
	   --test-- "to-tag!-pair!"
		   --assert <1x2> = to tag! 1x2
	   --test-- "to-tag!-word!"
		   --assert <word> = to tag! 'word
	   --test-- "to-tag!-refinement!"
		   --assert </refinement> = to tag! /refinement
	   --test-- "to-tag!-path!"
		   --assert <path/foo> = to tag! 'path/foo
	   --test-- "to-tag!-url!"
		   --assert <http://red-lang.org> = to tag! http://red-lang.org
	   --test-- "to-tag!-file!"
		   --assert </file/> = to tag! %/file/
	   --test-- "to-tag!-issue!"
		   --assert <FF00> = to tag! #FF00
	   --test-- "to-tag!-binary!"
		   --assert (clear <o>) = to tag! #{}
	   --test-- "to-tag!-binary!"
		   --assert <abc> = to tag! #{616263}
	   --test-- "to-tag!-block!"
		   --assert (clear <o>) = to tag! []
	   --test-- "to-tag!-block!"
		   --assert <12> = to tag! [1 2]
	   --test-- "to-tag!-block!"
		   --assert <123> = to tag! [1 2 3]
	   --test-- "to-tag!-block!"
		   --assert <ab> = to tag! ["a" "b"]
	   --test-- "to-tag!-tuple!"
		   --assert <1.1.1> = to tag! 1.1.1
	   --test-- "to-tag!-paren!"
		   --assert (clear <o>) = to tag! first [()]
	   --test-- "to-tag!-paren!"
		   --assert <12> = to tag! first [(1 2)]
	   --test-- "to-tag!-tag!"
		   --assert <a> = to tag! <a>
	   ;--test-- "to-tag!-date!"
	   ;	--assert <16-Jun-2014/14:34:59+2:00> = to tag! 16-Jun-2014/14:34:59+2:00
	   --test-- "to-tag!-email!"
		   --assert <foo@boo> = to tag! foo@boo
	   --test-- "to-tag!-bitset!"
		   --assert <make bitset! #{00}> = to tag! make bitset! #{00}
===end-group===
===start-group=== "to-time!"
	   --test-- "to-time!-integer!"
		   --assert 0:02:03 = to time! 123
	   --test-- "to-time!-integer!"
		   --assert 0:04:16 = to time! 256
	   --test-- "to-time!-float!"
		   --assert 0:00:01.5 = to time! 1.5
	   --test-- "to-time!-integer!"
		   --assert -0:00:01 = to time! -1
	   --test-- "to-time!-float!"
		   --assert -0:00:01.5 = to time! -1.5
	   --test-- "to-time!-block!"
		   --assert 1:02 = to time! [1 2]
	   --test-- "to-time!-block!"
		   --assert 1:02:03 = to time! [1 2 3]
	   --test-- "to-time!-paren!"
		   --assert 1:02 = to time! first [(1 2)]
	   --test-- "to-time!-time!"
		   --assert 10:00 = to time! 10:00
===end-group===
===start-group=== "to-date!"
;	   --test-- "to-date!-block!"
;		   --assert 1-Feb-0003 = to date! [1 2 3]
;	   --test-- "to-date!-date!"
;		   --assert 16-Jun-2014/14:34:59+2:00 = to date! 16-Jun-2014/14:34:59+2:00
===end-group===
===start-group=== "to-email!"
;	--test-- "to-email!-char!"
;		   --assert a = to email! #"a"
;	   --test-- "to-email!-string!"
;		   --assert foo = to email! "foo"
;	   --test-- "to-email!-integer!"
;		   --assert 123 = to email! 123
;	   --test-- "to-email!-integer!"
;		   --assert 256 = to email! 256
;	   --test-- "to-email!-float!"
;		   --assert 1.5 = to email! 1.5
;	   --test-- "to-email!-integer!"
;		   --assert -1 = to email! -1
;	   --test-- "to-email!-float!"
;		   --assert -1.5 = to email! -1.5
;	   --test-- "to-email!-pair!"
;		   --assert 1x2 = to email! 1x2
;	   --test-- "to-email!-word!"
;		   --assert word = to email! word
;	   --test-- "to-email!-refinement!"
;		   --assert /refinement = to email! /refinement
;	   --test-- "to-email!-path!"
;		   --assert path/foo = to email! path/foo
;	   --test-- "to-email!-url!"
;		   --assert http://red-lang.org = to email! http://red-lang.org
;	   --test-- "to-email!-file!"
;		   --assert /file/ = to email! %/file/
;	   --test-- "to-email!-issue!"
;		   --assert #FF00 = to email! #FF00
;	   --test-- "to-email!-binary!"
;		   --assert  = to email! #{}
;	   --test-- "to-email!-binary!"
;		   --assert abc = to email! #{616263}
;	   --test-- "to-email!-block!"
;		   --assert  = to email! []
;	   --test-- "to-email!-block!"
;		   --assert 12 = to email! [1 2]
;	   --test-- "to-email!-block!"
;		   --assert 123 = to email! [1 2 3]
;	   --test-- "to-email!-block!"
;		   --assert ab = to email! ["a" "b"]
;	   --test-- "to-email!-tuple!"
;		   --assert 1.1.1 = to email! 1.1.1
;	   --test-- "to-email!-paren!"
;		   --assert  = to email! first [()]
;	   --test-- "to-email!-paren!"
;		   --assert 12 = to email! first [(1 2)]
;	   --test-- "to-email!-tag!"
;		   --assert a = to email! <a>
;	   --test-- "to-email!-time!"
;		   --assert 10:00 = to email! 10:00
;	   --test-- "to-email!-date!"
;		   --assert 16-Jun-2014/14:34:59+2:00 = to email! 16-Jun-2014/14:34:59+2:00
;	   --test-- "to-email!-email!"
;		   --assert foo@boo = to email! foo@boo
;	   --test-- "to-email!-bitset!"
;		   --assert make%20bitset!%20#%7B00%7D = to email! make bitset! #{00}
===end-group===
===start-group=== "to-bitset!"
	--test-- "to-bitset!-char!"
		--assert (make bitset! #{00000000000000000000000040}) = to bitset! #"a"
	--test-- "to-bitset!-string!"
		--assert (make bitset! #{0000000000000000000000000201}) = to bitset! "foo"
	;--test-- "to-bitset!-integer!"
	;	--assert (make bitset! #{00000000000000000000000000000000}) = to bitset! 123
	;--test-- "to-bitset!-integer!"
	;	--assert (make bitset! #{0000000000000000000000000000000000000000000000000000000000000000}) = to bitset! 256
	;--test-- "to-bitset!-url!"
	;	--assert (make bitset! #{0000000000070020000000004D8BA8}) = to bitset! http://red-lang.org
	;--test-- "to-bitset!-file!"
	;	--assert (make bitset! #{0000000000010000000000000648}) = to bitset! %/file/
	--test-- "to-bitset!-binary!"
		--assert (make bitset! #{}) = to bitset! #{}
	--test-- "to-bitset!-binary!"
		--assert (make bitset! #{616263}) = to bitset! #{616263}
	--test-- "to-bitset!-block!"
		--assert (make bitset! #{00}) = to bitset! []
	--test-- "to-bitset!-block!"
		--assert (make bitset! #{60}) = to bitset! [1 2]
	--test-- "to-bitset!-block!"
		--assert (make bitset! #{70}) = to bitset! [1 2 3]
	--test-- "to-bitset!-block!"
		--assert (make bitset! #{00000000000000000000000060}) = to bitset! ["a" "b"]
	   ;--test-- "to-bitset!-tag!"
	   ;	   --assert (make bitset! #{00000000000000000000000040}) = to bitset! <a>
	   ;--test-- "to-bitset!-email!"
	   ;	   --assert (make bitset! #{0000000000000000800000002201}) = to bitset! foo@boo
===end-group===



===start-group=== "Unknown method tests"
	--test-- "ERR MD4"			 	--assert error? try [#{} = checksum "" 'md4]
	--test-- "ERR MD4/with" 		--assert error? try [#{} = checksum/with "" 'md4 ""]
===end-group===


===start-group=== "Invalid args"
	--test-- "ERR string method" 				--assert error? try [#{} = checksum "123" ""]
	--test-- "ERR word! spec" 					--assert error? try [#{} = checksum/with "123" 'crc32 'xxx]
	--test-- "ERR CRC32 + /with" 				--assert error? try [#{} = checksum/with "123" 'crc32 2]
	--test-- "ERR TCP + /with"					--assert error? try [#{} = checksum/with "123" 'tcp 2]
	--test-- "ERR string spec for hash method"	--assert error? try [#{} = checksum/with "123" 'hash ""]
===end-group===


===start-group=== "TCP CRC tests"
	--test-- ""   					--assert 65535 = checksum ""   'tcp
	--test-- "^@" 					--assert 65535 = checksum "^@" 'tcp
	--test-- "^A" 					--assert 65534 = checksum "^A" 'tcp
	--test-- "^_"					--assert 65504 = checksum "^_" 'tcp
	--test-- " "					--assert 65503 = checksum " "  'tcp
	--test-- "Z"					--assert 65445 = checksum "Z"  'tcp
	--test-- "char 127"				--assert 65408 = checksum form make char! 127 'tcp
	--test-- "char 255"				--assert 15424 = checksum form make char! 255 'tcp
	
	--test-- "tcpcrc1"
		data: "12"
		--assert 52941 = checksum data 'tcp
		
	--test-- "tcpcrc2"
		data: "123"
		--assert 52890 = checksum data 'tcp
		
	--test-- "tcpcrc3"
		data: "123456789"
		--assert 12018 = checksum data 'tcp
		
	--test-- "tcpcrc4" 
		data: "0123456789"
		--assert 64245 = checksum data 'tcp
		
	--test-- "tcpcrc5"
		data: "The quick brown fox jumps over the lazy dog"
		--assert 55613 = checksum data 'tcp
		
===end-group===


===start-group=== "CRC32 tests"
	--test-- ""						--assert 0 = checksum ""   'crc32
	--test-- "^@" 					--assert -771559539	= checksum "^@" 'crc32
	--test-- "^A" 					--assert -1526341861	= checksum "^A" 'crc32
	--test-- "^_"					--assert 1594548856	= checksum "^_" 'crc32
	--test-- " "					--assert -378745019	= checksum " "  'crc32
	--test-- "Z"					--assert 1505515367	= checksum "Z"  'crc32
	--test-- "char 127"				--assert 314082080	= checksum form make char! 127 'crc32
	--test-- "char 255"				--assert -87017361	= checksum form make char! 255 'crc32
	
	--test-- "crc32-1"
		data: "12"
		--assert 1330857165	= checksum data 'crc32
	
	--test-- "crc32-2"
		data: "123"
		--assert -2008521774	= checksum data 'crc32
	
	--test-- "crc32-3"
		data: "123456789"
		--assert -873187034	= checksum data 'crc32
		
	--test-- "crc32-4"
		data: "0123456789"
		--assert -1501247546	= checksum data 'crc32
		
	--test-- "crc32-5"
		data: "The quick brown fox jumps over the lazy dog"
		--assert 1095738169	= checksum data 'crc32
		
===end-group===


===start-group=== "MD5 tests"
	
	--test-- "MD5_empty"
		data: ""
		expected: #{D41D8CD98F00B204E9800998ECF8427E}
		 --assert expected = checksum data 'md5
		
	--test-- "MD5_quick"
		data: "The quick brown fox jumps over the lazy dog"
		expected: #{9E107D9D372BB6826BD81D3542A419D6}
		--assert expected = checksum data 'md5
	
	--test-- "MD5_1-9"
		data: "123456789"
		expected: #{25F9E794323B453885F5181F1B624D0B}
		 --assert expected = checksum data 'md5
	
	--test-- "MD5_0-9" 
		data: "0123456789"
		expected: #{781E5E245D69B566979B86E28D23F2C7}
		--assert expected = checksum data 'md5
		
===end-group===


===start-group=== "SHA1 tests"
	
	--test-- "SHA1_empty"
		data: ""
		expected: #{DA39A3EE5E6B4B0D3255BFEF95601890AFD80709}
	 	--assert expected = checksum data 'sha1
	
	--test-- "SHA1_quick"
		data: "The quick brown fox jumps over the lazy dog"
		expected: #{2FD4E1C67A2D28FCED849EE1BB76E7391B93EB12}
	 	--assert expected = checksum data 'sha1
	
	--test-- "SHA1_1-9" 
		data: "123456789"
		expected: #{F7C3BC1D808E04732ADF679965CCC34CA7AE3441}
		--assert expected = checksum data 'sha1
	
	--test-- "SHA1_0-9" 
		data: "0123456789"
		expected: #{87ACEC17CD9DCD20A716CC2CF67417B71C8A7016}
		--assert expected = checksum data 'sha1
	
===end-group===


===start-group=== "SHA256 tests"
	
	--test-- "SHA256_empty"
		data: ""
		expected: #{E3B0C44298FC1C149AFBF4C8996FB92427AE41E4649B934CA495991B7852B855}
    	--assert expected = checksum data 'sha256
	
	--test-- "SHA256_quick" 
		data: "The quick brown fox jumps over the lazy dog"
		expected: #{D7A8FBB307D7809469CA9ABCB0082E4F8D5651E46D3CDB762D02D0BF37C9E592}
		--assert expected = checksum data 'sha256
	
	--test-- "SHA256_1-9"
		data: "123456789"
		expected: #{15E2B0D3C33891EBB0F1EF609EC419420C20E320CE94C65FBC8C3312448EB225}
		--assert expected = checksum data 'sha256
	
	 --test-- "SHA256_0-9"
	 	data: "0123456789"
		expected: #{84D89877F0D4041EFB6BF91A16F0248F2FD573E6AF05C19F96BEDB9F882F7882}
		--assert expected = checksum data 'sha256
   
===end-group===


===start-group=== "SHA384 tests"
	
	--test-- "SHA384_empty"
		data: ""
		expected: #{
			38B060A751AC96384CD9327EB1B1E36A21FDB71114BE07434C0CC7BF63F6E1DA
			274EDEBFE76F65FBD51AD2F14898B95B
		}
		--assert expected = checksum data 'sha384
	
	--test-- "SHA384_quick"
		data: "The quick brown fox jumps over the lazy dog"
		expected: #{
			CA737F1014A48F4C0B6DD43CB177B0AFD9E5169367544C494011E3317DBF9A50
			9CB1E5DC1E85A941BBEE3D7F2AFBC9B1
		}
		--assert expected = checksum data 'sha384
	
	--test-- "SHA384_1-9"
		data: "123456789"
		expected: #{
			EB455D56D2C1A69DE64E832011F3393D45F3FA31D6842F21AF92D2FE469C499D
			A5E3179847334A18479C8D1DEDEA1BE3
		}
		--assert expected = checksum data 'sha384
	
	--test-- "SHA384_0-9" 
		data: "0123456789"
		expected: #{
			90AE531F24E48697904A4D0286F354C50A350EBB6C2B9EFCB22F71C96CEAEFFC
			11C6095E9CA0DF0EC30BF685DCF2E5E5
		}
		--assert expected = checksum data 'sha384
	
===end-group===


===start-group=== "SHA512 tests"
	data: ""
	expected: #{
		CF83E1357EEFB8BDF1542850D66D8007D620E4050B5715DC83F4A921D36CE9CE
		47D0D13C5D85F2B0FF8318D2877EEC2F63B931BD47417A81A538327AF927DA3E
	}
	--test-- "SHA512_empty" --assert expected = checksum data 'sha512
	
	data: "The quick brown fox jumps over the lazy dog"
	expected: #{
		07E547D9586F6A73F73FBAC0435ED76951218FB7D0C8D788A309D785436BBB64
		2E93A252A954F23912547D1E8A3B5ED6E1BFD7097821233FA0538F3DB854FEE6
	}
	--test-- "SHA512_quick" --assert expected = checksum data 'sha512
	
	data: "123456789"
	expected: #{
		D9E6762DD1C8EAF6D61B3C6192FC408D4D6D5F1176D0C29169BC24E71C3F274A
		D27FCD5811B313D681F7E55EC02D73D499C95455B6B5BB503ACF574FBA8FFE85
	}
	--test-- "SHA512_1-9" --assert expected = checksum data 'sha512
	
	data: "0123456789"
	expected: #{
		BB96C2FC40D2D54617D6F276FEBE571F623A8DADF0B734855299B0E107FDA32C
		F6B69F2DA32B36445D73690B93CBD0F7BFC20E0F7F28553D2A4428F23B716E90
	}
	--test-- "SHA512_0-9" --assert expected = checksum data 'sha512
	
===end-group===


===start-group=== "/with (HMAC) empty data and key tests"

	--test-- "MD5"
		data: copy ""
		key:  copy ""
		expected: #{74E6F7298A9C2D168935F58C001BAD88}
		--assert expected = checksum/with data 'md5 key

	--test-- "SHA1"
		data: copy ""
		key:  copy ""
		expected: #{FBDB1D1B18AA6C08324B7D64B71FB76370690E1D}
		--assert expected = checksum/with data 'sha1 key

	--test-- "SHA256"
		data: copy ""
		key:  copy ""
		expected: #{B613679A0814D9EC772F95D778C35FC5FF1697C493715653C6C712144292C5AD}
		--assert expected = checksum/with data 'sha256 key

	--test-- "SHA384"
		data: copy ""
		key:  copy ""
		expected: #{
			6C1F2EE938FAD2E24BD91298474382CA218C75DB3D83E114B3D4367776D14D35
			51289E75E8209CD4B792302840234ADC
		}
		--assert expected = checksum/with data 'sha384 key

	--test-- "SHA512" 
		data: copy ""
		key:  copy ""
		expected: #{
			B936CEE86C9F87AA5D3C6F2E84CB5A4239A5FE50480A6EC66B70AB5B1F4AC673
			0C6C515421B327EC1D69402E53DFB49AD7381EB067B338FD7B0CB22247225D47
		}
		--assert expected = checksum/with data 'sha512 key

===end-group===
  

===start-group=== "/with (HMAC) standard test vectors"

	--test-- "MD5"
		data: copy "The quick brown fox jumps over the lazy dog"
		key:  copy "key"
		expected: #{80070713463E7749B90C2DC24911E275}
	 	--assert expected = checksum/with data 'md5 key

	--test-- "SHA1"
		data: copy "The quick brown fox jumps over the lazy dog"
		key:  copy "key"
		expected: #{DE7C9B85B8B78AA6BC8A7A36F70A90701C9DB4D9}
	 	--assert expected = checksum/with data 'sha1 key

	--test-- "SHA256"
		data: copy "The quick brown fox jumps over the lazy dog"
		key:  copy "key"
		expected: #{F7BC83F430538424B13298E6AA6FB143EF4D59A14946175997479DBC2D1A3CD8}
	 	--assert expected = checksum/with data 'sha256 key

	--test-- "SHA384"
		data: copy "The quick brown fox jumps over the lazy dog"
		key:  copy "key"
		expected: #{
			D7F4727E2C0B39AE0F1E40CC96F60242D5B7801841CEA6FC592C5D3E1AE50700
			582A96CF35E1E554995FE4E03381C237
		}
	 	--assert expected = checksum/with data 'sha384 key

	--test-- "SHA512"
		data: copy "The quick brown fox jumps over the lazy dog"
		key:  copy "key"
		expected: #{
			B42AF09057BAC1E2D41708E48A902E09B5FF7F12AB428A4FE86653C73DD248FB
			82F948A549F7B791A5B41915EE4D1EC3935357E4E2317250D0372AFA2EBEEB3A
		}
	 	--assert expected = checksum/with data 'sha512 key

;-------------------------------------------------------------------------------
; Test vectors from RFC 4231 (https://tools.ietf.org/html/rfc4231)
;-------------------------------------------------------------------------------

	--test-- "PRF-1-HMAC-SHA-256" 
		data: copy #{4869205468657265}							; "Hi There"
		key:  copy #{0B0B0B0B0B0B0B0B0B0B0B0B0B0B0B0B0B0B0B0B}	; 20 bytes
		expected: #{B0344C61D8DB38535CA8AFCEAF0BF12B881DC200C9833DA726E9376C2E32CFF7}
		--assert expected = checksum/with data 'sha256 key

	--test-- "PRF-1-HMAC-SHA-384" 
		data: copy #{4869205468657265}							; "Hi There"
		key:  copy #{0B0B0B0B0B0B0B0B0B0B0B0B0B0B0B0B0B0B0B0B}	; 20 bytes
		expected: #{
			AFD03944D84895626B0825F4AB46907F15F9DADBE4101EC682AA034C7CEBC59C
			FAEA9EA9076EDE7F4AF152E8B2FA9CB6
		}
		--assert expected = checksum/with data 'sha384 key

	--test-- "PRF-1-HMAC-SHA-512" 
		data: copy #{4869205468657265}							; "Hi There"
		key:  copy #{0B0B0B0B0B0B0B0B0B0B0B0B0B0B0B0B0B0B0B0B}	; 20 bytes
		expected: #{
			87AA7CDEA5EF619D4FF0B4241A1D6CB02379F4E2CE4EC2787AD0B30545E17CDE
			DAA833B7D6B8A702038B274EAEA3F4E4BE9D914EEB61F1702E696C203A126854
		}
		--assert expected = checksum/with data 'sha512 key

	--test-- "PRF-2-HMAC-SHA-256"
		data: copy  "what do ya want for nothing?"
		key:  copy "Jefe"
		expected: #{5BDCC146BF60754E6A042426089575C75A003F089D2739839DEC58B964EC3843}
	 	--assert expected = checksum/with data 'sha256 key

	--test-- "PRF-2-HMAC-SHA-384"
		data: copy  "what do ya want for nothing?"
		key:  copy "Jefe"
		expected: #{
			AF45D2E376484031617F78D2B58A6B1B9C7EF464F5A01B47E42EC3736322445E
			8E2240CA5E69E2C78B3239ECFAB21649
		}
		--assert expected = checksum/with data 'sha384 key

	--test-- "PRF-2-HMAC-SHA-512"
		data: copy  "what do ya want for nothing?"
		key:  copy "Jefe" 
		expected: #{
			164B7A7BFCF819E2E395FBE73B56E0A387BD64222E831FD610270CD7EA250554
			9758BF75C05A994A6D034F65F8F0E6FDCAEAB1A34D4A6B4B636E070A38BCE737
		}
		--assert expected = checksum/with data 'sha512 key

	--test-- "PRF-3-HMAC-SHA-256"
		data: copy #{											; 50 bytes
			DDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDD
			DDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDD
		}
		key: copy #{AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA}	; 20 bytes
		expected: #{773EA91E36800E46854DB8EBD09181A72959098B3EF8C122D9635514CED565FE}
		--assert expected = checksum/with data 'sha256 key

	--test-- "PRF-3-HMAC-SHA-384"
		data: copy #{											; 50 bytes
			DDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDD
			DDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDD
		}
		key: copy #{AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA}	; 20 bytes
		expected: #{
			88062608D3E6AD8A0AA2ACE014C8A86F0AA635D947AC9FEBE83EF4E55966144B
			2A5AB39DC13814B94E3AB6E101A34F27
		}
		--assert expected = checksum/with data 'sha384 key

	--test-- "PRF-3-HMAC-SHA-512"
		data: copy #{											; 50 bytes
			DDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDD
			DDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDD
		}
		key: copy #{AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA}	; 20 bytes
		expected: #{
			FA73B0089D56A284EFB0F0756C890BE9B1B5DBDD8EE81A3655F83E33B2279D39
			BF3E848279A722C806B485A47E67C807B946A337BEE8942674278859E13292FB
		}
		--assert expected = checksum/with data 'sha512 key
	
	--test-- "PRF-4-HMAC-SHA-256"
		data: copy #{													; 50 bytes
			CDCDCDCDCDCDCDCDCDCDCDCDCDCDCDCDCDCDCDCDCDCDCDCDCD
			CDCDCDCDCDCDCDCDCDCDCDCDCDCDCDCDCDCDCDCDCDCDCDCDCD
		}
		key: copy #{0102030405060708090A0B0C0D0E0F10111213141516171819}	; 25 bytes
		expected: #{82558A389A443C0EA4CC819899F2083A85F0FAA3E578F8077A2E3FF46729665B}
		--assert expected = checksum/with data 'sha256 key

	--test-- "PRF-4-HMAC-SHA-384"
		data: copy #{													; 50 bytes
			CDCDCDCDCDCDCDCDCDCDCDCDCDCDCDCDCDCDCDCDCDCDCDCDCD
			CDCDCDCDCDCDCDCDCDCDCDCDCDCDCDCDCDCDCDCDCDCDCDCDCD
		}
		key: copy #{0102030405060708090A0B0C0D0E0F10111213141516171819}	; 25 bytes
		expected: #{
			3E8A69B7783C25851933AB6290AF6CA77A9981480850009CC5577C6E1F573B4E
			6801DD23C4A7D679CCF8A386C674CFFB
		}
		--assert expected = checksum/with data 'sha384 key

	--test-- "PRF-4-HMAC-SHA-512" 
		data: copy #{													; 50 bytes
			CDCDCDCDCDCDCDCDCDCDCDCDCDCDCDCDCDCDCDCDCDCDCDCDCD
			CDCDCDCDCDCDCDCDCDCDCDCDCDCDCDCDCDCDCDCDCDCDCDCDCD
		}
		key: copy #{0102030405060708090A0B0C0D0E0F10111213141516171819}	; 25 bytes
		expected: #{
			B0BA465637458C6990E5A8C5F61D4AF7E576D97FF94B872DE76F8050361EE3DB
			A91CA5C11AA25EB4D679275CC5788063A5F19741120C4F2DE2ADEBEB10A298DD
		}
		--assert expected = checksum/with data 'sha512 key

	--test-- "PRF-5-HMAC-SHA-256"
		data: copy #{546573742057697468205472756e636174696f6e}	; "Test With Truncation"
		key:  copy #{0C0C0C0C0C0C0C0C0C0C0C0C0C0C0C0C0C0C0C0C}	; 20 bytes
		expected: #{A3B6167473100EE06E0C796C2955552BFA6F7C0A6A8AEF8B93F860AAB0CD20C5}
		--assert expected = checksum/with data 'sha256 key

	--test-- "PRF-5-HMAC-SHA-384"
		data: copy #{546573742057697468205472756e636174696f6e}	; "Test With Truncation"
		key:  copy #{0C0C0C0C0C0C0C0C0C0C0C0C0C0C0C0C0C0C0C0C}	; 20 bytes
		expected: #{
			3ABF34C3503B2A23A46EFC619BAEF897F4C8E42C934CE55CCBAE9740FCBC1AF4
			CA62269E2A37CD88BA926341EFE4AEEA
		}
	 	--assert expected = checksum/with data 'sha384 key

	--test-- "PRF-5-HMAC-SHA-512"
		data: copy #{546573742057697468205472756e636174696f6e}	; "Test With Truncation"
		key:  copy #{0C0C0C0C0C0C0C0C0C0C0C0C0C0C0C0C0C0C0C0C}	; 20 bytes
		expected: #{
			415FAD6271580A531D4179BC891D87A650188707922A4FBB36663A1EB16DA008
			711C5B50DDD0FC235084EB9D3364A1454FB2EF67CD1D29FE6773068EA266E96B
		}
		--assert expected = checksum/with data 'sha512 key

												; "Test Using Larger Than Block-Size Key - Hash Key First"
	data: copy#{											
		54657374205573696E67204C6172676572205468616E20426C6F636B2D53697A
		65204B6579202D2048617368204B6579204669727374
	}
	key:  #{											; 131 bytes
		AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
		AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
		AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
		AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
		AAAAAA
	}
                  
	--test-- "PRF-6-HMAC-SHA-256"
												; "Test Using Larger Than Block-Size Key - Hash Key First"
		data: copy#{											
			54657374205573696E67204C6172676572205468616E20426C6F636B2D53697A
			65204B6579202D2048617368204B6579204669727374
		}
		key:  #{											; 131 bytes
			AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
			AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
			AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
			AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
			AAAAAA
		}
		expected: #{60E431591EE0B67F0D8A26AACBF5B77F8E0BC6213728C5140546040F0EE37F54}
		--assert expected = checksum/with data 'sha256 key

	--test-- "PRF-6-HMAC-SHA-384"
												; "Test Using Larger Than Block-Size Key - Hash Key First"
		data: copy#{											
			54657374205573696E67204C6172676572205468616E20426C6F636B2D53697A
			65204B6579202D2048617368204B6579204669727374
		}
		key:  #{											; 131 bytes
			AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
			AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
			AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
			AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
			AAAAAA
		}
		expected: #{
			4ECE084485813E9088D2C63A041BC5B44F9EF1012A2B588F3CD11F05033AC4C6
			0C2EF6AB4030FE8296248DF163F44952
		}
	 	--assert expected = checksum/with data 'sha384 key

	--test-- "PRF-6-HMAC-SHA-512"
												; "Test Using Larger Than Block-Size Key - Hash Key First"
		data: copy#{											
			54657374205573696E67204C6172676572205468616E20426C6F636B2D53697A
			65204B6579202D2048617368204B6579204669727374
		}
		key:  #{											; 131 bytes
			AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
			AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
			AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
			AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
			AAAAAA
		} 
		expected: #{
			80B24263C7C1A3EBB71493C1DD7BE8B49B46D1F41B4AEEC1121B013783F8F352
			6B56D037E05F2598BD0FD2215D6A1E5295E64F73F63F0AEC8B915A985D786598
		}
		--assert expected = checksum/with data 'sha512 key
                  
	--test-- "PRF-7-HMAC-SHA-256"
														; data = "This is a test using a larger than block-size key
														; and a larger than block-size data. The key needs to be
														; hashed  before being used by the HMAC algorithm."
		data: #{
			5468697320697320612074657374207573696E672061206C6172676572207468
			616E20626C6F636B2D73697A65206B657920616E642061206C61726765722074
			68616E20626C6F636B2D73697A6520646174612E20546865206B6579206E6565
			647320746F20626520686173686564206265666F7265206265696E6720757365
			642062792074686520484D414320616C676F726974686D2E
		}
		key:  #{											; 131 bytes
			AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
			AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
			AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
			AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
			AAAAAA
		}
		expected: #{9B09FFA71B942FCB27635FBCD5B0E944BFDC63644F0713938A7F51535C3A35E2}
		--assert expected = checksum/with data 'sha256 key

	--test-- "PRF-7-HMAC-SHA-384"
														; data = "This is a test using a larger than block-size key
														; and a larger than block-size data. The key needs to be
														; hashed  before being used by the HMAC algorithm."
		data: #{
			5468697320697320612074657374207573696E672061206C6172676572207468
			616E20626C6F636B2D73697A65206B657920616E642061206C61726765722074
			68616E20626C6F636B2D73697A6520646174612E20546865206B6579206E6565
			647320746F20626520686173686564206265666F7265206265696E6720757365
			642062792074686520484D414320616C676F726974686D2E
		}
		key:  #{											; 131 bytes
			AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
			AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
			AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
			AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
			AAAAAA
		}
		expected: #{
			6617178E941F020D351E2F254E8FD32C602420FEB0B8FB9ADCCEBB82461E99C5
			A678CC31E799176D3860E6110C46523E
		}
		--assert expected = checksum/with data 'sha384 key

	--test-- "PRF-7-HMAC-SHA-512"
														; data = "This is a test using a larger than block-size key
														; and a larger than block-size data. The key needs to be
														; hashed  before being used by the HMAC algorithm."
		data: #{
			5468697320697320612074657374207573696E672061206C6172676572207468
			616E20626C6F636B2D73697A65206B657920616E642061206C61726765722074
			68616E20626C6F636B2D73697A6520646174612E20546865206B6579206E6565
			647320746F20626520686173686564206265666F7265206265696E6720757365
			642062792074686520484D414320616C676F726974686D2E
		}
		key:  #{											; 131 bytes
			AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
			AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
			AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
			AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
			AAAAAA
		}
		expected: #{
			E37B6A775DC87DBAA4DFA9F96E5E3FFDDEBD71F8867289865DF5A32D20CDC944
			B6022CAC3C4982B10D5EEB55C3E4DE15134676FB6DE0446065C97440FA8C6A58
		}
		 --assert expected = checksum/with data 'sha512 key

===end-group===



===start-group=== "IS function"

	--test-- "is-1"
		a: make reactor! [x: 1 y: is [x + 1]]
		--assert a/x == 1
		--assert a/y == 2
		a/x: 5
		--assert a/y == 6

	--test-- "is-2"
		--assert [x + 1] = react? a 'x
		--assert 	 none? react?/target a 'x
		--assert [x + 1] = react?/target a 'y
		--assert     none? react? a 'y
	
	--test-- "is-3"
		b: make reactor! [x: 2 y: 3 z: is [x + y]]
		--assert b/x == 2
		--assert b/y == 3
		--assert b/z == 5
		b/x: 5
		--assert b/z == 8

	--test-- "is-4"
		--assert [x + y] = react? b 'x
		--assert [x + y] = react? b 'y
		--assert [x + y] = react?/target b 'z
    
    --test-- "is-5"
		c: make reactor! [x: 1 y: is [x + 1] z: is [y + 1]]
		--assert c/x == 1
		--assert c/y == 2
		--assert c/z == 3
		c/x: 4
		--assert c/y == 5
		--assert c/z == 6

	--test-- "is-6"
		--assert [x + 1] = react? c 'x
		--assert     none? react?/target c 'x
		--assert [x + 1] = react?/target c 'y
		--assert [y + 1] = react? c 'y
		--assert none? react? c 'z
		--assert [y + 1] = react?/target c 'z

 --test-- "is-7"
		;d: make reactor! [x: is [y + 1] y: is [x + 3]]
		;--assert none? d/x
		;--assert none? d/y
		;d/x: 1
		;--assert d/x = 5
		;--assert d/y = 4

===end-group===


===start-group=== "Delimiter Lexer tests"

	--test-- "lexer-delimiter-1"  --assert [""]			= load/all {""}
	--test-- "lexer-delimiter-2"  --assert [""]			= load/all "{}"
	--test-- "lexer-delimiter-3"  --assert ["{"]		= load/all {"^{"}
	--test-- "lexer-delimiter-4"  --assert ["}"]		= load/all {"^}"}
	--test-- "lexer-delimiter-5"  --assert ["{}"]		= load/all {"^{^}"}
	--test-- "lexer-delimiter-6"  --assert [{^}^{}]		= load/all {"^}^{"}
	--test-- "lexer-delimiter-7"  --assert ["^{^}^}"]	= load/all {"^{^}^}"}
	--test-- "lexer-delimiter-8"  --assert [""]			= load/all {"^"}
	--test-- "lexer-delimiter-9"  --assert [""]			= load/all "{}"
	--test-- "lexer-delimiter-10" --assert ["{"]		= load/all "{^^{}"
	--test-- "lexer-delimiter-11" --assert [{"}]		= load/all {{"}}
	--test-- "lexer-delimiter-12" --assert ["^/"]		= load/all "{^/}^/"
	--test-- "lexer-delimiter-13" --assert ["^/"]		= load/all "{^/}"
	--test-- "lexer-delimiter-14" --assert ["^/"]		= load/all "{^/}"
	--test-- "lexer-delimiter-15" --assert [{{"x"}}]	= load/all {{{"x"}}}
	--test-- "lexer-delimiter-16" --assert ["{x}"]		= load/all {"{x}"}
	--test-- "lexer-delimiter-17" --assert [{"x"}]		= load/all {{"x"}}
	--test-- "lexer-delimiter-18" --assert ["x"]		= load/all {{x}}
	
===end-group===

===start-group=== "lexer-time"

;	--test-- "lexer-time-1" --assert [2147483645:59:59]	= load/all {2147483645:59:59}

===end-group===

 ]
~~~end-file~~~

